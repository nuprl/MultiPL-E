{
  "name": "mbpp_760_unique_Element",
  "language": "go_test.go",
  "prompt": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp6i9nzahv_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp6i9nzahv_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // map[int]int\n    // key: value\n    // value: count\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmps3t5z064_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmps3t5z064_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    }\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3364ipcb_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3364ipcb_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpzt4sdk_o_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpzt4sdk_o_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpt6r317fa_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpt6r317fa_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpl3mo13e0_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpl3mo13e0_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp4ngt_q_p_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp4ngt_q_p_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Your code here\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmpy0iukz6d_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpy0iukz6d_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var unique int\n    for _, v := range arr {\n        if unique == 0 {\n            unique = v\n        } else if unique != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpy26oac1j_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpy26oac1j_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8timig8__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8timig8__test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var m map[int]int\n    m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp7bci5ep3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp7bci5ep3_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphujacp05_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmphujacp05_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpoyb7qhae_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpoyb7qhae_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool = true\n    var i, j int\n    for i = 0; i < len(arr); i++ {\n        for j = i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0um8nny9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp0um8nny9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpy4tut270_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpy4tut270_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpyky24n3x_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpyky24n3x_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpti5fyk6w_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpti5fyk6w_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpqwxn7sxp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpqwxn7sxp_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 1; i < len(arr); i++ {\n        if arr[i] != arr[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpjhrc2igx_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpjhrc2igx_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpl3mo13e0_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpl3mo13e0_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            } else {\n                unique = true\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmph201sq54_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmph201sq54_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmph201sq54_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var check_map = make(map[int]int)\n    for _, value := range arr {\n        check_map[value] += 1\n    }\n    for _, value := range check_map {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpxsr2a6s9_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpxsr2a6s9_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool = true\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpzogqux37_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpzogqux37_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Your code goes here\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmplcpm949m_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmplcpm949m_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Your code goes here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpqme2zn2j_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8eouh5qe_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8eouh5qe_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphik0sp0s_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmphik0sp0s_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpcxpgnmxn_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpcxpgnmxn_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var result bool\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                result = false\n                break\n            } else {\n                result = true\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpb8yzsuch_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmpb8yzsuch_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpb8yzsuch_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0zhgbj4q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp0zhgbj4q_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var result bool\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count == 1 {\n            result = true\n        } else {\n            result = false\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpj_mof08x_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    var temp int = arr[0]\n    for _, v := range arr {\n        if v != temp {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var result bool = true\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                result = false\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphktm2nb__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmphktm2nb__test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]bool)\n    for _, v := range arr {\n        if m[v] {\n            return false\n        }\n        m[v] = true\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpw8j3qcbc_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpw8j3qcbc_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3mnqubkf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3mnqubkf_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpkieq4tfc_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpqwxn7sxp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpqwxn7sxp_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    m := make(map[int]bool)\n    for _, v := range arr {\n        if _, ok := m[v]; ok {\n            return false\n        }\n        m[v] = true\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp7oxd_9ox_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp7oxd_9ox_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]bool)\n    for _, v := range arr {\n        if m[v] {\n            return false\n        }\n        m[v] = true\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpt4p7pb5r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpt4p7pb5r_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphujacp05_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmphujacp05_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8timig8__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8timig8__test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    // return true if the list contains only one distinct element\n    // return false otherwise\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp_eus41de_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp_eus41de_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var flag bool\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                flag = false\n                break\n            } else {\n                flag = true\n            }\n        }\n    }\n    return flag\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvzc3ebpk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmpvzc3ebpk_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvzc3ebpk_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpsfc1d_yr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpsfc1d_yr_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool = true\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpghfi0e0z_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpghfi0e0z_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpkp_fwcrq_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool = true\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123301,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpr254ld4t_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpr254ld4t_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmpm27vsj5x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm27vsj5x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp58__8hs9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp58__8hs9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpoksaoocg_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpoksaoocg_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp2dsvd83a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpfu1pafi1_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpzt4sdk_o_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpzt4sdk_o_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpv5k3y2gn_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp75x6tqjm_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp75x6tqjm_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpt6r317fa_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpt6r317fa_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp8xtjga1e_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpiharm55d_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmputta0oxw_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpe5e6gji4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpe5e6gji4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var unique bool\n    unique = true\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3arl9lo2_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3arl9lo2_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp4ngt_q_p_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp4ngt_q_p_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu8q518ly_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu8q518ly_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpvtixr_6b_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var i, j int\n    for i = 0; i < len(arr); i++ {\n        for j = i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpss_slbm3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpss_slbm3_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpv5k3y2gn_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpevyrsuw4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    }\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3364ipcb_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3364ipcb_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpmz8zhzsc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123298,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp03eg2o_v_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517408,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpm320ym4b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var result bool\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                result = false\n                break\n            } else {\n                result = true\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123303,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmptye63_yx_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmptye63_yx_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmptye63_yx_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}