{
  "name": "mbpp_572_two_unique_nums",
  "language": "go_test.go",
  "prompt": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        if _, ok := m[v]; ok {\n            m[v] += 1\n        } else {\n            m[v] = 1\n        }\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp0d6ppduo_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := m[num]; !ok {\n            m[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvb_ss8kc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvb_ss8kc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var num_map = make(map[int]int)\n\n    for _, num := range nums {\n        num_map[num] = num_map[num] + 1\n    }\n\n    for _, num := range nums {\n        if num_map[num] == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            is_unique := true\n            for _, unique_num := range unique_nums {\n                if num == unique_num {\n                    is_unique = false\n                    break\n                }\n            }\n            if is_unique {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpemsl30y7_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpemsl30y7_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the numbers and their counts.\n    num_counts := make(map[int]int)\n    // Iterate through the numbers and add them to the map.\n    for _, num := range nums {\n        num_counts[num]++\n    }\n    // Create a slice to store the unique numbers.\n    unique_nums := []int{}\n    // Iterate through the map and add the unique numbers to the slice.\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // Return the unique numbers.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmprxna_hc4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !is_in_list(num, unique_nums) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwyztfmgd_test.go:12:13: undefined: is_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    var res []int\n    for k, v := range m {\n        if v == 1 {\n            res = append(res, k)\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpd1k0wv92_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpd1k0wv92_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        var count int\n        for j := 0; j < len(nums); j++ {\n            if nums[i] == nums[j] {\n                count++\n            }\n        }\n        if count == 1 {\n            result = append(result, nums[i])\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    m := make(map[int]int)\n    for _, n := range nums {\n        m[n] += 1\n    }\n    var result []int\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpth_cx2xz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpth_cx2xz_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var numsMap = make(map[int]int)\n    for _, v := range nums {\n        numsMap[v] += 1\n    }\n    for k, v := range numsMap {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp7yipkp5g_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp7yipkp5g_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                continue\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique []int\n    for _, num := range nums {\n        if len(unique) == 0 {\n            unique = append(unique, num)\n        } else {\n            for i, uniq := range unique {\n                if num == uniq {\n                    break\n                }\n                if i == len(unique) - 1 {\n                    unique = append(unique, num)\n                }\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpj5xmmdd5_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpj5xmmdd5_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy_8s9i6t_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy_8s9i6t_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_counts := make(map[int]int)\n\n    // Iterate through the list and add each number to the map.\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    // Create a slice to store the two unique numbers.\n    unique_nums := make([]int, 0)\n\n    // Iterate through the map and add each number that only appears once to the slice.\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpr6fz9wly_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpr6fz9wly_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if len(nums) == 1 {\n        return nums\n    }\n    if len(nums) == 2 {\n        return nums\n    }\n    var unique_nums []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            unique_nums = append(unique_nums, nums[i])\n        } else if i == 1 {\n            if nums[i] != nums[i-1] {\n                unique_nums = append(unique_nums, nums[i])\n            }\n        } else {\n            if nums[i] != nums[i-1] && nums[i] != nums[i-2] {\n                unique_nums = append(unique_nums, nums[i])\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeypr2ki0_test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeypr2ki0_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpqtzoonop_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                continue\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                } else if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpw12av_at_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of occurences of each number\n    num_count := make(map[int]int)\n    for _, num := range nums {\n        num_count[num]++\n    }\n    // Create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    for num, count := range num_count {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpturciehy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpturciehy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpturciehy_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        if _, ok := nums_map[num]; ok {\n            nums_map[num] = nums_map[num] + 1\n        } else {\n            nums_map[num] = 1\n        }\n    }\n    for k, v := range nums_map {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpjxyuyl8g_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpjxyuyl8g_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpjxyuyl8g_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[1] == num {\n            continue\n        } else if len(result) == 1 {\n            result = append(result, num)\n        } else {\n            result[0] = result[1]\n            result[1] = num\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 17 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc0001c2000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001be180)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc0001c2000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.two_unique_nums(0xc000090698, 0x7, 0x7, 0x0, 0x0, 0x0)\n\t/tmp/tmp7xjr051z_test.go:16 +0x125\ncommand-line-arguments_test.TestTwo_Unique_Nums(0xc0001be180)\n\t/tmp/tmp7xjr051z_test.go:35 +0xdb\ntesting.tRunner(0xc0001be180, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                } else if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpkxerf5en_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpkxerf5en_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Write your code here\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            for i, r := range result {\n                if r == num {\n                    result = append(result[:i], result[i+1:]...)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxontg9zo_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxontg9zo_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxontg9zo_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement this function\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmptk8457r8_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmptk8457r8_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmptk8457r8_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var num_counts = make(map[int]int)\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpv44t4nnc_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpv44t4nnc_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the numbers\n    nums_map := make(map[int]int)\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n\n    for _, num := range nums {\n        if _, ok := nums_map[num]; ok {\n            nums_map[num] += 1\n        } else {\n            nums_map[num] = 1\n        }\n    }\n\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpi62mrqlh_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpi62mrqlh_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] != nums[i+1] {\n            unique_nums = append(unique_nums, nums[i])\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.two_unique_nums(...)\n\t/tmp/tmp_auu4ogf_test.go:12\ncommand-line-arguments_test.TestTwo_Unique_Nums(0xc000001380)\n\t/tmp/tmp_auu4ogf_test.go:26 +0x81f\ntesting.tRunner(0xc000001380, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6z6rdtlj_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp6z6rdtlj_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 || result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmplqingg41_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmplqingg41_test.go:34: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for i := 0; i < len(nums); i++ {\n        if !contains(unique_nums, nums[i]) {\n            unique_nums = append(unique_nums, nums[i])\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124184,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6j_uev1w_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears in the list.\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpuwt1y_di_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var count = make(map[int]int)\n    for _, num := range nums {\n        count[num]++\n    }\n    for num, c := range count {\n        if c == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpp6hh35xz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpp6hh35xz_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    nums_map := make(map[int]int)\n\n    // Iterate through the list and add the number to the map.\n    for _, num := range nums {\n        nums_map[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n\n    // Iterate through the map and add the unique numbers to the list.\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6sigg7_w_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6sigg7_w_test.go:46: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp6sigg7_w_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears\n    num_counts := make(map[int]int)\n\n    // Iterate through the list and add each number to the map\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n\n    // Create a list to store the unique numbers\n    unique_nums := []int{}\n\n    // Iterate through the map and add the unique numbers to the list\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyfm2g2dh_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_counts := make(map[int]int)\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Loop through the list of numbers.\n    for _, num := range nums {\n        // If the number is not in the map, add it to the map and the slice.\n        if _, ok := num_counts[num]; !ok {\n            num_counts[num] = 1\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // Return the slice of unique numbers.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpi3bj4pcq_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpi3bj4pcq_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the numbers and their occurences.\n    nums_map := make(map[int]int)\n    // Iterate through the list of numbers.\n    for _, num := range nums {\n        // If the number is not in the map, add it.\n        if _, ok := nums_map[num]; !ok {\n            nums_map[num] = 1\n        } else {\n            // If the number is in the map, increment its occurence.\n            nums_map[num]++\n        }\n    }\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Iterate through the map.\n    for num, occurence := range nums_map {\n        // If the number has only one occurence, add it to the list.\n        if occurence == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // Return the list of unique numbers.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpa00ogxxt_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_map := make(map[int]int)\n    // Loop through the list and store the number of times a number appears in the list.\n    for _, num := range nums {\n        num_map[num]++\n    }\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Loop through the map and append the unique numbers to the slice.\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp0idxukyf_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp0idxukyf_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if unique_num == num {\n                    unique_nums = append(unique_nums[:i], unique_nums[i+1:]...)\n                    break\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpu2zh6z36_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpu2zh6z36_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpu2zh6z36_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    nums_map := make(map[int]int)\n    // Iterate through the list and add the number to the map.\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Iterate through the map and add the unique numbers to the list.\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // Return the list of unique numbers.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, v := range nums {\n        if len(result) == 0 {\n            result = append(result, v)\n        } else {\n            if result[0] == v {\n                continue\n            } else {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpl12uaj30_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpl12uaj30_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the count of each number\n    num_counts := make(map[int]int)\n\n    // iterate through the numbers\n    for _, num := range nums {\n        // if the number is in the map, increment the count\n        if _, ok := num_counts[num]; ok {\n            num_counts[num] += 1\n        } else {\n            // if the number is not in the map, add it with a count of 1\n            num_counts[num] = 1\n        }\n    }\n\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n\n    // iterate through the map\n    for num, count := range num_counts {\n        // if the count is 1, add the number to the slice\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    // return the slice of unique numbers\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpru_m0b0a_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpru_m0b0a_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list\n    nums_map := make(map[int]int)\n    // Iterate through the list and add each number to the map\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    // Create a slice to store the unique numbers\n    unique_nums := []int{}\n    // Iterate through the map and add the unique numbers to the slice\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmph_3txjg4_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmph_3txjg4_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            var is_unique bool = true\n            for _, unique_num := range unique_nums {\n                if num == unique_num {\n                    is_unique = false\n                    break\n                }\n            }\n            if is_unique {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpnovnazhd_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpnovnazhd_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var num_map = make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp3cgfr0zi_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp3cgfr0zi_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var unique_nums_map = make(map[int]int)\n\n    for _, num := range nums {\n        if _, ok := unique_nums_map[num]; !ok {\n            unique_nums_map[num] = 1\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyas00c2q_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyas00c2q_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result) - 1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpkwhvnegj_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpkwhvnegj_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var num_map = make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    for num, count := range num_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpi3vfafxs_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpi3vfafxs_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if unique_num == num {\n                    unique_nums = append(unique_nums[:i], unique_nums[i+1:]...)\n                } else {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpb57rktv7_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpb57rktv7_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpb57rktv7_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result)-1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpew09c8pv_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpew09c8pv_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var nums_map = make(map[int]bool)\n\n    for _, num := range nums {\n        if _, ok := nums_map[num]; !ok {\n            nums_map[num] = true\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprgnh4u25_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprgnh4u25_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpqkyu0uj0_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpd40dujsn_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if num != result[len(result)-1] {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpntryl5s0_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpntryl5s0_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                } else if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears in the list.\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n\n    // Create a slice to store the unique numbers in the list.\n    unique_nums := make([]int, 0)\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124186,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpmesyzbh9_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpmesyzbh9_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpp1gl4bqd_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpp1gl4bqd_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:1]\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] = nums_map[num] + 1\n    }\n    for _, num := range nums {\n        if nums_map[num] == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                } else if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz1lhox_u_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            var is_unique bool = true\n            for _, unique_num := range unique_nums {\n                if num == unique_num {\n                    is_unique = false\n                    break\n                }\n            }\n            if is_unique {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124185,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpnovnazhd_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpnovnazhd_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            var found bool\n            for _, res := range result {\n                if res == num {\n                    found = true\n                    break\n                }\n            }\n            if !found {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpdadn13wf_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpdadn13wf_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            unique_nums = append(unique_nums, nums[i])\n        } else {\n            for j := 0; j < len(unique_nums); j++ {\n                if nums[i] == unique_nums[j] {\n                    break\n                } else if j == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, nums[i])\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp1gdfc5wn_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp1gdfc5wn_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the numbers\n    nums_map := make(map[int]int)\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    // loop through the numbers\n    for _, num := range nums {\n        // if the number is not in the map, add it to the map and the slice\n        if nums_map[num] == 0 {\n            nums_map[num] = 1\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // return the unique numbers\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2bkgx7h3_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2bkgx7h3_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpeeftc453_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                continue\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpg2jkyxji_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:1]\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpvfyxetuf_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if unique_num == num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpp14t9nib_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpp14t9nib_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the numbers and their counts.\n    num_counts := make(map[int]int)\n\n    // Loop through the numbers and increment the count for each number.\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n\n    // Loop through the numbers and their counts.\n    for num, count := range num_counts {\n        // If the count is 1, add the number to the slice.\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    // Return the slice of unique numbers.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpf52lz0ob_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpf52lz0ob_test.go:48: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpf52lz0ob_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    var res []int\n    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            res = append(res, k)\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_counts := make(map[int]int)\n    // Iterate through the list and add the number to the map.\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Iterate through the map and add the unique numbers to the list.\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpmlr_0z0c_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpmlr_0z0c_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to hold the unique numbers\n    unique_nums := make(map[int]int)\n\n    // Iterate through the list of numbers\n    for _, num := range nums {\n        // If the number is not in the map, add it\n        if _, ok := unique_nums[num]; !ok {\n            unique_nums[num] = num\n        } else {\n            // If the number is in the map, delete it\n            delete(unique_nums, num)\n        }\n    }\n\n    // Create a list to hold the unique numbers\n    var unique_list []int\n\n    // Iterate through the map and add the unique numbers to the list\n    for _, num := range unique_nums {\n        unique_list = append(unique_list, num)\n    }\n\n    return unique_list\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpji6pehba_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpji6pehba_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp33fgv17u_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp33fgv17u_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears in the list.\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpm271jsa6_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpm271jsa6_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpm271jsa6_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6uay8uzz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmprih9iqwi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the numbers and their counts.\n    num_counts := make(map[int]int)\n    // Iterate through the list of numbers.\n    for _, num := range nums {\n        // Increment the count for the number.\n        num_counts[num]++\n    }\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n    // Iterate through the map of numbers and counts.\n    for num, count := range num_counts {\n        // If the count is 1, then add the number to the unique numbers slice.\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // Return the unique numbers slice.\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpfw74imn0_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpfw74imn0_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var num_map = make(map[int]int)\n    for _, num := range nums {\n        if _, ok := num_map[num]; ok {\n            num_map[num] += 1\n        } else {\n            num_map[num] = 1\n        }\n    }\n    for k, v := range num_map {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp7cf0tpph_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp7cf0tpph_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp5y9qsyp1_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp5y9qsyp1_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp5y9qsyp1_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n            continue\n        }\n        for i, unique_num := range unique_nums {\n            if num == unique_num {\n                break\n            }\n            if i == len(unique_nums) - 1 {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp83a8ekrd_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp83a8ekrd_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var num_map = make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpipbs349p_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n\n    ret := make([]int, 0)\n    for num, count := range nums_map {\n        if count == 1 {\n            ret = append(ret, num)\n        }\n    }\n\n    return ret\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp1t4tzzpz_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp1t4tzzpz_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nums\n    }\n\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        if _, ok := m[v]; !ok {\n            m[v] = 1\n        } else {\n            m[v] += 1\n        }\n    }\n\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpwh803aot_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, num := range nums {\n        if _, ok := m[num]; ok {\n            m[num] += 1\n        } else {\n            m[num] = 1\n        }\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var unique_num_map = make(map[int]int)\n\n    for _, num := range nums {\n        if _, ok := unique_num_map[num]; !ok {\n            unique_num_map[num] = 1\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp8eoc9ef6_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp8eoc9ef6_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var unique_map map[int]bool = make(map[int]bool)\n\n    for _, num := range nums {\n        if unique_map[num] == false {\n            unique_map[num] = true\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp7hez3xis_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp7hez3xis_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := m[num]; !ok {\n            m[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvb_ss8kc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvb_ss8kc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvj9yeysy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the number of times each number appears\n    num_counts := make(map[int]int)\n    // iterate through the list and store the number of times each number appears\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n    // iterate through the map and find the numbers that appear only once\n    unique_nums := make([]int, 0)\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpnq5uc9ss_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpnq5uc9ss_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                } else if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpsuz3x88__test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124187,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpejv_ei7s_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            for i, v := range result {\n                if num == v {\n                    break\n                }\n                if i == len(result) - 1 {\n                    result = append(result, num)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp0rrbbnbg_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp0rrbbnbg_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpidv1u7ds_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nums\n    }\n\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if unique_num == num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp863t4mfz_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp863t4mfz_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_8b9p3ii_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_8b9p3ii_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the numbers\n    numsMap := make(map[int]int)\n\n    // Loop through the numbers and store them in the map\n    for _, num := range nums {\n        numsMap[num]++\n    }\n\n    // Create a slice to store the unique numbers\n    uniqueNums := make([]int, 0)\n\n    // Loop through the map and add the unique numbers to the slice\n    for num, count := range numsMap {\n        if count == 1 {\n            uniqueNums = append(uniqueNums, num)\n        }\n    }\n\n    return uniqueNums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmptyt6fu3z_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_4s2_xz8_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp_ocmj3vo_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Write your code here\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpqt52dwyl_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasm6lyuv_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124183,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8rs14g_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement me\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124188,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2q8_4j4u_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2q8_4j4u_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2q8_4j4u_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}