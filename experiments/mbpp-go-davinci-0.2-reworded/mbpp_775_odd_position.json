{
  "name": "mbpp_775_odd_position",
  "language": "go_test.go",
  "prompt": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "func TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}