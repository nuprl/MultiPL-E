{
  "name": "mbpp_739_find_Index",
  "language": "go_test.go",
  "prompt": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t = t + i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if t > 999 && t < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if t > 99999 && t < 1000000 {\n            if n == 6 {\n                return i\n            }\n        } else if t > 9999999 && t < 100000000 {\n            if n == 8 {\n                return i\n            }\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510098,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    return find_Index(n-1) + n - 1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=14)', got '%!s(int=5)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=45)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var t int\n    for i = 1; i < 100000; i++ {\n        t = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", t)) >= n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510072,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    triangular_number := 1\n\n    // iterate until number of digits in 'triangular_number' becomes n\n    for len(fmt.Sprint(triangular_number)) < n {\n        index++\n        triangular_number = triangular_number + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510072,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index\n    index := 1\n    // Initialize triangular number\n    t_num := 1\n\n    // Find the index of smallest triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", t_num)) < n {\n        index++\n        t_num += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var tri int\n    for i = 1; len(fmt.Sprintf(\"%d\", tri)) < n; i++ {\n        tri = i * (i + 1) / 2\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510072,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmppq6__td0_test.go:33: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmppq6__td0_test.go:33: expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmppq6__td0_test.go:33: expected '%!s(int=45)', got '%!s(int=46)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize first triangular number\n    tn := 0\n    // initialize index of triangular number\n    i := 1\n    // find triangular number\n    for len(fmt.Sprint(tn)) < n {\n        tn = tn + i\n        i++\n    }\n    return i - 1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    triangular_number := 1\n    // Initialize count of digits in triangular number\n    count_digits := 1\n    // Run loop till count of digits in triangular number is not equal to n\n    for count_digits != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        triangular_number += index\n        // Count digits in triangular number\n        count_digits = count_digits_in_number(triangular_number)\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn9yjsvn5_test.go:23:24: undefined: count_digits_in_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // start with the first triangular number\n    // and keep incrementing it by adding the next natural number\n    // until the number of digits in the triangular number is greater than n\n    // then return the index of the triangular number\n    var triangular_number int = 1\n    var index int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        index++\n        triangular_number += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    triangular_number := 1\n    // iterate until number of digits in triangular number is not equal to n\n    for len(fmt.Sprintf(\"%d\", triangular_number)) != n {\n        index += 1\n        triangular_number += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangularNumber int = 1\n    for triangularNumber < n {\n        i++\n        triangularNumber = triangularNumber + i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpr07t1srt_test.go:34: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpr07t1srt_test.go:34: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpr07t1srt_test.go:34: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k, count int\n    for i = 1; ; i++ {\n        k = i * (i + 1) / 2\n        j = k\n        count = 0\n        for j != 0 {\n            count++\n            j = j / 10\n        }\n        if count == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // find the index of smallest triangular number with n digits.\n    // triangular number is a number which is equal to the sum of all natural numbers below it.\n    // for example, 6 is a triangular number because 1+2+3=6\n    // the index of the triangular number is the number of natural numbers below it.\n    // for example, the index of 6 is 3 because 1+2+3=6\n    // the index of the smallest triangular number with n digits is the number of digits of the triangular number.\n    // for example, the index of the smallest triangular number with 3 digits is 3.\n    // the index of the smallest triangular number with n digits is n.\n    return n\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp7k5pxqdt_test.go:36: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp7k5pxqdt_test.go:36: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp7k5pxqdt_test.go:36: expected '%!s(int=45)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", j)) >= n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpeiubaeb0_test.go:35: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpeiubaeb0_test.go:35: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpeiubaeb0_test.go:35: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var sum int = 1\n    for {\n        i++\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n\n    // Initialize value of triangular number\n    tri_num = 1\n\n    // Find triangular number with n digits\n    for len(str(tri_num)) < n:\n        index = index + 1\n        tri_num = tri_num + index\n\n    // Return index of triangular number\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510070,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpklwgo18j_test.go:17:9: expected boolean or range expression, found simple statement (missing parentheses around composite literal?)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i += 1\n        triangular_number += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510072,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    digits := 1\n    // loop until number of digits is not equal to n\n    for digits != n {\n        // increment index\n        index++\n        // update triangular number\n        triangular_number += index\n        // update number of digits\n        digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // loop until the number of digits in triangular number is greater than n\n    for len(fmt.Sprint(triangular_number)) < n {\n        // increment the index\n        index += 1\n        // get the next triangular number\n        triangular_number += index\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return (n * (n + 1) / 2)\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp1szkvpn0_test.go:31: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp1szkvpn0_test.go:31: expected '%!s(int=14)', got '%!s(int=6)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp1szkvpn0_test.go:31: expected '%!s(int=45)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k, l int\n    var sum int\n    var count int\n    for i = 1; i < n; i++ {\n        sum = 0\n        for j = 1; j <= i; j++ {\n            sum += j\n        }\n        count = 0\n        for k = sum; k > 0; k /= 10 {\n            count++\n        }\n        if count == n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfls1a8gk_test.go:10:18: l declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize first triangular number\n    tn := 0\n    // Initialize index\n    index := 0\n    // Loop until number of digits in 'tn' becomes n\n    for len(fmt.Sprint(tn)) < n {\n        index++\n        // Calculate next triangular number\n        tn = tn + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    var count int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            k = i * (i + 1) / 2\n            if k > 9 && k < 100 {\n                count++\n            } else if k > 99 && k < 1000 {\n                count++\n            } else if k > 999 && k < 10000 {\n                count++\n            } else if k > 9999 && k < 100000 {\n                count++\n            } else if k > 99999 && k < 1000000 {\n                count++\n            } else if k > 999999 && k < 10000000 {\n                count++\n            } else if k > 9999999 && k < 100000000 {\n                count++\n            } else if k > 99999999 && k < 1000000000 {\n                count++\n            } else if k > 999999999 && k < 10000000000 {\n                count++\n            } else if k > 9999999999 && k < 100000000000 {\n                count++\n            } else if k > 99999999999 && k < 1000000000000 {\n                count++\n            } else if k > 999999999999 && k < 10000000000000 {\n                count++\n            } else if k > 9999999999999 && k < 100000000000000 {\n                count++\n            } else if k > 99999999999999 && k < 1000000000000000 {\n                count++\n            } else if k > 999999999999999 && k < 10000000000000000 {\n                count++\n            } else if k > 9999999999999999 && k < 100000000000000000 {\n                count++\n            } else if k > 99999999999999999 && k < 1000000000000000000 {\n                count++\n            } else if k > 999999999999999999 && k < 10000000000000000000 {\n                count++\n            } else if k > 9999999999999999999 && k < 100000000000000000000 {\n                count++\n            } else if k > 99999999999999999999 && k < 1000000000000000000000 {\n                count++\n            } else if k > 999999999999999999999 && k < 10000000000000000000000 {\n                count++\n            } else if k > 9999999999999999999999 &&\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122582,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnyn_st9w_test.go:58:6: expected '(', found TestFind_Index\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in 'triangularNumber'\n    // becomes n\n    for len(fmt.Sprint(triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    digits := 1\n    // Initialize count of digits in triangular number\n    digits = 1\n    // Loop until n digits in triangular number is not obtained\n    for digits * 9 * index < n * (index + 1) {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        digits = count_Digits(tri_num)\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdxejl06q_test.go:25:18: undefined: count_Digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    tri_num := 1\n\n    // iterate until number of digits in 'tri_num'\n    // becomes 'n'\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var index int = 1\n    var triangular int = 1\n    for ; ; i++ {\n        triangular = triangular + i\n        if len(fmt.Sprintf(\"%d\", triangular)) == n {\n            break\n        }\n        index++\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize triangular number\n    var triangularNumber int = 1\n    // Find triangular number\n    for triangularNumber < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n    // Check if n is a triangular number\n    if triangularNumber == n {\n        return index\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpki9okmt__test.go:41: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpki9okmt__test.go:41: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpki9okmt__test.go:41: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is greater than n\n    for number_of_digits < n {\n        // increment index\n        index++\n        // add index to triangular number\n        triangular_number += index\n        // get number of digits\n        number_of_digits = len(fmt.Sprint(triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index to 1\n    index := 1\n    // initialize triangular number to 1\n    triangularNumber := 1\n    // initialize number of digits to 1\n    numberOfDigits := 1\n    // loop until number of digits is equal to n\n    for numberOfDigits != n {\n        // increment index by 1\n        index++\n        // add index to triangular number\n        triangularNumber += index\n        // calculate number of digits\n        numberOfDigits = len(fmt.Sprintf(\"%d\", triangularNumber))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var j int = 1\n    for i < n {\n        j += 1\n        i = i * 10\n    }\n    return j\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp9pximfa8_test.go:34: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp9pximfa8_test.go:34: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp9pximfa8_test.go:34: expected '%!s(int=45)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // initialize count of digits\n    count := 1\n    // loop until count of digits is equal to n\n    for count != n {\n        // increment index\n        index++\n        // add index to triangular number\n        tri_num += index\n        // calculate count of digits\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // return the index of the smallest triangular number with n digits\n    // triangular number is the sum of all the natural numbers up to the number\n    // ex: 1 + 2 + 3 + 4 + 5 = 15\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 = 21\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 66\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 78\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 91\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 105\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 120\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 136\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 = 153\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 171\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 = 190\n    // ex: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 +\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122582,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp75jz522p_test.go:28:6: expected '(', found TestFind_Index\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var index int = 1\n    var triangular_number int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            return index\n        }\n        index++\n        triangular_number += index\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    triangularNumber := 1\n\n    // Find triangular number with n digits\n    for triangularNumber < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    // Return index of triangular number\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmph8q3tv0p_test.go:41: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmph8q3tv0p_test.go:41: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmph8q3tv0p_test.go:41: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    index := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", index*(index+1)/2)) == n {\n            return index\n        }\n        index++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var index int = 1\n    for i < n {\n        index++\n        i = i * 10\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpqp27sosm_test.go:34: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpqp27sosm_test.go:34: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpqp27sosm_test.go:34: expected '%!s(int=45)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Find index of triangular number\n    for count < n {\n        index++\n        tri_num = tri_num + index\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; ; i++ {\n        k = i * (i + 1) / 2\n        for j = 1; k > 0; j++ {\n            k /= 10\n        }\n        if j == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpq7b3chvs_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpq7b3chvs_test.go:38: expected '%!s(int=14)', got '%!s(int=4)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpq7b3chvs_test.go:38: expected '%!s(int=45)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is less than n\n    for number_of_digits < n {\n        // increment index\n        index += 1\n        // add index to triangular number\n        triangular_number += index\n        // calculate number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122584,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var j int = 1\n    var index int = 1\n    var count int = 0\n    for count < n {\n        j = j + i\n        i++\n        index++\n        count = len(fmt.Sprintf(\"%d\", j))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122584,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp3pa8frnz_test.go:38: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp3pa8frnz_test.go:38: expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp3pa8frnz_test.go:38: expected '%!s(int=45)', got '%!s(int=46)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is equal to n\n    for number_of_digits != n {\n        // increment index\n        index++\n        // add index to triangular number\n        triangular_number += index\n        // find number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122585,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", j)) >= n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122585,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpkrau3knc_test.go:35: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpkrau3knc_test.go:35: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpkrau3knc_test.go:35: expected '%!s(int=45)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n\n    // Initialize triangular number\n    tri_num = 1\n\n    // Find the triangular number with n digits\n    for len(str(tri_num)) < n:\n        index = index + 1\n        tri_num = tri_num + index\n\n    // Return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122585,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnnut_kdi_test.go:17:9: expected boolean or range expression, found simple statement (missing parentheses around composite literal?)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) == n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop until n-digit triangular number is found\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize triangular number\n    var t int = 0\n    // initialize index\n    var i int = 1\n    // loop until number of digits in triangular number is greater than n\n    for len(fmt.Sprint(t)) < n {\n        // generate triangular number\n        t = t + i\n        // increment index\n        i++\n    }\n    // return index\n    return i - 1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is equal to the input\n    for number_of_digits != n {\n        // increment the index\n        index += 1\n        // add the index to the triangular number\n        triangular_number += index\n        // find the number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    triangularNumber := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var j int = 1\n    for i < n {\n        j += 1\n        i = i * 10\n    }\n    return j * (j + 1) / 2\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp3wnw1z4u_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp3wnw1z4u_test.go:37: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp3wnw1z4u_test.go:37: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is equal to n\n    for number_of_digits != n {\n        // increment index\n        index += 1\n        // add index to triangular number\n        triangular_number += index\n        // find number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop until the number of digits in 'triangularNumber' becomes n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not obtained\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var triangular_number int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", triangular_number)) >= n {\n            break\n        }\n        i++\n        triangular_number = triangular_number + i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; i < n; i++ {\n        k = (i * (i + 1)) / 2\n        if k > 9 {\n            j = 1\n            for k > 9 {\n                k = k / 10\n                j++\n            }\n            if j == n {\n                return i\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpzivh6me7_test.go:42: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpzivh6me7_test.go:42: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpzivh6me7_test.go:42: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // loop until the triangular number has n digits\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        // increment the index\n        index++\n        // calculate the next triangular number\n        triangular_number += index\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n    // Initialize triangular number\n    triNum = 1\n    // Find triangular number with n digits\n    for len(strconv.Itoa(triNum)) < n {\n        index++\n        triNum += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3h6ux_4a_test.go:11:5: undefined: index\n/tmp/tmp3h6ux_4a_test.go:13:5: undefined: triNum\n/tmp/tmp3h6ux_4a_test.go:15:13: undefined: strconv\n/tmp/tmp3h6ux_4a_test.go:15:26: undefined: triNum\n/tmp/tmp3h6ux_4a_test.go:16:9: undefined: index\n/tmp/tmp3h6ux_4a_test.go:17:9: undefined: triNum\n/tmp/tmp3h6ux_4a_test.go:17:19: undefined: index\n/tmp/tmp3h6ux_4a_test.go:19:12: undefined: index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; ; i++ {\n        k = i * (i + 1) / 2\n        j = 0\n        for k > 0 {\n            j++\n            k /= 10\n        }\n        if j == n {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop till n-digit triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        k = j * (j + 1) / 2\n        if len(fmt.Sprintf(\"%d\", k)) == n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp_jyss1wn_test.go:36: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp_jyss1wn_test.go:36: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp_jyss1wn_test.go:36: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular := 1\n    // initialize number of digits in triangular number\n    digits := 1\n    // loop until number of digits in triangular number is greater than n\n    for digits < n {\n        // increment index\n        index++\n        // calculate triangular number\n        triangular += index\n        // calculate number of digits in triangular number\n        digits = len(fmt.Sprintf(\"%d\", triangular))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    triangularNumber := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize the index\n    index := 1\n    // Initialize the triangular number\n    triangular_number := 1\n    // Initialize the number of digits\n    number_of_digits := 1\n    // Loop until the number of digits is equal to n\n    for number_of_digits != n {\n        // Increment the index\n        index++\n        // Add the index to the triangular number\n        triangular_number += index\n        // Get the number of digits\n        number_of_digits = len(fmt.Sprint(triangular_number))\n    }\n    // Return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122587,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize the index\n    index := 1\n    // Initialize the triangular number\n    tri_num := 1\n    // Initialize the number of digits\n    num_digits := 1\n    // Loop until the number of digits is greater than n\n    for num_digits < n {\n        // Increment the index\n        index++\n        // Calculate the triangular number\n        tri_num += index\n        // Calculate the number of digits\n        num_digits = len(fmt.Sprint(tri_num))\n    }\n    // Return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122587,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122587,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in triangular number is not equal to n\n    for len(fmt.Sprint(triangularNumber)) != n {\n        // increment index and triangular number\n        index++\n        triangularNumber += index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize triangular number\n    var triangularNumber int = 1\n    // Find triangular number\n    for {\n        // Find number of digits in triangular number\n        var digits int = len(fmt.Sprintf(\"%d\", triangularNumber))\n        // If number of digits is greater than n, break\n        if digits > n {\n            break\n        }\n        // Increment index\n        index++\n        // Add next triangular number\n        triangularNumber += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp9dw7i6qd_test.go:45: expected '%!s(int=4)', got '%!s(int=14)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp9dw7i6qd_test.go:45: expected '%!s(int=14)', got '%!s(int=45)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp9dw7i6qd_test.go:45: expected '%!s(int=45)', got '%!s(int=141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    var index, triangularNumber int = 1, 1\n\n    // loop till number of digits in 'triangularNumber'\n    // becomes n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    for {\n        if len(fmt.Sprint(i * (i + 1) / 2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    tri_num := 1\n    // loop until the triangular number has n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        // increment the index\n        index++\n        // calculate the next triangular number\n        tri_num += index\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop till n-digit triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize value of triangular number\n    var triangular_number int = 1\n    // Find triangular number till n-digits\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        triangular_number = triangular_number + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    digits := 1\n    // Find index of triangular number with n digits\n    for digits < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 0\n\n    // initialize triangular number\n    triangular_number := 0\n\n    // loop until number of digits in triangular number is n\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        index++\n        triangular_number += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n\n    // Initialize value of triangular number\n    var triangularNumber int = 1\n\n    // Find triangular number\n    for len(fmt.Sprint(triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number = triangular_number + i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize triangular number\n    triNum := 0\n    // Initialize index\n    index := 1\n    // Loop until number of digits in 'triNum' becomes n\n    for len(fmt.Sprintf(\"%d\", triNum)) < n {\n        // Calculate next triangular number\n        triNum = triNum + index\n        // Increment index\n        index++\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpgmqv425z_test.go:40: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpgmqv425z_test.go:40: expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpgmqv425z_test.go:40: expected '%!s(int=45)', got '%!s(int=46)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index of triangular number\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // find triangular number\n    for tri_num < n {\n        index++\n        tri_num = tri_num + index\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpnx1_jq52_test.go:38: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpnx1_jq52_test.go:38: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpnx1_jq52_test.go:38: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; ; i++ {\n        k = 0\n        for j = 1; j <= i; j++ {\n            k += j\n        }\n        if len(fmt.Sprintf(\"%d\", k)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122587,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not obtained\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var sum int\n    for i = 1; sum < n; i++ {\n        sum += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp34nyo662_test.go:33: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp34nyo662_test.go:33: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp34nyo662_test.go:33: expected '%!s(int=45)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    var count int = 1\n    for count < n {\n        i++\n        t = t + i\n        count = len(fmt.Sprintf(\"%d\", t))\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n\n    // initialize triangular number\n    triangularNumber := 1\n\n    // loop until number of digits in triangular number is not equal to n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) != n {\n        // increment index by 1\n        index++\n\n        // add index to triangular number\n        triangularNumber += index\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122589,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122589,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize triangular number\n    tn := 0\n    // initialize index\n    index := 0\n\n    for {\n        // increment index\n        index++\n        // calculate triangular number\n        tn = tn + index\n        // check if number of digits in tn is equal to n\n        if len(fmt.Sprintf(\"%d\", tn)) == n {\n            // return index\n            return index\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122589,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    // and count of digits in it\n    index = 1\n    count = 1\n\n    // Loop until count of digits in 'index'\n    // becomes equal to n\n    for count*(count+1)/2 < n {\n        index = index + 1\n        count = count + 1\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0anrpw09_test.go:12:5: undefined: index\n/tmp/tmp0anrpw09_test.go:13:5: undefined: count\n/tmp/tmp0anrpw09_test.go:17:9: undefined: count\n/tmp/tmp0anrpw09_test.go:18:9: undefined: index\n/tmp/tmp0anrpw09_test.go:19:9: undefined: count\n/tmp/tmp0anrpw09_test.go:23:12: undefined: index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122590,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpo0z6a8vx_test.go:36: expected '%!s(int=14)', got '%!s(int=4)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpo0z6a8vx_test.go:36: expected '%!s(int=45)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // loop until the number of digits in triangular number is greater than n\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122590,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Find index of triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not obtained\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; ; i++ {\n        k = 0\n        for j = 1; j <= i; j++ {\n            k += j\n        }\n        if len(fmt.Sprintf(\"%d\", k)) == n {\n            return i\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize the index\n    index := 1\n    // Initialize the triangular number\n    tri_num := 1\n    // Initialize the number of digits\n    num_digits := 1\n    // Loop until the number of digits is less than n\n    for num_digits < n {\n        // Increment the index\n        index++\n        // Add the index to the triangular number\n        tri_num += index\n        // Get the number of digits\n        num_digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize value of triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop till count is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = 0\n        for tri_num > 0 {\n            tri_num = tri_num / 10\n            count++\n        }\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp460ug4af_test.go:47: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp460ug4af_test.go:47: expected '%!s(int=14)', got '%!s(int=100)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp460ug4af_test.go:47: expected '%!s(int=45)', got '%!s(int=1000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // loop until triangular number has n digits\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        // increment index\n        index += 1\n        // calculate triangular number\n        triangular_number += index\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // initialize number of digits\n    num_digits := 1\n    // loop until number of digits is greater than n\n    for num_digits < n {\n        // increment index\n        index++\n        // add index to triangular number\n        tri_num += index\n        // get number of digits\n        num_digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in 'triangularNumber'\n    // becomes n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        // increment index and update triangular number\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n    // Initialize triangular number\n    tri_num = 1\n    // Initialize count of digits in triangular number\n    count = 1\n    // Loop until n digits in triangular number is not obtained\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(str(tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqdvdd72j_test.go:11:5: undefined: index\n/tmp/tmpqdvdd72j_test.go:13:5: undefined: tri_num\n/tmp/tmpqdvdd72j_test.go:15:5: undefined: count\n/tmp/tmpqdvdd72j_test.go:17:9: undefined: count\n/tmp/tmpqdvdd72j_test.go:19:9: undefined: index\n/tmp/tmpqdvdd72j_test.go:21:9: undefined: tri_num\n/tmp/tmpqdvdd72j_test.go:21:29: undefined: index\n/tmp/tmpqdvdd72j_test.go:23:9: undefined: count\n/tmp/tmpqdvdd72j_test.go:23:21: undefined: str\n/tmp/tmpqdvdd72j_test.go:23:25: undefined: tri_num\n/tmp/tmpqdvdd72j_test.go:23:25: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not obtained\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangle int = 1\n    for len(fmt.Sprintf(\"%d\", triangle)) < n {\n        i++\n        triangle += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var triangular_number int\n    for i = 1; ; i++ {\n        triangular_number = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n\n    // Initialize value of triangular number\n    triangularNumber = 1\n\n    // Find triangular number with n digits\n    for len(str(triangularNumber)) < n {\n        index = index + 1\n        triangularNumber = triangularNumber + index\n    }\n\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk4z73xkf_test.go:11:5: undefined: index\n/tmp/tmpk4z73xkf_test.go:14:5: undefined: triangularNumber\n/tmp/tmpk4z73xkf_test.go:17:13: undefined: str\n/tmp/tmpk4z73xkf_test.go:17:17: undefined: triangularNumber\n/tmp/tmpk4z73xkf_test.go:18:9: undefined: index\n/tmp/tmpk4z73xkf_test.go:19:9: undefined: triangularNumber\n/tmp/tmpk4z73xkf_test.go:19:47: undefined: index\n/tmp/tmpk4z73xkf_test.go:23:12: undefined: index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize triangular number\n    var triangular_number int = 1\n    // Initialize count of digits in triangular number\n    var digits int = 1\n    // Run loop till n digits in triangular number\n    for digits < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        triangular_number += index\n        // Count digits in triangular number\n        digits = count_Digits(triangular_number)\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn4kdundo_test.go:23:18: undefined: count_Digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // initialize number of digits\n    num_digits := 1\n    // loop until number of digits is greater than n\n    for num_digits < n {\n        // increment index\n        index++\n        // calculate triangular number\n        tri_num += index\n        // calculate number of digits\n        num_digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        k = len(fmt.Sprintf(\"%d\", j))\n        if k == n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpay6zu_wz_test.go:36: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpay6zu_wz_test.go:36: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpay6zu_wz_test.go:36: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index as 1\n    index := 1\n    // Initialize triangular number as 1\n    triangularNumber := 1\n    // Initialize number of digits as 1\n    numberOfDigits := 1\n    // Iterate till number of digits is not equal to n\n    for numberOfDigits != n {\n        // Increment index by 1\n        index++\n        // Add index to triangular number\n        triangularNumber += index\n        // Find number of digits in triangular number\n        numberOfDigits = len(fmt.Sprintf(\"%d\", triangularNumber))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n\n    // Initialize triangular number\n    triangularNumber = 1\n\n    // Find triangular number with n digits\n    for len(str(triangularNumber)) < n:\n        index = index + 1\n        triangularNumber = triangularNumber + index\n\n    // Print the triangular number\n    print(\"Triangular number with\", n, \"digits is\", triangularNumber)\n\n    // Print the index\n    print(\"Index of\", triangularNumber, \"is\", index)\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122590,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5zrt1wld_test.go:17:9: expected boolean or range expression, found simple statement (missing parentheses around composite literal?)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in 'triangularNumber'\n    // becomes more than 'n'\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n\n    // initialize triangular number\n    triangularNumber := 1\n\n    // find triangular number\n    for {\n        // find number of digits\n        digits := len(fmt.Sprintf(\"%d\", triangularNumber))\n\n        // check if number of digits is equal to n\n        if digits == n {\n            break\n        }\n\n        // increment index\n        index++\n\n        // find next triangular number\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n\n    // Initialize triangular number\n    triangularNumber = 1\n\n    // Find the triangular number with n digits\n    for len(str(triangularNumber)) < n {\n        index = index + 1\n        triangularNumber = triangularNumber + index\n    }\n\n    // Return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_lbmy7yj_test.go:11:5: undefined: index\n/tmp/tmp_lbmy7yj_test.go:14:5: undefined: triangularNumber\n/tmp/tmp_lbmy7yj_test.go:17:13: undefined: str\n/tmp/tmp_lbmy7yj_test.go:17:17: undefined: triangularNumber\n/tmp/tmp_lbmy7yj_test.go:18:9: undefined: index\n/tmp/tmp_lbmy7yj_test.go:19:9: undefined: triangularNumber\n/tmp/tmp_lbmy7yj_test.go:19:47: undefined: index\n/tmp/tmp_lbmy7yj_test.go:23:12: undefined: index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    triangularNumber := 1\n    // iterate till number of digits in triangular number is not equal to n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        // increment index by 1\n        index++\n        // triangular number with n digits is sum of first n natural numbers\n        triangularNumber += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122592,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in triangular number is not equal to n\n    for len(fmt.Sprint(triangularNumber)) != n {\n        // increment index by 1\n        index++\n\n        // generate next triangular number\n        triangularNumber = triangularNumber + index\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122592,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n    // Initialize value of triangular number\n    tri_num = 1\n    // Find triangular number till it has n-digits\n    for len(str(tri_num)) < n:\n        index = index + 1\n        tri_num = tri_num + index\n    // Return index of triangular number\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122592,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpon8l7vt3_test.go:15:9: expected boolean or range expression, found simple statement (missing parentheses around composite literal?)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = 0\n        for tri_num > 0 {\n            tri_num = tri_num / 10\n            count++\n        }\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmplyx45qcu_test.go:48: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmplyx45qcu_test.go:48: expected '%!s(int=14)', got '%!s(int=100)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmplyx45qcu_test.go:48: expected '%!s(int=45)', got '%!s(int=1000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if t > 999 && t < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if t > 99999 && t < 1000000 {\n            if n == 6 {\n                return i\n            }\n        } else if t > 9999999 && t < 100000000 {\n            if n == 8 {\n                return i\n            }\n        } else if t > 999999999 && t < 10000000000 {\n            if n == 10 {\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop until n-digit triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprint(triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.016s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triNum := 1\n    // initialize number of digits\n    numDigits := 1\n    // loop until number of digits is equal to n\n    for numDigits < n {\n        // increment index\n        index++\n        // add index to triangular number\n        triNum += index\n        // get number of digits\n        numDigits = len(fmt.Sprintf(\"%d\", triNum))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triNum := 1\n    // loop until number of digits in triangular number is n\n    for len(fmt.Sprint(triNum)) < n {\n        // increment index\n        index++\n        // calculate triangular number\n        triNum += index\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop till n-digit triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index of triangular number\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k, l, m int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        k = j\n        l = 0\n        for k > 0 {\n            l++\n            k = k / 10\n        }\n        if l == n {\n            m = i\n            break\n        }\n    }\n    return m\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpt5eway_e_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpt5eway_e_test.go:42: expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpt5eway_e_test.go:42: expected '%!s(int=45)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            return i\n        }\n        i++\n        triangular_number += i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize value of triangular number\n    var tri_num int = 1\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop till count of digits in triangular number is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    return find_Index(n-1) + n - 1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=14)', got '%!s(int=5)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpnihd07in_test.go:34: expected '%!s(int=45)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n\n    // loop until number of digits is greater than n\n    for number_of_digits < n {\n        // increment index\n        index += 1\n        // calculate triangular number\n        triangular_number += index\n        // calculate number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510071,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // initialize length\n    length := 1\n    // loop until length of tri_num is greater than or equal to n\n    for length < n {\n        // increment index\n        index++\n        // add index to tri_num\n        tri_num += index\n        // convert tri_num to string\n        tri_num_str := fmt.Sprintf(\"%d\", tri_num)\n        // get length of tri_num\n        length = len(tri_num_str)\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if tri > 9 && tri < 100 {\n            if len(fmt.Sprintf(\"%d\", tri)) == n {\n                return i\n            }\n        } else if tri > 999 && tri < 10000 {\n            if len(fmt.Sprintf(\"%d\", tri)) == n {\n                return i\n            }\n        } else if tri > 99999 && tri < 1000000 {\n            if len(fmt.Sprintf(\"%d\", tri)) == n {\n                return i\n            }\n        } else if tri > 9999999 && tri < 100000000 {\n            if len(fmt.Sprintf(\"%d\", tri)) == n {\n                return i\n            }\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    triNum := 1\n    // Find triangular number with n digits\n    for len(fmt.Sprint(triNum)) < n {\n        index++\n        triNum = triNum + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n\n    // initialize triangular number\n    triangular_number := 1\n\n    // loop until number of digits in triangular number is n\n    for len(fmt.Sprintf(\"%d\", triangular_number)) != n {\n        // increment index\n        index++\n\n        // update triangular number\n        triangular_number += index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n < 1 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var j int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", j)) == n {\n            return i\n        }\n        i++\n        j += i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var index int = 1\n    for {\n        var triangular_number int = (i * (i + 1)) / 2\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            break\n        }\n        index++\n        i++\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122594,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is equal to n\n    for number_of_digits != n {\n        // increment index\n        index += 1\n        // add index to triangular number\n        triangular_number += index\n        // find number of digits in triangular number\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122594,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n    // iterate until number of digits in triangular number is not equal to n\n    for len(fmt.Sprint(triangularNumber)) != n {\n        // increment index by 1\n        index++\n        // triangular number with n digits is sum of first n natural numbers\n        triangularNumber += index\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122594,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    digits := 1\n    // loop until the number of digits is equal to n\n    for digits < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n        // get the number of digits\n        digits = len(fmt.Sprint(triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122594,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var j int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", j)) == n {\n            return i\n        }\n        i++\n        j = j + i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var triangularNumber int\n    for i = 1; ; i++ {\n        triangularNumber = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", triangularNumber)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    triangularNumber := 1\n\n    // Find triangular number with n digits\n    for triangularNumber <= n {\n        // Increment index\n        index++\n\n        // Calculate next triangular number\n        triangularNumber = triangularNumber + index\n    }\n\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmppmve0i2d_test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmppmve0i2d_test.go:44: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmppmve0i2d_test.go:44: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var sum int = 1\n    for {\n        i++\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k, l int\n    var triangle int\n    for i = 1; i < n; i++ {\n        triangle = 0\n        for j = 1; j <= i; j++ {\n            triangle += j\n        }\n        k = 0\n        for l = triangle; l > 0; l /= 10 {\n            k++\n        }\n        if k == n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpyjvsj0be_test.go:43: expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpyjvsj0be_test.go:43: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpyjvsj0be_test.go:43: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            return i\n        }\n        i++\n        triangular_number += i\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize number of digits in tri_num\n    digits := 1\n    // Find index of triangular number\n    for digits < n {\n        index++\n        tri_num = tri_num + index\n        digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of first triangular number\n    // with n digits\n    var count, i int = 1, 1\n    // An upper bound on index of triangular number\n    // with n digits can be given as n*(10^(n-1))\n    var upper_bound int = n * (int(math.Pow(10, float64(n-1))))\n    // Binary search for index\n    for low := 1; low <= upper_bound; {\n        // If n is more than number of digits in\n        // low, then look in higher indices\n        if count < n {\n            low = i * (i + 1) / 2\n            i++\n            count = int(math.Log10(float64(low))) + 1\n        } else if count == n {\n            // return current index if number of\n            // digits in low is equal to n\n            return i\n        } else {\n            // If n is less than number of digits in\n            // low, then look for answer in lower\n            // indices (1 to i-1)\n            upper_bound = i * (i + 1) / 2\n            i--\n            count = int(math.Log10(float64(upper_bound))) + 1\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5dddmc9_test.go:15:36: undefined: math\n/tmp/tmpb5dddmc9_test.go:23:25: undefined: math\n/tmp/tmpb5dddmc9_test.go:34:25: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    digits := 1\n    // Loop till count of digits in triangular number is not equal to n\n    for digits != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in updated triangular number\n        digits = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize value of triangular number\n    var triangularNumber int = 1\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; i <= n; i++ {\n        k = i * (i + 1) / 2\n        j = 1\n        for k > 0 {\n            k = k / 10\n            j++\n        }\n        if j == n {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpirgok51j_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpirgok51j_test.go:40: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpirgok51j_test.go:40: expected '%!s(int=45)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index = 1\n    // Initialize triangular number\n    tri_num = 1\n    // Find triangular number\n    for tri_num < n {\n        index = index + 1\n        tri_num = tri_num + index\n    }\n    // Check if n is a triangular number\n    if tri_num == n {\n        return index\n    }\n    return -1\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw4pnqx4z_test.go:11:5: undefined: index\n/tmp/tmpw4pnqx4z_test.go:13:5: undefined: tri_num\n/tmp/tmpw4pnqx4z_test.go:15:9: undefined: tri_num\n/tmp/tmpw4pnqx4z_test.go:16:9: undefined: index\n/tmp/tmpw4pnqx4z_test.go:17:9: undefined: tri_num\n/tmp/tmpw4pnqx4z_test.go:17:29: undefined: index\n/tmp/tmpw4pnqx4z_test.go:20:8: undefined: tri_num\n/tmp/tmpw4pnqx4z_test.go:21:16: undefined: index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprint(triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122593,
      "stdout": "ok  \tcommand-line-arguments\t0.016s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triNum := 1\n    // initialize count of digits in triNum\n    digits := 1\n    // loop until n digits are reached\n    for digits < n {\n        // increment index\n        index++\n        // add index to triNum\n        triNum += index\n        // count digits in triNum\n        digits = countDigits(triNum)\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppvo9n3yv_test.go:23:18: undefined: countDigits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is equal to n\n    for number_of_digits != n {\n        // increment index\n        index++\n        // add index to triangular number\n        triangular_number += index\n        // calculate number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize triangular number\n    tn := 0\n    // initialize index\n    index := 0\n    // loop until number of digits in triangular number is n\n    for len(fmt.Sprint(tn)) < n {\n        // increment index\n        index++\n        // calculate triangular number\n        tn = tn + index\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index and triangular number\n    index := 1\n    tri_num := 1\n    // loop until the number of digits in triangular number is greater than n\n    for len(fmt.Sprint(tri_num)) < n {\n        index += 1\n        tri_num += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // n = number of digits\n    // triangular number = n(n+1)/2\n    // index = number of triangular numbers before the triangular number with n digits\n    // index = (n-1)(n-2)/2\n    // index = (n^2 - 3n + 2)/2\n    // index = (n^2 - 3n + 2)/2\n    // index = (n^2 - 3n + 2)/2\n    return (n*n - 3*n + 2)/2\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp704hvthr_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp704hvthr_test.go:35: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp704hvthr_test.go:35: expected '%!s(int=45)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n\n    // initialize the triangular number\n    tri_num := 1\n\n    // loop until the number of digits in tri_num is equal to n\n    for len(fmt.Sprint(tri_num)) < n {\n        // increment the index\n        index++\n\n        // add the index to the triangular number\n        tri_num += index\n    }\n\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize triangular number and index\n    var t, i int = 0, 1\n    // Find the index of the triangular number\n    for t < n {\n        t = t + i\n        i++\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmp71f1yke5_test.go:35: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmp71f1yke5_test.go:35: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmp71f1yke5_test.go:35: expected '%!s(int=45)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    tri_num := 1\n    // initialize number of digits\n    num_digits := 1\n    // loop until number of digits is equal to n\n    for num_digits != n {\n        // increment index\n        index++\n        // increment triangular number\n        tri_num = tri_num + index\n        // get number of digits\n        num_digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize value of triangular number\n    var triangularNumber int = 1\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is greater than or equal to n\n    for number_of_digits < n {\n        // increment the index\n        index += 1\n        // add the index to the triangular number\n        triangular_number += index\n        // calculate the number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize number of digits in triangular number\n    num_digits := 1\n    // Run loop till number of digits in 'tri_num'\n    // is less than or equal to 'n'\n    for num_digits <= n {\n        // Increment index\n        index++\n        // Add value to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        num_digits = count_digits(tri_num)\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps3g5hwf8_test.go:24:22: undefined: count_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    tri_num := 1\n\n    // loop until number of digits in 'tri_num' becomes n\n    for len(fmt.Sprint(tri_num)) < n {\n        // increment index and update 'tri_num'\n        index++\n        tri_num = tri_num + index\n    }\n\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    var index int = 1\n    // Initialize triangular number\n    var tri_num int = 1\n    // Find index of triangular number\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    triangular_number := 1\n    // iterate until number of digits in triangular number becomes n\n    for len(fmt.Sprint(triangular_number)) < n {\n        index += 1\n        triangular_number += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is equal to n\n    for number_of_digits < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n        // find the number of digits in the triangular number\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is equal to n\n    for number_of_digits < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n        // get the number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + find_Index(n - 1)\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpk2p_6jo2_test.go:31: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpk2p_6jo2_test.go:31: expected '%!s(int=14)', got '%!s(int=6)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpk2p_6jo2_test.go:31: expected '%!s(int=45)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triNum := 1\n    // initialize digit\n    digit := 1\n    // loop until digit is equal to n\n    for digit != n {\n        // increment index\n        index++\n        // calculate triangular number\n        triNum += index\n        // calculate digit\n        digit = len(fmt.Sprint(triNum))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index and triangular number\n    index := 1\n    tri_num := 1\n    // Find index of triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index += 1\n        tri_num += index\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number = triangular_number + i\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop till count of digits in triangular number is not equal to n\n    for count != n {\n        // Increment index by 1\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count = 0\n        for tri_num > 0 {\n            tri_num = tri_num / 10\n            count++\n        }\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpjmoyc7rn_test.go:47: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpjmoyc7rn_test.go:47: expected '%!s(int=14)', got '%!s(int=100)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpjmoyc7rn_test.go:47: expected '%!s(int=45)', got '%!s(int=1000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index\n    index := 1\n    // initialize triangular number\n    triangular_number := 1\n    // initialize number of digits\n    number_of_digits := 1\n    // loop until number of digits is equal to n\n    for number_of_digits != n {\n        // increment index\n        index++\n        // add index to triangular number\n        triangular_number += index\n        // calculate number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122595,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is equal to n\n    for number_of_digits != n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n        // calculate the number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count_digits := 1\n    // Initialize loop count\n    loop_count := 1\n    // Loop until n digits in triangular number is not equal to n\n    for count_digits != n {\n        // Increment index by 1\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Count digits in triangular number\n        count_digits = count_digits_in_tri_num(tri_num)\n        // Increment loop count\n        loop_count++\n    }\n    // Return index\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9zfjbed7_test.go:25:24: undefined: count_digits_in_tri_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122591,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k int\n    for i = 1; ; i++ {\n        k = 0\n        for j = 1; j <= i; j++ {\n            k = k + j\n        }\n        if len(fmt.Sprintf(\"%d\", k)) == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i, j, k, l int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            for k = 1; k < n; k++ {\n                for l = 1; l < n; l++ {\n                    if i * (i + 1) * (i + 2) * j * (j + 1) * (j + 2) * k * (k + 1) * (k + 2) * l * (l + 1) * (l + 2) == n {\n                        return i + j + k + l\n                    }\n                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "--- FAIL: TestFind_Index (0.00s)\n    --- FAIL: TestFind_Index/test_num__0 (0.00s)\n        tmpe593do3v_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Index/test_num__1 (0.00s)\n        tmpe593do3v_test.go:40: expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestFind_Index/test_num__2 (0.00s)\n        tmpe593do3v_test.go:40: expected '%!s(int=45)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index, triangularNumber := 1, 1\n\n    // loop till number of digits in 'triangularNumber'\n    // becomes n\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t = i * (i + 1) / 2\n    }\n    return i\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // initialize index and triangular number\n    index := 1\n    triangular_number := 1\n    // iterate until number of digits in triangular number is not equal to n\n    for len(fmt.Sprint(triangular_number)) != n {\n        // increment index by 1\n        index++\n        // triangular number = n * (n + 1) / 2\n        triangular_number = index * (index + 1) / 2\n    }\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    tri_num := 1\n\n    // Find the index of the triangular number\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    // Return index of triangular number\n    return index\n}\n\nfunc TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}