{
  "name": "mbpp_728_sum_list",
  "language": "go_test.go",
  "prompt": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists are not the same length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, v := range lst1 {\n        sum[i] = v + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of same length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var lst3 []int\n    for i := 0; i < len(lst1); i++ {\n        lst3 = append(lst3, lst1[i] + lst2[i])\n    }\n    return lst3\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    res := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        res[i] = lst1[i] + lst2[i]\n    }\n    return res\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i, _ := range lst1 {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must have the same length\")\n    }\n    lst := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    lst3 := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst3[i] = lst1[i] + lst2[i]\n    }\n    return lst3\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    lst := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Length of lists must be equal\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Input lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Length of lists must be equal\")\n    }\n\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"length of lists must be equal\")\n    }\n    lst := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    lst := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    // Check if the lists are of the same length\n    if len(lst1) != len(lst2) {\n        panic(\"The lists are not of the same length\")\n    }\n\n    // Initialize the result list\n    result := make([]int, len(lst1))\n\n    // Iterate through the lists and sum the elements\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i, _ := range lst1 {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n\n    result := make([]int, len(lst1))\n    for i := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.015s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"List lengths must be equal\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of the same length\")\n    }\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Input lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"List lengths are not equal\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    res := make([]int, len(lst1))\n    for i, v := range lst1 {\n        res[i] = v + lst2[i]\n    }\n    return res\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    lst3 := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst3[i] = lst1[i] + lst2[i]\n    }\n    return lst3\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be of the same length\")\n    }\n    lst := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"length of lists are not equal\")\n    }\n\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    var sum []int\n    for i, _ := range lst1 {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lengths of lists must be equal\")\n    }\n    var sum []int\n    for i, _ := range lst1 {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.016s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists are not of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists are not the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    lst3 := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        lst3[i] = lst1[i] + lst2[i]\n    }\n    return lst3\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    lst3 := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst3[i] = lst1[i] + lst2[i]\n    }\n    return lst3\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"length of lists are not equal\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    lst := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        lst[i] = lst1[i] + lst2[i]\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, v := range lst1 {\n        result[i] = v + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    lst := []int{}\n    for i, _ := range lst1 {\n        lst = append(lst, lst1[i] + lst2[i])\n    }\n    return lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not the same length\")\n    }\n    sum_lst := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum_lst[i] = lst1[i] + lst2[i]\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"length of lists must be equal\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be the same length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, v := range lst1 {\n        result[i] = v + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    ret := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        ret[i] = lst1[i] + lst2[i]\n    }\n    return ret\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be the same length!\")\n    }\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"list lengths must be equal\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Input lists must be the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.014s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must be the same length\")\n    }\n\n    sum_lst := make([]int, len(lst1))\n    for i, v := range lst1 {\n        sum_lst[i] = v + lst2[i]\n    }\n\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var result []int\n    for i, _ := range lst1 {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i, _ := range lst1 {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123139,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    var sum_lst []int\n    for i := 0; i < len(lst1); i++ {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 must have the same length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Input lists must have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists are not of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must have the same length\")\n    }\n    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var sum_lst []int\n    for i, _ := range lst1 {\n        sum_lst = append(sum_lst, lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    var res []int\n    for i := 0; i < len(lst1); i++ {\n        res = append(res, lst1[i] + lst2[i])\n    }\n    return res\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Input lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lst1 and lst2 should have the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    sum_lst := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        sum_lst[i] = lst1[i] + lst2[i]\n    }\n    return sum_lst\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    sum := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        panic(\"lists must be of same length\")\n    }\n    res := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        res[i] = lst1[i] + lst2[i]\n    }\n    return res\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123141,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123134,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n\nfunc TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510089,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}