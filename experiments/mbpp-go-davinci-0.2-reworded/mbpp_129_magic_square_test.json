{
  "name": "mbpp_129_magic_square_test",
  "language": "go_test.go",
  "prompt": "package magic_square_test_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate whether the matrix is a magic square.\nfunc magic_square_test(my_matrix [][]int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMagic_Square_Test(t *testing.T) {\n  candidate := magic_square_test\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{7, 12, 1, 14}, []int{2, 13, 8, 11}, []int{16, 3, 10, 5}, []int{9, 6, 15, 4}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 8}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 7}}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // check if matrix is odd\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n\n    // check if matrix is magic square\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square\n    // Check if the sum of each row is equal\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum = 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum += my_matrix[i][j]\n        }\n        if sum != 15 {\n            return false\n        }\n    }\n\n    // Check if the sum of each column is equal\n    for i := 0; i < len(my_matrix); i++ {\n        sum = 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum += my_matrix[j][i]\n        }\n        if sum != 15 {\n            return false\n        }\n    }\n\n    // Check if the sum of each diagonal is equal\n    sum = 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[i][i]\n    }\n    if sum != 15 {\n        return false\n    }\n\n    sum = 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[i][len(my_matrix) - i - 1]\n    }\n    if sum != 15 {\n        return false\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        if sum(my_matrix[i]) != sum(my_matrix[0]) {\n            return false\n        }\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if sum(get_column(my_matrix, j)) != sum(my_matrix[0]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        // Check the sum of each row.\n        row_sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            row_sum += my_matrix[i][j]\n        }\n\n        // Check the sum of each column.\n        col_sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            col_sum += my_matrix[j][i]\n        }\n\n        // Check the sum of the diagonal.\n        diag_sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            diag_sum += my_matrix[j][j]\n        }\n\n        // Check the sum of the anti-diagonal.\n        anti_diag_sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            anti_diag_sum += my_matrix[j][len(my_matrix[i]) - 1 - j]\n        }\n\n        // Check if the sums are equal.\n        if row_sum != col_sum || row_sum != diag_sum || row_sum != anti_diag_sum {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square matrix.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square matrix.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        if sum_of_row(my_matrix, i) != sum_of_row(my_matrix, 0) {\n            return false\n        }\n        if sum_of_column(my_matrix, i) != sum_of_column(my_matrix, 0) {\n            return false\n        }\n    }\n    if sum_of_diagonal(my_matrix, 0) != sum_of_diagonal(my_matrix, 1) {\n        return false\n    }\n    return true\n}\n",
    "    // Check that the matrix is square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check that the matrix is odd.\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n    // Get the length of the matrix.\n    length := len(my_matrix)\n    // Create a slice to store the sums of the rows, columns, and diagonals.\n    sums := make([]int, length * 2 + 2)\n    // Sum the rows.\n    for i := 0; i < length; i++ {\n        for j := 0; j < length; j++ {\n            sums[i] += my_matrix[i][j]\n        }\n    }\n    // Sum the columns.\n    for i := 0; i < length; i++ {\n        for j := 0; j < length; j++ {\n            sums[i + length] += my_matrix[j][i]\n        }\n    }\n    // Sum the diagonals.\n    for i := 0; i < length; i++ {\n        sums[length * 2] += my_matrix[i][i]\n        sums[length * 2 + 1] += my_matrix[i][length - i - 1]\n    }\n    // Check that all the sums are the same.\n    for i := 0; i < len(sums) - 1; i++ {\n        if sums[i] != sums[i + 1] {\n            return false\n        }\n    }\n    // Return true if the matrix is a magic square.\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        // Check the sum of each row.\n        var row_sum int\n        for j := 0; j < len(my_matrix[i]); j++ {\n            row_sum += my_matrix[i][j]\n        }\n        // Check the sum of each column.\n        var col_sum int\n        for j := 0; j < len(my_matrix[i]); j++ {\n            col_sum += my_matrix[j][i]\n        }\n        // Check the sum of each diagonal.\n        var diag_sum int\n        for j := 0; j < len(my_matrix[i]); j++ {\n            diag_sum += my_matrix[j][j]\n        }\n        var diag_sum_2 int\n        for j := 0; j < len(my_matrix[i]); j++ {\n            diag_sum_2 += my_matrix[j][len(my_matrix[i]) - j - 1]\n        }\n        // Check if the sum of each row, column and diagonal is the same.\n        if row_sum != col_sum || row_sum != diag_sum || row_sum != diag_sum_2 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square matrix.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 0; i < len(my_matrix); i++ {\n        var row_sum int\n        var col_sum int\n        for j := 0; j < len(my_matrix); j++ {\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        }\n        if row_sum != sum || col_sum != sum {\n            return false\n        }\n    }\n    var diag_sum_1 int\n    var diag_sum_2 int\n    for i := 0; i < len(my_matrix); i++ {\n        diag_sum_1 += my_matrix[i][i]\n        diag_sum_2 += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if diag_sum_1 != sum || diag_sum_2 != sum {\n        return false\n    }\n    return true\n}\n",
    "    // check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // check if the matrix is a magic square\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 1; i < len(my_matrix); i++ {\n        var temp int\n        for j := 0; j < len(my_matrix); j++ {\n            temp += my_matrix[i][j]\n        }\n        if temp != sum {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix); i++ {\n        var temp int\n        for j := 0; j < len(my_matrix); j++ {\n            temp += my_matrix[j][i]\n        }\n        if temp != sum {\n            return false\n        }\n    }\n    var temp int\n    for i := 0; i < len(my_matrix); i++ {\n        temp += my_matrix[i][i]\n    }\n    if temp != sum {\n        return false\n    }\n    temp = 0\n    for i := 0; i < len(my_matrix); i++ {\n        temp += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if temp != sum {\n        return false\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        if sum(my_matrix[i]) != sum(my_matrix[0]) {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix); i++ {\n        var sum_of_column int\n        for j := 0; j < len(my_matrix); j++ {\n            sum_of_column += my_matrix[j][i]\n        }\n        if sum_of_column != sum(my_matrix[0]) {\n            return false\n        }\n    }\n    var sum_of_diagonal_1 int\n    var sum_of_diagonal_2 int\n    for i := 0; i < len(my_matrix); i++ {\n        sum_of_diagonal_1 += my_matrix[i][i]\n        sum_of_diagonal_2 += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum_of_diagonal_1 != sum(my_matrix[0]) || sum_of_diagonal_2 != sum(my_matrix[0]) {\n        return false\n    }\n    return true\n}\n",
    "    // Check that the matrix is square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check that the matrix is of odd size.\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n    // Check that the matrix is of size 3 or greater.\n    if len(my_matrix) < 3 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n    }\n    // Check that the matrix is of size 15 or less.\n    if len(my_matrix) > 15 {\n        return false\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[0]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square.\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 1; i < len(my_matrix); i++ {\n        var tmp int\n        for j := 0; j < len(my_matrix[i]); j++ {\n            tmp += my_matrix[i][j]\n        }\n        if tmp != sum {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix[0]); i++ {\n        var tmp int\n        for j := 0; j < len(my_matrix); j++ {\n            tmp += my_matrix[j][i]\n        }\n        if tmp != sum {\n            return false\n        }\n    }\n    var tmp int\n    for i := 0; i < len(my_matrix); i++ {\n        tmp += my_matrix[i][i]\n    }\n    if tmp != sum {\n        return false\n    }\n    tmp = 0\n    for i := 0; i < len(my_matrix); i++ {\n        tmp += my_matrix[i][len(my_matrix) - i - 1]\n    }\n    if tmp != sum {\n        return false\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square matrix\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        sum_row := 0\n        sum_col := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_row += my_matrix[i][j]\n            sum_col += my_matrix[j][i]\n        }\n        if sum_row != sum_col {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var sum int\n    var sum_check int\n    var sum_check_2 int\n    var sum_check_3 int\n    var sum_check_4 int\n    var sum_check_5 int\n    var sum_check_6 int\n    var sum_check_7 int\n    var sum_check_8 int\n    var sum_check_9 int\n    var sum_check_10 int\n    var sum_check_11 int\n    var sum_check_12 int\n    var sum_check_13 int\n    var sum_check_14 int\n    var sum_check_15 int\n    var sum_check_16 int\n    var sum_check_17 int\n    var sum_check_18 int\n    var sum_check_19 int\n    var sum_check_20 int\n    var sum_check_21 int\n    var sum_check_22 int\n    var sum_check_23 int\n    var sum_check_24 int\n    var sum_check_25 int\n    var sum_check_26 int\n    var sum_check_27 int\n    var sum_check_28 int\n    var sum_check_29 int\n    var sum_check_30 int\n    var sum_check_31 int\n    var sum_check_32 int\n    var sum_check_33 int\n    var sum_check_34 int\n    var sum_check_35 int\n    var sum_check_36 int\n    var sum_check_37 int\n    var sum_check_38 int\n    var sum_check_39 int\n    var sum_check_40 int\n    var sum_check_41 int\n    var sum_check_42 int\n    var sum_check_43 int\n    var sum_check_44 int\n    var sum_check_45 int\n    var sum_check_46 int\n    var sum_check_47 int\n    var sum_check_48 int\n    var sum_check_49 int\n    var sum_check_50 int\n    var sum_check_51 int\n    var sum_check_52 int\n    var sum_check_53 int\n    var sum_check_54 int\n    var sum_check_55 int\n    var sum_check_56 int\n    var sum_",
    "    // check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // check if the matrix is a magic square\n    // check if the sum of each row is the same\n    sum := 0\n    for _, row := range my_matrix {\n        sum += row[0]\n    }\n    for _, row := range my_matrix {\n        row_sum := 0\n        for _, element := range row {\n            row_sum += element\n        }\n        if row_sum != sum {\n            return false\n        }\n    }\n    // check if the sum of each column is the same\n    for i := 0; i < len(my_matrix); i++ {\n        column_sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            column_sum += my_matrix[j][i]\n        }\n        if column_sum != sum {\n            return false\n        }\n    }\n    // check if the sum of the diagonal is the same\n    diagonal_sum := 0\n    for i := 0; i < len(my_matrix); i++ {\n        diagonal_sum += my_matrix[i][i]\n    }\n    if diagonal_sum != sum {\n        return false\n    }\n    // check if the sum of the anti-diagonal is the same\n    anti_diagonal_sum := 0\n    for i := 0; i < len(my_matrix); i++ {\n        anti_diagonal_sum += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if anti_diagonal_sum != sum {\n        return false\n    }\n    return true\n}\n",
    "    // check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // check if the matrix is a magic square\n    // check the sum of each row\n    for i := 0; i < len(my_matrix); i++ {\n        sum := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum += my_matrix[i][j]\n        }\n        if sum != 15 {\n            return false\n        }\n    }\n    // check the sum of each column\n    for i := 0; i < len(my_matrix[0]); i++ {\n        sum := 0\n        for j := 0; j < len(my_matrix); j++ {\n            sum += my_matrix[j][i]\n        }\n        if sum != 15 {\n            return false\n        }\n    }\n    // check the sum of the diagonal\n    sum := 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[i][i]\n    }\n    if sum != 15 {\n        return false\n    }\n    // check the sum of the other diagonal\n    sum = 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum != 15 {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 1; i < len(my_matrix); i++ {\n        var sum_row int\n        for j := 0; j < len(my_matrix[0]); j++ {\n            sum_row += my_matrix[i][j]\n        }\n        if sum_row != sum {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix[0]); i++ {\n        var sum_col int\n        for j := 0; j < len(my_matrix); j++ {\n            sum_col += my_matrix[j][i]\n        }\n        if sum_col != sum {\n            return false\n        }\n    }\n    var sum_diag int\n    for i := 0; i < len(my_matrix); i++ {\n        sum_diag += my_matrix[i][i]\n    }\n    if sum_diag != sum {\n        return false\n    }\n    var sum_diag_rev int\n    for i := 0; i < len(my_matrix); i++ {\n        sum_diag_rev += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum_diag_rev != sum {\n        return false\n    }\n    return true\n}\n"
  ]
}