{
  "name": "mbpp_772_remove_length",
  "language": "go_test.go",
  "prompt": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    words = append(words, word)\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_len++\n        } else {\n            if word_len != K {\n                words = append(words, word)\n            }\n            word = \"\"\n            word_len = 0\n        }\n        i++\n    }\n\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result = result + words[j] + \" \"\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_f9l6no6_test.go:64: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp_f9l6no6_test.go:64: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_f9l6no6_test.go:64: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ka44v7m_test.go:11:26: undefined: strings\n/tmp/tmp8ka44v7m_test.go:16:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    words := strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xy2co9f_test.go:11:14: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    i = 0\n    for ; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = i\n    word = test_str[word_start:word_end]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpvxx9d45j_test.go:57: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpvxx9d45j_test.go:57: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var length int\n\n    length = len(test_str)\n    i = 0\n    j = 0\n    for i < length {\n        if test_str[i] == ' ' {\n            if j == K {\n                result += word\n            }\n            word = \"\"\n            j = 0\n            i++\n        } else {\n            word += string(test_str[i])\n            i++\n            j++\n        }\n    }\n    if j == K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpapxzo9ds_test.go:54: expected 'person is most value', got 'Thetet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpapxzo9ds_test.go:54: expected 'If you me about ok', got 'toldthis'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpapxzo9ds_test.go:54: expected 'Forces of darkeness is the', got 'comeintoplay'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len != K {\n                result += test_str[word_start:word_end]\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n\n    word_end = i\n    word_len = word_end - word_start\n    if word_len != K {\n        result += test_str[word_start:word_end]\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpedf9vajd_test.go:55: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpedf9vajd_test.go:55: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var str_len int\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_len++\n        } else {\n            if word_len != K {\n                for j = 0; j < word_len; j++ {\n                    result = result + string(word[j])\n                }\n                result = result + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        for j = 0; j < word_len; j++ {\n            result = result + string(word[j])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp03rf_r9f_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n    var str_length int\n    var str_length_minus_k int\n    var word_length_minus_k int\n\n    str_length = len(test_str)\n    str_length_minus_k = str_length - K\n    for i = 0; i < str_length; i++ {\n        if test_str[i] == ' ' {\n            word_length = len(word)\n            word_length_minus_k = word_length - K\n            if word_length_minus_k == 0 {\n                word = \"\"\n            } else if word_length_minus_k > 0 {\n                for j = 0; j < word_length_minus_k; j++ {\n                    result = result + string(word[j])\n                }\n                word = \"\"\n            }\n            result = result + \" \"\n        } else {\n            word = word + string(test_str[i])\n        }\n    }\n    word_length = len(word)\n    word_length_minus_k = word_length - K\n    if word_length_minus_k == 0 {\n        word = \"\"\n    } else if word_length_minus_k > 0 {\n        for k = 0; k < word_length_minus_k; k++ {\n            result = result + string(word[k])\n        }\n        word = \"\"\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg94w87uh_test.go:17:9: str_length_minus_k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8atpx7zs_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8atpx7zs_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_len = 0\n    word_start = 0\n    word_end = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len == K {\n                result = result + test_str[word_start:word_end]\n            }\n            word_len = 0\n            word_start = i + 1\n        } else {\n            word_len++\n        }\n    }\n    if word_len == K {\n        result = result + test_str[word_start:word_end]\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\npanic: runtime error: slice bounds out of range [25:24] [recovered]\n\tpanic: runtime error: slice bounds out of range [25:24]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_length(0x54a437, 0x1c, 0x3, 0x5fa1e0, 0x582563)\n\t/tmp/tmpimaqk187_test.go:32 +0x168\ncommand-line-arguments_test.TestRemove_Length(0xc000001380)\n\t/tmp/tmpimaqk187_test.go:44 +0x5c\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if k == K {\n                word = test_str[j:i]\n                result += word\n            }\n            j = i + 1\n            k = 0\n        } else {\n            k++\n        }\n        i++\n    }\n    if k == K {\n        word = test_str[j:i]\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp9i4zk8gr_test.go:54: expected 'person is most value', got 'Thetet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp9i4zk8gr_test.go:54: expected 'If you me about ok', got 'toldthis'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp9i4zk8gr_test.go:54: expected 'Forces of darkeness is the', got 'comeintoplay'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result += words[j]\n        if j != len(words) - 1 {\n            result += \" \"\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiiii int\n    var jjjjj int\n    var kkkkk int\n    var lllll int\n    var mmmmm int\n    var nnnnn int\n    var ooooo int\n    var ppppp int\n    var qqqqq int\n    var rrr\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123615,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzdhkwm99_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptlmb7e4t_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptlmb7e4t_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ka44v7m_test.go:11:26: undefined: strings\n/tmp/tmp8ka44v7m_test.go:16:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpcv9hgyn8_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpcv9hgyn8_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var new_str string\n    var words []string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\n    words = make([]string, 0)\n    word = \"\"\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if k == 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n            k = 0\n        } else {\n            word += string(test_str[i])\n            k++\n        }\n        i++\n    }\n\n    if k == 0 {\n        words = append(words, word)\n        word = \"\"\n    }\n\n    for j < len(words) {\n        if len(words[j]) != K {\n            new_str += words[j]\n            l++\n        }\n        if l < len(words) {\n            new_str += \" \"\n        }\n        j++\n    }\n\n    return new_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpejja3dcz_test.go:73: expected 'person is most value', got ''\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpejja3dcz_test.go:73: expected 'If you me about ok', got ''\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpejja3dcz_test.go:73: expected 'Forces of darkeness is the', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n\n    for _, char := range test_str {\n        if char == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_1ihffpt_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_1ihffpt_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp9dtw1xqd_test.go:55: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp9dtw1xqd_test.go:55: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_length = len(word)\n            if word_length != K {\n                result = result + word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_length = len(word)\n    if word_length != K {\n        result = result + word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpxyrzihaw_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpxyrzihaw_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123615,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4stx8hzc_test.go:100:6: expected '(', found TestRemove_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var temp string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(temp) != K {\n                result += temp + \" \"\n            }\n            temp = \"\"\n        } else {\n            temp += string(char)\n        }\n    }\n    if len(temp) != K {\n        result += temp\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp5ao2fc46_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp5ao2fc46_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                res += word\n            }\n            res += string(c)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmplnohsfns_test.go:44: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmplnohsfns_test.go:44: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmplnohsfns_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var str_len int\n    var str_len_minus_k int\n\n    str_len = len(test_str)\n    str_len_minus_k = str_len - K\n\n    for i = 0; i < str_len; i++ {\n        word = \"\"\n        word_len = 0\n        for j = i; j < str_len; j++ {\n            if test_str[j] == ' ' {\n                break\n            }\n            word_len++\n            word += string(test_str[j])\n        }\n        if word_len == K {\n            for k = 0; k < str_len_minus_k; k++ {\n                if k < i {\n                    result += string(test_str[k])\n                } else if k >= i + K {\n                    result += string(test_str[k])\n                }\n            }\n            return result\n        }\n        i = j\n    }\n    return test_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpxmcuzh2i_test.go:62: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpxmcuzh2i_test.go:62: expected 'If you me about ok', got 'If you  me about thi'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpxmcuzh2i_test.go:62: expected 'Forces of darkeness is the', got 'Forces of darkeness is  into the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6rfuzcc9_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6rfuzcc9_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result = result + word\n                for j = 0; j < word_len; j++ {\n                    result = result + \" \"\n                }\n            }\n            word = \"\"\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result = result + word\n        for j = 0; j < word_len; j++ {\n            result = result + \" \"\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_g02bvrm_test.go:57: expected 'person is most value', got 'person      is  most    value     '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp_g02bvrm_test.go:57: expected 'If you me about ok', got 'If  you   me  about     ok  '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_g02bvrm_test.go:57: expected 'Forces of darkeness is the', got 'Forces      of  darkeness         is  the   '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var length int\n\n    length = len(test_str)\n    i = 0\n    for i < length {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            i++\n        } else {\n            word += string(test_str[i])\n            i++\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123616,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ona8gx1_test.go:13:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_len = 0\n    word_start = 0\n    word_end = 0\n    i = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len == K {\n                result = result + test_str[word_start:word_end]\n            } else {\n                result = result + test_str[word_start:word_end] + \" \"\n            }\n            word_start = i + 1\n            word_len = 0\n        } else {\n            word_len++\n        }\n        i++\n    }\n    if word_len == K {\n        result = result + test_str[word_start:i]\n    } else {\n        result = result + test_str[word_start:i] + \" \"\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmprfca04if_test.go:58: expected 'person is most value', got 'Theperson is most value tet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmprfca04if_test.go:58: expected 'If you me about ok', got 'If you toldme about thisok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmprfca04if_test.go:58: expected 'Forces of darkeness is the', got 'Forces of darkeness is comeintothe play'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ka44v7m_test.go:11:26: undefined: strings\n/tmp/tmp8ka44v7m_test.go:16:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var words []string\n    var result string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123616,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn9u9fdzp_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_len = 0\n    word_start = 0\n    word_end = 0\n    i = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len == K {\n                result = result + test_str[word_start:word_end]\n            }\n            word_len = 0\n            word_start = i + 1\n        } else {\n            word_len++\n        }\n        i++\n    }\n    if word_len == K {\n        result = result + test_str[word_start:i]\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpapydh024_test.go:54: expected 'person is most value', got 'Thetet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpapydh024_test.go:54: expected 'If you me about ok', got 'toldthis'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpapydh024_test.go:54: expected 'Forces of darkeness is the', got 'comeintoplay'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            words = append(words, word)\n            word = \"\"\n        }\n    }\n    words = append(words, word)\n    for _, word = range words {\n        word_len = len(word)\n        if word_len != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp9odyzo73_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp9odyzo73_test.go:47: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp9odyzo73_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    word_len = 0\n    word_start = 0\n    word_end = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len == K {\n                result = result + test_str[word_start:word_end]\n            }\n            word_start = i + 1\n            word_len = 0\n        } else {\n            word_len++\n        }\n    }\n    if word_len == K {\n        result = result + test_str[word_start:word_end]\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\npanic: runtime error: slice bounds out of range [25:24] [recovered]\n\tpanic: runtime error: slice bounds out of range [25:24]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_length(0x54a437, 0x1c, 0x3, 0x5fa1e0, 0x582563)\n\t/tmp/tmpjdlo20ti_test.go:31 +0x168\ncommand-line-arguments_test.TestRemove_Length(0xc000001380)\n\t/tmp/tmpjdlo20ti_test.go:43 +0x5c\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int\n    var is_word bool\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_len++\n            is_word = true\n        } else {\n            if is_word {\n                if word_len != K {\n                    for j = 0; j < word_len; j++ {\n                        result = result + string(word[j])\n                    }\n                    result = result + \" \"\n                }\n                word = \"\"\n                word_len = 0\n                is_word = false\n            }\n        }\n    }\n    if is_word {\n        if word_len != K {\n            for j = 0; j < word_len; j++ {\n                result = result + string(word[j])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp1bfh91cl_test.go:63: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp1bfh91cl_test.go:63: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Fields(test_str)) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpansduni5_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word\n            }\n            result += \" \"\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpk4zh4s07_test.go:44: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpk4zh4s07_test.go:44: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpk4zh4s07_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result = result + word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_len = len(word)\n    if word_len != K {\n        result = result + word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpi_zzn6lm_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpi_zzn6lm_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var length int\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n            length++\n        } else {\n            if length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            length = 0\n        }\n    }\n    if length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp7p5wed9x_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp7p5wed9x_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var c byte\n\n    i = 0\n    j = 0\n    k = 0\n    word_len = 0\n    for i < len(test_str) {\n        c = test_str[i]\n        if c == ' ' {\n            if word_len != K {\n                result += word\n            }\n            word = \"\"\n            word_len = 0\n            j = 0\n        } else {\n            word += string(c)\n            word_len += 1\n            j += 1\n        }\n        i += 1\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdfqo0zan_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpcv9hgyn8_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpcv9hgyn8_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var words []string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpboun9j62_test.go:99:6: expected '(', found TestRemove_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        words = append(words, word)\n    }\n    for j < len(words) {\n        result += words[j]\n        if j != len(words) - 1 {\n            result += \" \"\n        }\n        j++\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(char)\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmprjf0cuwm_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmprjf0cuwm_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_count int\n\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                word_count++\n                if word_count != 1 {\n                    result += \" \"\n                }\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpiqhx65fl_test.go:54: expected 'person is most value', got 'personis most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpiqhx65fl_test.go:54: expected 'If you me about ok', got 'Ifyou me about ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpiqhx65fl_test.go:54: expected 'Forces of darkeness is the', got 'Forcesof darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            res += word + \" \"\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpipd_pvvi_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var is_word bool\n    for _, c := range test_str {\n        if c == ' ' {\n            if is_word {\n                if len(word) != K {\n                    result += word + \" \"\n                }\n                word = \"\"\n                is_word = false\n            }\n        } else {\n            word += string(c)\n            is_word = true\n        }\n    }\n    if is_word {\n        if len(word) != K {\n            result += word\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp86am4lu0_test.go:50: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp86am4lu0_test.go:50: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(char)\n            word_len += 1\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp7j9acb5a_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp7j9acb5a_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    for i, c := range test_str {\n        if c == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len != K {\n                result += word\n            }\n            word_start = i + 1\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_end = len(test_str)\n    word_len = word_end - word_start\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpxl4evyak_test.go:53: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpxl4evyak_test.go:53: expected 'If you me about ok', got 'Ifyoumeaboutok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpxl4evyak_test.go:53: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n            word_len++\n        } else {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_ahmr9wn_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_ahmr9wn_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result = result + word\n                for j = 0; j < word_len; j++ {\n                    word = word[:len(word)-1]\n                }\n            } else {\n                for j = 0; j < word_len; j++ {\n                    word = word[:len(word)-1]\n                }\n            }\n            result = result + \" \"\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result = result + word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpe06gnfv5_test.go:56: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpe06gnfv5_test.go:56: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpe06gnfv5_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word_len = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                for k = j; k < i; k++ {\n                    result += string(test_str[k])\n                }\n                result += \" \"\n            }\n            j = i + 1\n            word_len = 0\n        } else {\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        for k = j; k < i; k++ {\n            result += string(test_str[k])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg_zi5qn9_test.go:11:9: word declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_length = len(word)\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:]\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp08ah4gq4_test.go:55: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp08ah4gq4_test.go:55: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var new_str string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_len++\n        } else {\n            if word_len != K {\n                new_str = new_str + word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        new_str = new_str + word\n    }\n\n    return new_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7gmipwzy_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word\n            }\n            result += string(c)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123620,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpiv_sspaw_test.go:44: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpiv_sspaw_test.go:44: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpiv_sspaw_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var length int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4_3go1xo_test.go:101:6: expected '(', found TestRemove_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123620,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbrg9wppt_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbrg9wppt_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var ret_str string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_len = 0\n    word_start = 0\n    word_end = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len == K {\n                ret_str += test_str[word_end + 1:]\n                break\n            } else {\n                ret_str += test_str[word_start:word_end] + \" \"\n                word_start = word_end + 1\n                word_len = 0\n            }\n        } else {\n            word_len++\n        }\n    }\n\n    return ret_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_vjothi3_test.go:53: expected 'person is most value', got 'person is most value tet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp_vjothi3_test.go:53: expected 'If you me about ok', got 'If you me about this ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_vjothi3_test.go:53: expected 'Forces of darkeness is the', got 'Forces of darkeness is into the play'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpvur3auru_test.go:55: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpvur3auru_test.go:55: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var str_len int = len(test_str)\n    var i int = 0\n    for i < str_len {\n        word = \"\"\n        word_len = 0\n        for i < str_len && test_str[i] != ' ' {\n            word += string(test_str[i])\n            word_len++\n            i++\n        }\n        if word_len != K {\n            result += word\n            result += \" \"\n        }\n        i++\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpyh2hid6q_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpyh2hid6q_test.go:47: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpyh2hid6q_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int\n    var c byte\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        c = test_str[i]\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3nesb6qr_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpra48b1nk_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n\n    word_end = len(test_str)\n    word = test_str[word_start:word_end]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpgb4u2fi9_test.go:56: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpgb4u2fi9_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(char)\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmprjf0cuwm_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmprjf0cuwm_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgdid74mk_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result = result + word + \" \"\n            }\n            word = \"\"\n        } else {\n            word = word + string(c)\n        }\n    }\n    if len(word) != K {\n        result = result + word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpjtarpr9w_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpjtarpr9w_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = len(test_str)\n    word = test_str[word_start:word_end]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpb9xrjmer_test.go:56: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpb9xrjmer_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word = word + string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result = result + words[j] + \" \"\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmph11mzxyw_test.go:44: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmph11mzxyw_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n\n            word_len = word_end - word_start\n            if word_len != K {\n                for j = word_start; j < word_end; j++ {\n                    result += string(test_str[j])\n                }\n                result += \" \"\n            }\n\n            word_start = i + 1\n        }\n    }\n\n    word_len = len(test_str) - word_start\n    if word_len != K {\n        for j = word_start; j < len(test_str); j++ {\n            result += string(test_str[j])\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1aol29_c_test.go:11:9: word declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v != ' ' {\n            word += string(v)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var k int\n    var length int\n    var str_len int\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        if test_str[i] == ' ' {\n            length = len(word)\n            if length != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            continue\n        }\n        word += string(test_str[i])\n    }\n    length = len(word)\n    if length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xy4x47g_test.go:13:9: j declared but not used\n/tmp/tmp7xy4x47g_test.go:14:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word = word + string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result = result + words[j] + \" \"\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpgu4zrgdl_test.go:67: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    if len(word) != K {\n        result += word\n    }\n\n    for j = 0; j < len(result); j++ {\n        if result[j] == ' ' {\n            if result[j+1] == ' ' {\n                result = result[:j] + result[j+1:]\n                j--\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\npanic: runtime error: index out of range [21] with length 21 [recovered]\n\tpanic: runtime error: index out of range [21] with length 21\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_length(0x54a437, 0x1c, 0x3, 0x5fa200, 0x582563)\n\t/tmp/tmpj9h07gpn_test.go:33 +0x272\ncommand-line-arguments_test.TestRemove_Length(0xc000102600)\n\t/tmp/tmpj9h07gpn_test.go:50 +0x5c\ntesting.tRunner(0xc000102600, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    result = \"\"\n    word = \"\"\n    word_length = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_length++\n        } else {\n            if word_length != K {\n                result = result + word\n                result = result + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        }\n        i++\n    }\n    if word_length != K {\n        result = result + word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0c1ai91q_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    i = 0\n    j = 0\n    word_len = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jbnqn8f_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n            word_len++\n        } else {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmphj769lqk_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmphj769lqk_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps3l9_u2s_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var tmp string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(tmp) != K {\n                result += tmp + \" \"\n            }\n            tmp = \"\"\n        } else {\n            tmp += string(test_str[i])\n        }\n    }\n    if len(tmp) != K {\n        result += tmp\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpv8emlqco_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpv8emlqco_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n    var l int\n\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    word = \"\"\n    result = \"\"\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len == K {\n                word = \"\"\n            } else {\n                for j = word_start; j < word_end; j++ {\n                    word += string(test_str[j])\n                }\n            }\n            word_start = i + 1\n            if word != \"\" {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        }\n        i++\n    }\n\n    word_end = i\n    word_len = word_end - word_start\n    if word_len == K {\n        word = \"\"\n    } else {\n        for j = word_start; j < word_end; j++ {\n            word += string(test_str[j])\n        }\n    }\n    if word != \"\" {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63k_kgx6_test.go:17:9: k declared but not used\n/tmp/tmp63k_kgx6_test.go:18:9: l declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len != K {\n                result += word\n            }\n            word = \"\"\n            word_start = i + 1\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm2w9b5dd_test.go:48: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpm2w9b5dd_test.go:48: expected 'If you me about ok', got 'Ifyoumeabout'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm2w9b5dd_test.go:48: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    i = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n        i++\n    }\n    word = test_str[word_start:len(test_str)]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpndfz98ge_test.go:56: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpndfz98ge_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpmkzipfj6_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpmkzipfj6_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Fields(test_str)) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpansduni5_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1xt7gwh__test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm1fhptzm_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    word_end = i\n    word_len = word_end - word_start\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmprduhmu0k_test.go:56: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmprduhmu0k_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var new_str string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                new_str += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        new_str += word\n    }\n    return new_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpfvxz9m4c_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpfvxz9m4c_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3b8h3_ss_test.go:100:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6riarxyw_test.go:99:6: expected '(', found TestRemove_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptc99fj7o_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\n    words = make([]string, 0)\n    word = \"\"\n    i = 0\n    j = 0\n    k = 0\n    l = len(test_str)\n\n    for i < l {\n        if test_str[i] == ' ' {\n            words = append(words, word)\n            word = \"\"\n            i++\n            j++\n            k = 0\n        } else {\n            word += string(test_str[i])\n            i++\n            k++\n        }\n    }\n    words = append(words, word)\n\n    result = \"\"\n    for i = 0; i < j; i++ {\n        if len(words[i]) != K {\n            result += words[i] + \" \"\n        }\n    }\n    result += words[j]\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpzxcqpz2w_test.go:66: expected 'person is most value', got 'person is most value tet'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpzxcqpz2w_test.go:66: expected 'Forces of darkeness is the', got 'Forces of darkeness is the play'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}