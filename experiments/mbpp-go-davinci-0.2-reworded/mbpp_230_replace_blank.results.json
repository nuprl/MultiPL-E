{
  "name": "mbpp_230_replace_blank",
  "language": "go_test.go",
  "prompt": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var new_str string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            new_str += char\n        } else {\n            new_str += string(str1[i])\n        }\n    }\n    return new_str\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str := []rune(str1)\n    for i := 0; i < len(str); i++ {\n        if str[i] == ' ' {\n            str[i] = []rune(char)[0]\n        }\n    }\n    return string(str)\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if string(v) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == 32 {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var result string\n    for _, v := range str1 {\n        if string(v) == \" \" {\n            result += char\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    if len(str1) == 0 {\n        return \"\"\n    }\n    if len(char) == 0 {\n        return str1\n    }\n    return string(char[0]) + replace_blank(str1[1:], char)\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmplymk7sv6_test.go:34: expected 'hello@people', got '@@@@@@@@@@@@'\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmplymk7sv6_test.go:34: expected 'python$program$language', got '$$$$$$$$$$$$$$$$$$$$$$$'\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmplymk7sv6_test.go:34: expected 'blank-space', got '-----------'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c == ' ' {\n            str2 += char\n        } else {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    str2 := \"\"\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var result string\n    for _, c := range str1 {\n        if c == ' ' {\n            result += char\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var result string\n    for _, v := range str1 {\n        if v == ' ' {\n            result += char\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for _, v := range str1 {\n        if string(v) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    return \"\"\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestReplace_Blank (0.00s)\n    --- FAIL: TestReplace_Blank/test_num__0 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'hello@people', got ''\n    --- FAIL: TestReplace_Blank/test_num__1 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'python$program$language', got ''\n    --- FAIL: TestReplace_Blank/test_num__2 (0.00s)\n        tmp6x3gt3a8_test.go:28: expected 'blank-space', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}