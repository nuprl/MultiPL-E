{
  "name": "mbpp_267_square_Sum",
  "language": "go_test.go",
  "prompt": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 1 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += (2*i - 1) * (2*i - 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += (2*i + 1) * (2*i + 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i*i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpocdq8193_test.go:33: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpocdq8193_test.go:33: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpocdq8193_test.go:33: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += (2 * i - 1) * (2 * i - 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        if i % 2 != 0 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    var i int\n    for i = 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        if i % 2 != 0 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmposin1zju_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmposin1zju_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmposin1zju_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    var i int = 1\n    for i <= n {\n        sum += i * i\n        i += 2\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwsu5ci_u_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwsu5ci_u_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwsu5ci_u_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i*i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += (2*i - 1) * (2*i - 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += (2*i - 1) * (2*i - 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i*i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpsygjb73x_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 != 0 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpxx1q0uba_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpxx1q0uba_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpxx1q0uba_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 0; i < n; i++ {\n        sum += (2*i + 1) * (2*i + 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=35)', got '%!s(int=0)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpwdivrmgp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    var i int\n    for i = 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmp3f5qr6ue_test.go:33: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 1 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmp7jnpz6jj_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int = 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpowtgiy82_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += (2*i - 1) * (2*i - 1)\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoqyj0f41_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        if i % 2 != 0 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122997,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=35)', got '%!s(int=10)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpx7bsjenx_test.go:34: expected '%!s(int=84)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i * i\n    }\n    return sum\n}\n\nfunc TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510368,
      "stdout": "--- FAIL: TestSquare_Sum (0.00s)\n    --- FAIL: TestSquare_Sum/test_num__0 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestSquare_Sum/test_num__1 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=35)', got '%!s(int=14)'\n    --- FAIL: TestSquare_Sum/test_num__2 (0.00s)\n        tmpoi21d6_v_test.go:32: expected '%!s(int=84)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}