{
  "name": "mbpp_296_get_Inv_Count",
  "language": "go_test.go",
  "prompt": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "func TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array in half\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively sort the left and right halves\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    split_count := 0\n\n    // Merge the two sorted halves\n    i := 0\n    j := 0\n    k := 0\n    for i < len(left) && j < len(right) {\n        if left[i] < right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            split_count += len(left) - i\n        }\n        k++\n    }\n\n    // Copy the remaining elements\n    for i < len(left) {\n        arr[k] = left[i]\n        i++\n        k++\n    }\n    for j < len(right) {\n        arr[k] = right[j]\n        j++\n        k++\n    }\n\n    return left_count + right_count + split_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpet83gqdc_test.go:71: expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__1 (0.00s)\n        tmpet83gqdc_test.go:71: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmpet83gqdc_test.go:71: expected '%!s(int=3)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) <= 1 {\n        return 0\n    }\n\n    // Divide\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Conquer\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n\n    // Combine\n    count := left_count + right_count\n    i, j := 0, 0\n    for i < len(left) && j < len(right) {\n        if left[i] <= right[j] {\n            i++\n        } else {\n            count += len(left) - i\n            j++\n        }\n    }\n\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmpwdsiixyw_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Divide\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Conquer\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n\n    // Combine\n    count := left_count + right_count\n\n    // Merge\n    i, j := 0, 0\n    for i < len(left) && j < len(right) {\n        if left[i] <= right[j] {\n            i++\n        } else {\n            count += len(left) - i\n            j++\n        }\n    }\n\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmp4ijm7q57_test.go:56: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n    split_inv_count := merge_and_count(left, right)\n    return left_inv_count + right_inv_count + split_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn05rgqlq_test.go:18:24: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsr7xypis_test.go:16:57: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := get_Split_Inv_Count(left, right)\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_3pby7jh_test.go:18:18: undefined: get_Split_Inv_Count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    split_count := merge_and_count(left, right)\n\n    return left_count + right_count + split_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxpogcr8_test.go:20:20: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    split_count := merge_and_count(left, right)\n    return left_count + right_count + split_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcoowc3s0_test.go:18:20: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    } else {\n        mid := len(arr) / 2\n        left := arr[:mid]\n        right := arr[mid:]\n        left_count := get_Inv_Count(left)\n        right_count := get_Inv_Count(right)\n        split_count := merge_and_count(left, right)\n        return left_count + right_count + split_count\n    }\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo5wjnacm_test.go:18:24: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) <= 1 {\n        return 0\n    }\n\n    // Split the array in half\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively call the function on the left and right halves\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Merge the two halves\n    merged_arr := merge(left, right)\n\n    // Count the inversions in the merged array\n    merged_inv_count := count_inversions(merged_arr)\n\n    // Return the total number of inversions\n    return left_inv_count + right_inv_count + merged_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5jxsy46__test.go:25:19: undefined: merge\n/tmp/tmp5jxsy46__test.go:28:25: undefined: count_inversions\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array into two halves\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively count inversions in the left and right halves\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Merge the two halves and count split inversions\n    split_inv_count := 0\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i < len(left) && j < len(right) {\n            if left[i] <= right[j] {\n                arr[k] = left[i]\n                i++\n            } else {\n                arr[k] = right[j]\n                j++\n                split_inv_count += len(left) - i\n            }\n        } else if i < len(left) {\n            arr[k] = left[i]\n            i++\n        } else if j < len(right) {\n            arr[k] = right[j]\n            j++\n        }\n    }\n\n    return left_inv_count + right_inv_count + split_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmp99ci_wbw_test.go:65: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    return get_Inv_Count_helper(arr, 0, len(arr))\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu0vb77q4_test.go:10:12: undefined: get_Inv_Count_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int\n    inv_count = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplqgnf_ra_test.go:16:57: undefined: merge\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplqgnf_ra_test.go:16:57: undefined: merge\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ouu6jjj_test.go:16:57: undefined: merge\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Initialize count of inversions as 0\n    inv_count := 0\n    // Traverse through all elements of input array\n    for i := 0; i < len(arr); i++ {\n        // Traverse through all elements after i\n        for j := i+1; j < len(arr); j++ {\n            // If arr[i] > arr[j] then there is at least\n            // one inversion.\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    i, j, k := 0, 0, 0\n    left_len := len(left)\n    right_len := len(right)\n    split_inv_count := 0\n    for i < left_len && j < right_len {\n        if left[i] <= right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            split_inv_count += left_len - i\n        }\n        k++\n    }\n\n    for i < left_len {\n        arr[k] = left[i]\n        i++\n        k++\n    }\n\n    for j < right_len {\n        arr[k] = right[j]\n        j++\n        k++\n    }\n\n    return left_inv_count + right_inv_count + split_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmphjp2y5p9_test.go:67: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplqgnf_ra_test.go:16:57: undefined: merge\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    split_count := merge_and_count_split_inv(left, right)\n    return left_count + right_count + split_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknbte31d_test.go:18:20: undefined: merge_and_count_split_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) <= 1 {\n        return 0\n    }\n\n    // Split the array into two halves\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively count the inversions in each half\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Merge the two halves and count the inversions\n    // that occur during the merge\n    merge_inv_count := merge_and_count_inv(left, right)\n\n    // Return the total number of inversions\n    return left_inv_count + right_inv_count + merge_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpohgc51x6_test.go:26:24: undefined: merge_and_count_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplqgnf_ra_test.go:16:57: undefined: merge\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array in half\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively call the function on the left and right halves\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n\n    // Merge the two halves\n    merged := make([]int, len(arr))\n    i := 0\n    j := 0\n    k := 0\n    split_inv := 0\n\n    for i < len(left) && j < len(right) {\n        if left[i] <= right[j] {\n            merged[k] = left[i]\n            i++\n        } else {\n            merged[k] = right[j]\n            j++\n            split_inv += len(left) - i\n        }\n        k++\n    }\n\n    for i < len(left) {\n        merged[k] = left[i]\n        i++\n        k++\n    }\n\n    for j < len(right) {\n        merged[k] = right[j]\n        j++\n        k++\n    }\n\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmpbeazf6hm_test.go:73: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsr7xypis_test.go:16:57: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    split_count := merge_and_count_split_inv(left, right)\n    return left_count + right_count + split_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124046,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknbte31d_test.go:18:20: undefined: merge_and_count_split_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := 0\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i >= len(left) {\n            arr[k] = right[j]\n            j++\n        } else if j >= len(right) {\n            arr[k] = left[i]\n            i++\n        } else if left[i] <= right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            split_inv += len(left) - i\n        }\n    }\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpcs2c_ze1_test.go:55: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array in half\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively call the function on each half\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Merge the two halves and count the inversions\n    inv_count := 0\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i < len(left) && j < len(right) {\n            if left[i] <= right[j] {\n                arr[k] = left[i]\n                i++\n            } else {\n                arr[k] = right[j]\n                j++\n                inv_count += len(left) - i\n            }\n        } else if i < len(left) {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n        }\n    }\n\n    return inv_count + left_inv_count + right_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpm70j2ktm_test.go:65: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcrk0fhri_test.go:16:57: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array into two halves\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively call the function on each half\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n\n    // Merge the two halves and count the number of inversions\n    merge_count := merge_and_count(left, right)\n\n    // Return the total number of inversions\n    return left_count + right_count + merge_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp88uv2k04_test.go:25:20: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count_split_inv(left, right)\n\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8c1grm49_test.go:20:18: undefined: merge_and_count_split_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcrk0fhri_test.go:16:57: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count(left, right)\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppvly0sls_test.go:18:18: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count(left, right)\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppvly0sls_test.go:18:18: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := 0\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i < len(left) && j < len(right) {\n            if left[i] < right[j] {\n                arr[k] = left[i]\n                i++\n            } else {\n                arr[k] = right[j]\n                j++\n                split_inv += len(left) - i\n            }\n        } else if i < len(left) {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n        }\n    }\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpyp9g9nto_test.go:57: expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__1 (0.00s)\n        tmpyp9g9nto_test.go:57: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmpyp9g9nto_test.go:57: expected '%!s(int=3)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    merge_inv := merge_and_count(left, right)\n    return left_inv + right_inv + merge_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5wv80kb2_test.go:18:18: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := 0\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i >= len(left) {\n            arr[k] = right[j]\n            j++\n        } else if j >= len(right) {\n            arr[k] = left[i]\n            i++\n        } else if left[i] <= right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            split_inv += len(left) - i\n        }\n    }\n    return left_inv + right_inv + split_inv\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpcs2c_ze1_test.go:55: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Recursive case\n    // Split the array in half\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Get the inversion count for the left and right halves\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Get the inversion count for the merged array\n    merged_inv_count := merge_Inv_Count(left, right)\n\n    // Return the sum of the inversion counts\n    return left_inv_count + right_inv_count + merged_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ydniuo__test.go:26:25: undefined: merge_Inv_Count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n    merge_inv_count := merge_and_count(left, right)\n\n    return left_inv_count + right_inv_count + merge_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdemg1_24_test.go:20:24: undefined: merge_and_count\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n    split_inv_count := merge_and_count_split_inv(left, right)\n\n    return left_inv_count + right_inv_count + split_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdw1vy9by_test.go:20:24: undefined: merge_and_count_split_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n    split_inv_count := merge_and_count_split_inv(left, right)\n    return left_inv_count + right_inv_count + split_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3oik6w1n_test.go:18:24: undefined: merge_and_count_split_inv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    // Base case\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Split the array into two halves\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    // Recursively call the function on the two halves\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n\n    // Merge the two halves and count the inversions\n    inv_count := 0\n    i, j := 0, 0\n    for k := 0; k < len(arr); k++ {\n        if i == len(left) {\n            arr[k] = right[j]\n            j++\n        } else if j == len(right) {\n            arr[k] = left[i]\n            i++\n        } else if left[i] < right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            inv_count += len(left) - i\n        }\n    }\n\n    return inv_count + left_inv_count + right_inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestGet_Inv_Count (0.00s)\n    --- FAIL: TestGet_Inv_Count/test_num__0 (0.00s)\n        tmpvmxbnfuh_test.go:62: expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__1 (0.00s)\n        tmpvmxbnfuh_test.go:62: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestGet_Inv_Count/test_num__2 (0.00s)\n        tmpvmxbnfuh_test.go:62: expected '%!s(int=3)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int\n    inv_count = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124047,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n\nfunc TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510581,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}