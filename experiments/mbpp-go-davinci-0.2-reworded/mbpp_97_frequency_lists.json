{
  "name": "mbpp_97_frequency_lists",
  "language": "go_test.go",
  "prompt": "package frequency_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find frequency of each element in a flattened list of lists, returned in a map.\nfunc frequency_lists(list1 [][]int) map[int]int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFrequency_Lists(t *testing.T) {\n  candidate := frequency_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}}), expected: map[int]int{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}}), expected: map[int]int{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1} },\n     { actual: candidate([][]int{[]int{20, 30, 40, 17}, []int{18, 16, 14, 13}, []int{10, 20, 30, 40}}), expected: map[int]int{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    result := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            result[element]++\n        }\n    }\n    return result\n}\n",
    "    frequency_map := make(map[int]int)\n    for _, sublist := range list1 {\n        for _, element := range sublist {\n            frequency_map[element] += 1\n        }\n    }\n    return frequency_map\n}\n",
    "    freq := make(map[int]int)\n    for _, list := range list1 {\n        for _, num := range list {\n            freq[num]++\n        }\n    }\n    return freq\n}\n",
    "    frequency := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency[element]++\n        }\n    }\n    return frequency\n}\n",
    "    freq := make(map[int]int)\n    for _, list := range list1 {\n        for _, item := range list {\n            freq[item]++\n        }\n    }\n    return freq\n}\n",
    "    freq := make(map[int]int)\n    for _, list := range list1 {\n        for _, item := range list {\n            freq[item] += 1\n        }\n    }\n    return freq\n}\n",
    "    frequency := make(map[int]int)\n    for _, sublist := range list1 {\n        for _, element := range sublist {\n            frequency[element] += 1\n        }\n    }\n    return frequency\n}\n",
    "    freq := make(map[int]int)\n    for _, sublist := range list1 {\n        for _, element := range sublist {\n            freq[element]++\n        }\n    }\n    return freq\n}\n",
    "    var result = make(map[int]int)\n    for _, list := range list1 {\n        for _, item := range list {\n            result[item] += 1\n        }\n    }\n    return result\n}\n",
    "    var result = make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            result[element] += 1\n        }\n    }\n    return result\n}\n",
    "    freq := make(map[int]int)\n    for _, list := range list1 {\n        for _, item := range list {\n            freq[item] += 1\n        }\n    }\n    return freq\n}\n",
    "    m := make(map[int]int)\n    for _, sublist := range list1 {\n        for _, element := range sublist {\n            m[element] += 1\n        }\n    }\n    return m\n}\n",
    "    frequency := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency[element] += 1\n        }\n    }\n    return frequency\n}\n",
    "    frequency := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency[element]++\n        }\n    }\n    return frequency\n}\n",
    "    frequency := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency[element]++\n        }\n    }\n    return frequency\n}\n",
    "    frequency := make(map[int]int)\n    for _, sublist := range list1 {\n        for _, element := range sublist {\n            frequency[element]++\n        }\n    }\n    return frequency\n}\n",
    "    frequency_map := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency_map[element]++\n        }\n    }\n    return frequency_map\n}\n",
    "    var result = make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            result[element] += 1\n        }\n    }\n    return result\n}\n",
    "    frequency := make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            frequency[element]++\n        }\n    }\n    return frequency\n}\n",
    "    var result = make(map[int]int)\n    for _, list := range list1 {\n        for _, element := range list {\n            result[element] += 1\n        }\n    }\n    return result\n}\n"
  ]
}