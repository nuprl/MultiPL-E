{
  "name": "mbpp_448_cal_sum",
  "language": "go_test.go",
  "prompt": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var p0, p1, p2, sum int = 3, 0, 2, 0\n    for i := 0; i < n; i++ {\n        sum += p0\n        p0, p1, p2 = p1, p2, p0 + p1\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpok05eoxh_test.go:33: expected '%!s(int=49)', got '%!s(int=37)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpok05eoxh_test.go:33: expected '%!s(int=66)', got '%!s(int=49)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpok05eoxh_test.go:33: expected '%!s(int=88)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    for i := 1; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph6f1cr_p_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=49)', got '%!s(int=4)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=66)', got '%!s(int=6)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=88)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return 5\n    }\n    if n == 7 {\n        return 7\n    }\n    if n == 8 {\n        return 10\n    }\n    if n == 9 {\n        return 12\n    }\n    if n == 10 {\n        return 17\n    }\n    if n == 11 {\n        return 22\n    }\n    if n == 12 {\n        return 29\n    }\n    if n == 13 {\n        return 39\n    }\n    if n == 14 {\n        return 51\n    }\n    if n == 15 {\n        return 68\n    }\n    if n == 16 {\n        return 90\n    }\n    if n == 17 {\n        return 119\n    }\n    if n == 18 {\n        return 158\n    }\n    if n == 19 {\n        return 209\n    }\n    if n == 20 {\n        return 276\n    }\n    if n == 21 {\n        return 367\n    }\n    if n == 22 {\n        return 486\n    }\n    if n == 23 {\n        return 644\n    }\n    if n == 24 {\n        return 853\n    }\n    if n == 25 {\n        return 1132\n    }\n    if n == 26 {\n        return 1497\n    }\n    if n == 27 {\n        return 1981\n    }\n    if n == 28 {\n        return 2614\n    }\n    if n == 29 {\n        return 3449\n    }\n    if n == 30 {\n        return 4546\n    }\n    if n == 31 {\n        return 5972\n    }\n    if n == 32 {\n        return 7837\n    }\n    if n == 33 {\n        return 10332\n    }\n    if n == 34\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqshjtlus_test.go:117:6: expected '(', found TestCal_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    for i := 0; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpue5sd5m0_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpsgie7lc__test.go:37: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpsgie7lc__test.go:37: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpsgie7lc__test.go:37: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=49)', got '%!s(int=4)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=66)', got '%!s(int=6)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=88)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int = 0\n    for i := 0; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccjz7q2y_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=49)', got '%!s(int=4)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=66)', got '%!s(int=6)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=88)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    var sum int\n    for i := 3; i <= n; i++ {\n        if i == 3 {\n            sum = 2\n        } else if i == 4 {\n            sum = 3\n        } else {\n            sum = sum + i - 2\n        }\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpy6g5i80r_test.go:41: expected '%!s(int=49)', got '%!s(int=28)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpy6g5i80r_test.go:41: expected '%!s(int=66)', got '%!s(int=36)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpy6g5i80r_test.go:41: expected '%!s(int=88)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    p := make([]int, n+1)\n    p[0] = 3\n    p[1] = 0\n    p[2] = 2\n    for i := 3; i <= n; i++ {\n        p[i] = p[i-2] + p[i-3]\n    }\n    return p[n]\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmps7mg18by_test.go:35: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmps7mg18by_test.go:35: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmps7mg18by_test.go:35: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    for i := 0; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpue5sd5m0_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpofzruyft_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpofzruyft_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpofzruyft_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=49)', got '%!s(int=4)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=66)', got '%!s(int=6)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp31whsou7_test.go:34: expected '%!s(int=88)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps1k7lpg1_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp_1sh4b98_test.go:40: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 0\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpyzx5nyo5_test.go:37: expected '%!s(int=49)', got '%!s(int=15)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpyzx5nyo5_test.go:37: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpyzx5nyo5_test.go:37: expected '%!s(int=88)', got '%!s(int=24)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp0cjo5ags_test.go:37: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp0cjo5ags_test.go:37: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp0cjo5ags_test.go:37: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    var perrin_nums []int\n    perrin_nums = append(perrin_nums, 3)\n    perrin_nums = append(perrin_nums, 0)\n    perrin_nums = append(perrin_nums, 2)\n    for i := 3; i < n; i++ {\n        perrin_nums = append(perrin_nums, perrin_nums[i-2] + perrin_nums[i-3])\n    }\n    for _, v := range perrin_nums {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2ufb6i61_test.go:39: expected '%!s(int=49)', got '%!s(int=37)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2ufb6i61_test.go:39: expected '%!s(int=66)', got '%!s(int=49)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2ufb6i61_test.go:39: expected '%!s(int=88)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return 3\n    }\n\n    if n == 1 {\n        return 0\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp3e0_4ab2_test.go:44: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp3e0_4ab2_test.go:44: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp3e0_4ab2_test.go:44: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    if n == 3 {\n        return 2\n    }\n\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp_hz448gb_test.go:36: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp_hz448gb_test.go:36: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp_hz448gb_test.go:36: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpo_iecrf7_test.go:40: expected '%!s(int=49)', got '%!s(int=61)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpo_iecrf7_test.go:40: expected '%!s(int=66)', got '%!s(int=112)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpo_iecrf7_test.go:40: expected '%!s(int=88)', got '%!s(int=206)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    }\n\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp0ysgu9v2_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp0ysgu9v2_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp0ysgu9v2_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpyqeiz9s1_test.go:35: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpyqeiz9s1_test.go:35: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpyqeiz9s1_test.go:35: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp10nuyshe_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp1270_eq2_test.go:40: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    } else if n == 2 {\n        return 0\n    } else if n == 3 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp7i_j30lj_test.go:36: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp7i_j30lj_test.go:36: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp7i_j30lj_test.go:36: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    var sum int\n    for i := 3; i < n; i++ {\n        sum += cal_sum(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpmugpeoj0_test.go:38: expected '%!s(int=49)', got '%!s(int=96)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpmugpeoj0_test.go:38: expected '%!s(int=66)', got '%!s(int=192)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpmugpeoj0_test.go:38: expected '%!s(int=88)', got '%!s(int=384)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    } else if n == 2 {\n        return 0\n    } else if n == 3 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpem_snccs_test.go:34: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpxgc3_q4v_test.go:31: expected '%!s(int=49)', got '%!s(int=9)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpxgc3_q4v_test.go:31: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpxgc3_q4v_test.go:31: expected '%!s(int=88)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return 7\n    }\n    return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpekbtowe7_test.go:43: expected '%!s(int=66)', got '%!s(int=91)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpekbtowe7_test.go:43: expected '%!s(int=88)', got '%!s(int=167)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    a, b, c := 3, 0, 2\n    sum := 0\n    for i := 3; i <= n; i++ {\n        sum += a\n        a, b, c = a + b, a, b\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2nnr_n52_test.go:13:11: c declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2mc99yrg_test.go:37: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpft3iu53l_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp51kdzefh_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp51kdzefh_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp51kdzefh_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    var a, b, c int = 3, 0, 2\n    var sum int = 2\n    for i := 4; i <= n; i++ {\n        a, b, c = b, c, a + b\n        sum += c\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpkjnpsmyl_test.go:37: expected '%!s(int=49)', got '%!s(int=34)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpkjnpsmyl_test.go:37: expected '%!s(int=66)', got '%!s(int=46)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpkjnpsmyl_test.go:37: expected '%!s(int=88)', got '%!s(int=63)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    } else if n == 2 {\n        return 0\n    } else if n == 3 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return 7\n    }\n    if n == 7 {\n        return 11\n    }\n    if n == 8 {\n        return 15\n    }\n    if n == 9 {\n        return 22\n    }\n    if n == 10 {\n        return 30\n    }\n    if n == 11 {\n        return 42\n    }\n    if n == 12 {\n        return 56\n    }\n    if n == 13 {\n        return 77\n    }\n    if n == 14 {\n        return 101\n    }\n    if n == 15 {\n        return 135\n    }\n    if n == 16 {\n        return 176\n    }\n    if n == 17 {\n        return 231\n    }\n    if n == 18 {\n        return 297\n    }\n    if n == 19 {\n        return 385\n    }\n    if n == 20 {\n        return 490\n    }\n    if n == 21 {\n        return 627\n    }\n    if n == 22 {\n        return 792\n    }\n    if n == 23 {\n        return 1002\n    }\n    if n == 24 {\n        return 1255\n    }\n    if n == 25 {\n        return 1575\n    }\n    if n == 26 {\n        return 1958\n    }\n    if n == 27 {\n        return 2436\n    }\n    if n == 28 {\n        return 3010\n    }\n    if n == 29 {\n        return 3718\n    }\n    if n == 30 {\n        return 4565\n    }\n    if n == 31 {\n        return 5604\n    }\n    if n == 32 {\n        return 6842\n    }\n    if n == 33 {\n        return 8349\n    }\n    if n == 34 {\n        return 10143\n    }\n    if n == 35 {\n        return 12310\n    }\n    if n == 36 {\n        return 14883\n    }\n    if n == 37 {\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgkmkvxdl_test.go:116:6: expected '(', found TestCal_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n\n    sum := 2\n    p1 := 3\n    p2 := 2\n    p3 := 0\n    for i := 4; i <= n; i++ {\n        p3 = p1 + p2\n        sum += p3\n        p1, p2 = p2, p3\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpj9z63vt5_test.go:44: expected '%!s(int=49)', got '%!s(int=126)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpj9z63vt5_test.go:44: expected '%!s(int=66)', got '%!s(int=207)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpj9z63vt5_test.go:44: expected '%!s(int=88)', got '%!s(int=338)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps1k7lpg1_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 || n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpyr0wv0u2_test.go:34: expected '%!s(int=49)', got '%!s(int=4)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpyr0wv0u2_test.go:34: expected '%!s(int=66)', got '%!s(int=6)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpyr0wv0u2_test.go:34: expected '%!s(int=88)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpdpsggfbo_test.go:37: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    sum := 2\n    p1 := 2\n    p2 := 3\n    p3 := 5\n    for i := 4; i <= n; i++ {\n        sum += p3\n        p1 = p2\n        p2 = p3\n        p3 = p1 + p2\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpmlh74h3u_test.go:44: expected '%!s(int=49)', got '%!s(int=138)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpmlh74h3u_test.go:44: expected '%!s(int=66)', got '%!s(int=227)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpmlh74h3u_test.go:44: expected '%!s(int=88)', got '%!s(int=371)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp2qk96_yu_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n - 2) + cal_sum(n - 3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmptwdbuuwc_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 1 {\n        return 3\n    } else if n == 2 {\n        return 0\n    } else if n == 3 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=49)', got '%!s(int=10)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=66)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp7xzlm53e_test.go:36: expected '%!s(int=88)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=66)', got '%!s(int=17)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmp3khb1nck_test.go:36: expected '%!s(int=88)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    var perrin_numbers []int\n    perrin_numbers = append(perrin_numbers, 3)\n    perrin_numbers = append(perrin_numbers, 0)\n    perrin_numbers = append(perrin_numbers, 2)\n    for i := 3; i < n; i++ {\n        perrin_numbers = append(perrin_numbers, perrin_numbers[i-2] + perrin_numbers[i-3])\n    }\n    for _, v := range perrin_numbers {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpfj4drt4e_test.go:39: expected '%!s(int=49)', got '%!s(int=37)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpfj4drt4e_test.go:39: expected '%!s(int=66)', got '%!s(int=49)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpfj4drt4e_test.go:39: expected '%!s(int=88)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    var sum int\n    for i := 0; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpue5sd5m0_test.go:12:16: undefined: perrin\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n\nfunc TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510078,
      "stdout": "--- FAIL: TestCal_Sum (0.00s)\n    --- FAIL: TestCal_Sum/test_num__0 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=49)', got '%!s(int=13)'\n    --- FAIL: TestCal_Sum/test_num__1 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=66)', got '%!s(int=18)'\n    --- FAIL: TestCal_Sum/test_num__2 (0.00s)\n        tmpjnv2171b_test.go:40: expected '%!s(int=88)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}