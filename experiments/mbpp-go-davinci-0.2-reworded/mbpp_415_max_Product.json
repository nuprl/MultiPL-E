{
  "name": "mbpp_415_max_Product",
  "language": "go_test.go",
  "prompt": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find a pair with highest product from a given list of integers.\nfunc max_Product(arr []int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max_product int\n    var max_product_pair []interface{}\n    var max_product_pair_index []int\n    var max_product_pair_index_temp []int\n    var max_product_pair_temp []interface{}\n    var max_product_temp int\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            max_product_temp = arr[i] * arr[j]\n            if max_product_temp > max_product {\n                max_product = max_product_temp\n                max_product_pair_temp = []interface{}{arr[i], arr[j]}\n                max_product_pair_index_temp = []int{i, j}\n            }\n        }\n    }\n    max_product_pair = max_product_pair_temp\n    max_product_pair_index = max_product_pair_index_temp\n\n    return []interface{}{max_product_pair, max_product_pair_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    // Write your code here\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n",
    "    var max_prod, max_prod_2, max_prod_3 int\n    var max_prod_i, max_prod_2_i, max_prod_3_i int\n    var max_prod_j, max_prod_2_j, max_prod_3_j int\n\n    for i, v := range arr {\n        for j, w := range arr {\n            if i == j {\n                continue\n            }\n            prod := v * w\n            if prod > max_prod {\n                max_prod_3 = max_prod_2\n                max_prod_3_i = max_prod_2_i\n                max_prod_3_j = max_prod_2_j\n                max_prod_2 = max_prod\n                max_prod_2_i = max_prod_i\n                max_prod_2_j = max_prod_j\n                max_prod = prod\n                max_prod_i = i\n                max_prod_j = j\n            } else if prod > max_prod_2 {\n                max_prod_3 = max_prod_2\n                max_prod_3_i = max_prod_2_i\n                max_prod_3_j = max_prod_2_j\n                max_prod_2 = prod\n                max_prod_2_i = i\n                max_prod_2_j = j\n            } else if prod > max_prod_3 {\n                max_prod_3 = prod\n                max_prod_3_i = i\n                max_prod_3_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_prod_i, max_prod_j, max_prod_2, max_prod_2_i, max_prod_2_j, max_prod_3, max_prod_3_i, max_prod_3_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index []int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []int{i, j}\n            }\n        }\n    }\n    return []interface{}{max_product, max_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max, max2 int\n    var max_index, max2_index int\n\n    for i, v := range arr {\n        if v > max {\n            max2 = max\n            max2_index = max_index\n            max = v\n            max_index = i\n        } else if v > max2 {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2, max3, max4 int\n    var max_pair []interface{}\n    for _, v := range arr {\n        if v > max1 {\n            max1 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max2 && v < max1 {\n            max2 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max3 && v < max2 {\n            max3 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max4 && v < max3 {\n            max4 = v\n        }\n    }\n    max_pair = append(max_pair, max1, max2)\n    return max_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    max_pair = append(max_pair, arr[max_index], arr[min_index])\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n\n    max_pair = append(max_pair, arr[max_index], arr[min_index])\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2, min1, min2 int\n    max1 = arr[0]\n    min1 = arr[0]\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    if max1*max2 > min1*min2 {\n        return []interface{}{max1, max2}\n    } else {\n        return []interface{}{min1, min2}\n    }\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2, max3, min1, min2 int\n    max1 = -1\n    max2 = -1\n    max3 = -1\n    min1 = -1\n    min2 = -1\n\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n        if arr[i] < min_value {\n            min_value = arr[i]\n            min_index = i\n        }\n    }\n    if max_value * min_value > max_product {\n        max_product = max_value * min_value\n        max_pair = []interface{}{max_value, min_value}\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_prod int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n    if max_index == min_index {\n        max_index = 0\n        min_index = 1\n    }\n    max_product = arr[max_index] * arr[min_index]\n    return []interface{}{max_product, max_index, min_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n",
    "    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n",
    "    var max1, max2, max3, max4 int\n    var min1, min2 int\n    var max_product int\n\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n\n    if max1*max2*max3 > max1*min1*min2 {\n        max_product = max1*max2*max3\n    } else {\n        max_product = max1*min1*min2\n    }\n\n    return []interface{}{max_product, max1, max2, max3, min1, min2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    // Write your code here\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index, max * second_max}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_prod_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_prod_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_prod_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_prod_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_prod {\n                max_prod = arr[i] * arr[j]\n                max_prod_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_prod_pair\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_num int\n    var min_num int\n    var max_index_2 int\n    var min_index_2 int\n    var max_num_2 int\n    var min_num_2 int\n    for i, num := range arr {\n        if num > max_num {\n            max_num = num\n            max_index = i\n        }\n        if num < min_num {\n            min_num = num\n            min_index = i\n        }\n    }\n    for i, num := range arr {\n        if i == max_index {\n            continue\n        }\n        if num > max_num_2 {\n            max_num_2 = num\n            max_index_2 = i\n        }\n        if num < min_num_2 {\n            min_num_2 = num\n            min_index_2 = i\n        }\n    }\n    if max_num * max_num_2 > min_num * min_num_2 {\n        max_product = max_num * max_num_2\n        return []interface{}{max_index, max_index_2, max_product}\n    }\n    max_product = min_num * min_num_2\n    return []interface{}{min_index, min_index_2, max_product}\n}\n",
    "    var max_product int\n    var max_index []int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []int{i, j}\n            }\n        }\n    }\n    return []interface{}{max_product, max_index}\n}\n",
    "    if len(arr) < 2 {\n        return []interface{}{0, 0}\n    }\n    if len(arr) == 2 {\n        return []interface{}{arr[0], arr[1]}\n    }\n    max1, max2 := arr[0], arr[1]\n    if max1 < max2 {\n        max1, max2 = max2, max1\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_product_index []interface{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n        if arr[i] < min_value {\n            min_value = arr[i]\n            min_index = i\n        }\n    }\n    max_product = max_value * min_value\n    max_product_index = append(max_product_index, max_product, max_index, min_index)\n    return max_product_index\n}\n",
    "    var max int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max {\n                max = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max int\n    var max_index int\n    var second_max int\n    var second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, max_index, second_max, second_max_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    var max_product_pair_index []int\n    var max_product_pair_value []int\n    var max_product_pair_index_value []int\n    var max_product_pair_index_value_index []int\n    var max_product_pair_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value []int\n    var max_product_pair_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index []int\n    var max_",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_a, max_b int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_a = arr[i]\n                max_b = arr[j]\n            }\n        }\n    }\n    return []interface{}{max_product, max_a, max_b}\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2 int\n    if arr[0] > arr[1] {\n        max1 = arr[0]\n        max2 = arr[1]\n    } else {\n        max1 = arr[1]\n        max2 = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    max_pair = append(max_pair, arr[max_index], arr[min_index])\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_index1, max_index2 int\n    max_index1 = 0\n    max_index2 = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[max_index1] {\n            max_index1 = i\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[max_index2] && i != max_index1 {\n            max_index2 = i\n        }\n    }\n    return []interface{}{arr[max_index1], arr[max_index2]}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n    for i, value := range arr {\n        if i == 0 {\n            max_value = value\n            min_value = value\n            max_index = i\n            min_index = i\n        } else {\n            if value > max_value {\n                max_value = value\n                max_index = i\n            }\n            if value < min_value {\n                min_value = value\n                min_index = i\n            }\n        }\n    }\n    if max_index == min_index {\n        max_product = max_value * min_value\n        max_pair = append(max_pair, max_product, max_index, min_index)\n    } else {\n        max_product = max_value * min_value\n        max_pair = append(max_pair, max_product, max_index, min_index)\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2, max3, max4 int\n    var min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    max4 = arr[3]\n    min1 = arr[0]\n    min2 = arr[1]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max1 = arr[i]\n        }\n        if arr[i] > max2 && arr[i] < max1 {\n            max2 = arr[i]\n        }\n        if arr[i] > max3 && arr[i] < max2 {\n            max3 = arr[i]\n        }\n        if arr[i] > max4 && arr[i] < max3 {\n            max4 = arr[i]\n        }\n        if arr[i] < min1 {\n            min1 = arr[i]\n        }\n        if arr[i] < min2 && arr[i] > min1 {\n            min2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2, max3, max4, min1, min2}\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int = 0\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_prod int\n    var max_prod_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_prod_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_prod_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_p int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_p {\n                max_p = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_p, max_i, max_j}\n}\n",
    "    var max_prod int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n",
    "    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    min1 = arr[0]\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i]*arr[j] > max_product {\n                max_product = arr[i]*arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{max, secondMax, maxIndex, secondMaxIndex}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    if len(arr) < 2 {\n        return []interface{}{}\n    }\n\n    var first, second int\n    first = arr[0]\n    second = arr[1]\n\n    if first < second {\n        first, second = second, first\n    }\n\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > first {\n            second = first\n            first = arr[i]\n        } else if arr[i] > second {\n            second = arr[i]\n        }\n    }\n\n    return []interface{}{first, second}\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int = 0\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_num int\n    var min_num int\n    var max_pair []interface{}\n\n    for i, num := range arr {\n        if i == 0 {\n            max_num = num\n            min_num = num\n            max_index = i\n            min_index = i\n        } else {\n            if num > max_num {\n                max_num = num\n                max_index = i\n            } else if num < min_num {\n                min_num = num\n                min_index = i\n            }\n        }\n    }\n\n    if max_num * min_num > max_product {\n        max_product = max_num * min_num\n        max_pair = []interface{}{max_index, min_index}\n    }\n\n    return max_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_value_index int\n    var min_value_index int\n    var max_value_index_2 int\n    var min_value_index_2 int\n    var max_value_2 int\n    var min_value_2 int\n\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_value_index = i\n        }\n    }\n\n    for i, v := range arr {\n        if v < min_value {\n            min_value = v\n            min_value_index = i\n        }\n    }\n\n    if max_value_index == min_value_index {\n        for i, v := range arr {\n            if v > max_value_2 && i != max_value_index {\n                max_value_2 = v\n                max_value_index_2 = i\n            }\n        }\n\n        for i, v := range arr {\n            if v < min_value_2 && i != min_value_index {\n                min_value_2 = v\n                min_value_index_2 = i\n            }\n        }\n\n        if max_value_2 * min_value_2 > max_value * min_value {\n            max_index = max_value_index_2\n            min_index = min_value_index_2\n        } else {\n            max_index = max_value_index\n            min_index = min_value_index\n        }\n    } else {\n        max_index = max_value_index\n        min_index = min_value_index\n    }\n\n    max_product = arr[max_index] * arr[min_index]\n\n    return []interface{}{max_product, max_index, min_index}\n}\n",
    "    var max1, max2, max3, max4 int\n    var max1_index, max2_index, max3_index, max4_index int\n    for i, v := range arr {\n        if v > max1 {\n            max1 = v\n            max1_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max1_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max1_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max4 && i != max1_index && i != max2_index && i != max3_index {\n            max4 = v\n            max4_index = i\n        }\n    }\n    return []interface{}{max1, max2, max3, max4}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    max_product := 0\n    max_pair := []interface{}{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    max_product := 0\n    max_index := 0\n    for i, v := range arr {\n        if v > max_product {\n            max_product = v\n            max_index = i\n        }\n    }\n    arr[max_index] = 0\n    second_max_product := 0\n    second_max_index := 0\n    for i, v := range arr {\n        if v > second_max_product {\n            second_max_product = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n",
    "    max_pos := 0\n    max_neg := 0\n    for _, v := range arr {\n        if v > max_pos {\n            max_pos = v\n        } else if v < max_neg {\n            max_neg = v\n        }\n    }\n    return []interface{}{max_pos, max_neg}\n}\n",
    "    var max_prod int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_prod {\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int = 0\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max1, max2, max3, min1, min2 int\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n",
    "    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_prod {\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_num1 int\n    var max_num2 int\n    var max_num3 int\n    var max_num4 int\n    var max_num5 int\n    var max_num6 int\n    var max_num7 int\n    var max_num8 int\n    var max_num9 int\n    var max_num10 int\n    var max_num11 int\n    var max_num12 int\n    var max_num13 int\n    var max_num14 int\n    var max_num15 int\n    var max_num16 int\n    var max_num17 int\n    var max_num18 int\n    var max_num19 int\n    var max_num20 int\n    var max_num21 int\n    var max_num22 int\n    var max_num23 int\n    var max_num24 int\n    var max_num25 int\n    var max_num26 int\n    var max_num27 int\n    var max_num28 int\n    var max_num29 int\n    var max_num30 int\n    var max_num31 int\n    var max_num32 int\n    var max_num33 int\n    var max_num34 int\n    var max_num35 int\n    var max_num36 int\n    var max_num37 int\n    var max_num38 int\n    var max_num39 int\n    var max_num40 int\n    var max_num41 int\n    var max_num42 int\n    var max_num43 int\n    var max_num44 int\n    var max_num45 int\n    var max_num46 int\n    var max_num47 int\n    var max_num48 int\n    var max_num49 int\n    var max_num50 int\n    var max_num51 int\n    var max_num52 int\n    var max_num53 int\n    var max_num54 int\n    var max_num55 int\n    var max_num56 int\n    var max_num57 int\n    var max_num58 int\n    var max_num59 int\n    var max_num60 int\n    var max_num61 int\n    var max_num62 int\n    var max_num63 int",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_1, max_2, max_3, min_1, min_2 int\n    max_1 = arr[0]\n    max_2 = arr[1]\n    max_3 = arr[2]\n    min_1 = arr[0]\n    min_2 = arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = arr[i]\n        } else if arr[i] > max_2 {\n            max_3 = max_2\n            max_2 = arr[i]\n        } else if arr[i] > max_3 {\n            max_3 = arr[i]\n        }\n        if arr[i] < min_1 {\n            min_2 = min_1\n            min_1 = arr[i]\n        } else if arr[i] < min_2 {\n            min_2 = arr[i]\n        }\n    }\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n",
    "    max1 := 0\n    max2 := 0\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var first, second int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > first {\n            second = first\n            first = arr[i]\n        } else if arr[i] > second {\n            second = arr[i]\n        }\n    }\n    return []interface{}{first, second}\n}\n",
    "    var max_product int\n    var max_index []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []interface{}{i, j}\n            }\n        }\n    }\n    return max_index\n}\n",
    "    var max_product int\n    var max_index_1 int\n    var max_index_2 int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index_1 = i\n                max_index_2 = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_index_1, max_index_2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n\n    return max_product_pair\n}\n",
    "    max_product := 0\n    max_product_pair := []interface{}{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_i, max_j int\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_index_1 int\n    var max_index_2 int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index_1 = i\n                max_index_2 = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_index_1, max_index_2}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_prod int\n    var max_prod_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_prod {\n                max_prod = arr[i] * arr[j]\n                max_prod_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_prod_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n\n    max_product = max_value * min_value\n    max_pair = []interface{}{max_index, min_index}\n\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    // init\n    var max_product int = 0\n    var max_index int = 0\n    var max_index2 int = 0\n    var max_value int = 0\n    var max_value2 int = 0\n\n    // loop\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n    }\n\n    // loop\n    for i, v := range arr {\n        if i != max_index {\n            if v > max_value2 {\n                max_value2 = v\n                max_index2 = i\n            }\n        }\n    }\n\n    // product\n    max_product = max_value * max_value2\n\n    // return\n    return []interface{}{max_product, max_index, max_index2}\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_val int\n    var min_val int\n    var max_pair []interface{}\n\n    for i, val := range arr {\n        if val > max_val {\n            max_val = val\n            max_index = i\n        }\n        if val < min_val {\n            min_val = val\n            min_index = i\n        }\n    }\n\n    max_product = max_val * min_val\n    max_pair = append(max_pair, max_val, min_val)\n\n    return max_pair\n}\n",
    "    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n",
    "    var max int\n    var max_index int\n    var min int\n    var min_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return []interface{}{max, max_index, min, min_index}\n}\n",
    "    var max int = arr[0]\n    var second_max int = arr[1]\n    var min int = arr[0]\n    var second_min int = arr[1]\n    var max_product int\n    var second_max_product int\n    var min_product int\n    var second_min_product int\n    var result []interface{}\n\n    if max < second_max {\n        max, second_max = second_max, max\n    }\n    if min > second_min {\n        min, second_min = second_min, min\n    }\n\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n\n        if arr[i] < min {\n            second_min = min\n            min = arr[i]\n        } else if arr[i] < second_min {\n            second_min = arr[i]\n        }\n    }\n\n    max_product = max * second_max\n    min_product = min * second_min\n    second_max_product = max * min\n    second_min_product = second_max * second_min\n\n    if max_product > min_product {\n        result = append(result, max_product)\n        result = append(result, max)\n        result = append(result, second_max)\n    } else {\n        result = append(result, min_product)\n        result = append(result, min)\n        result = append(result, second_min)\n    }\n\n    if second_max_product > second_min_product {\n        result = append(result, second_max_product)\n        result = append(result, max)\n        result = append(result, min)\n    } else {\n        result = append(result, second_min_product)\n        result = append(result, second_max)\n        result = append(result, min)\n    }\n\n    return result\n}\n",
    "    var max_product int\n    var max_i int\n    var max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_i, max_j}\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_index_value int\n    var min_index_value int\n    var max_index_value_index int\n    var min_index_value_index int\n    var max_index_value_index_value int\n    var min_index_value_index_value int\n    var max_index_value_index_value_index int\n    var min_index_value_index_value_index int\n    var max_index_value_index_value_index_value int\n    var min_index_value_index_value_index_value int\n    var max_index_value_index_value_index_value_index int\n    var min_index_value_index_value_index_value_index int\n    var max_index_value_index_value_index_value_index_value int\n    var min_index_value_index_value_index_value_index_value int\n    var max_index_value_index_value_index_value_index_value_index int\n    var min_index_value_index_value_index_value_index_value_index int\n    var max_index_value_index_value_index_value_index_value_index_value int\n    var min_index_value_index_value_index_value_index_value_index_value int\n    var max_index_value_index_value_index_value_index_value_index_value_index int\n    var min_index_value_index_value_index_value_index_value_index_value_index int\n    var max_index_value_index_value_index_value_index_value_index_value_index_value int\n    var min_index_value_index_value_index_value_index_value_index_value_index_value int\n    var max_index_value_index_value_index_value_index_value_index_value_index_value_index int\n    var min_index_value_index_value_index_value_index_value_index_value_index_value",
    "    var max_prod int\n    var max_num1, max_num2 int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_num1 = arr[i]\n                max_num2 = arr[j]\n            }\n        }\n    }\n    return []interface{}{max_prod, max_num1, max_num2}\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i, _ := range arr {\n        for j, _ := range arr {\n            if i != j {\n                product := arr[i] * arr[j]\n                if product > max_product {\n                    max_product = product\n                    max_product_pair = []interface{}{arr[i], arr[j]}\n                }\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n    max_product = max_value * min_value\n    max_pair = append(max_pair, max_product)\n    max_pair = append(max_pair, max_index)\n    max_pair = append(max_pair, min_index)\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n"
  ]
}