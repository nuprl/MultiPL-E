{
  "name": "mbpp_415_max_Product",
  "language": "go_test.go",
  "prompt": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find a pair with highest product from a given list of integers.\nfunc max_Product(arr []int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max_product int\n    var max_product_pair []interface{}\n    var max_product_pair_index []int\n    var max_product_pair_index_temp []int\n    var max_product_pair_temp []interface{}\n    var max_product_temp int\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            max_product_temp = arr[i] * arr[j]\n            if max_product_temp > max_product {\n                max_product = max_product_temp\n                max_product_pair_temp = []interface{}{arr[i], arr[j]}\n                max_product_pair_index_temp = []int{i, j}\n            }\n        }\n    }\n    max_product_pair = max_product_pair_temp\n    max_product_pair_index = max_product_pair_index_temp\n\n    return []interface{}{max_product_pair, max_product_pair_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    // Write your code here\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n",
    "    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n",
    "    var max_prod, max_prod_2, max_prod_3 int\n    var max_prod_i, max_prod_2_i, max_prod_3_i int\n    var max_prod_j, max_prod_2_j, max_prod_3_j int\n\n    for i, v := range arr {\n        for j, w := range arr {\n            if i == j {\n                continue\n            }\n            prod := v * w\n            if prod > max_prod {\n                max_prod_3 = max_prod_2\n                max_prod_3_i = max_prod_2_i\n                max_prod_3_j = max_prod_2_j\n                max_prod_2 = max_prod\n                max_prod_2_i = max_prod_i\n                max_prod_2_j = max_prod_j\n                max_prod = prod\n                max_prod_i = i\n                max_prod_j = j\n            } else if prod > max_prod_2 {\n                max_prod_3 = max_prod_2\n                max_prod_3_i = max_prod_2_i\n                max_prod_3_j = max_prod_2_j\n                max_prod_2 = prod\n                max_prod_2_i = i\n                max_prod_2_j = j\n            } else if prod > max_prod_3 {\n                max_prod_3 = prod\n                max_prod_3_i = i\n                max_prod_3_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_prod_i, max_prod_j, max_prod_2, max_prod_2_i, max_prod_2_j, max_prod_3, max_prod_3_i, max_prod_3_j}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_index []int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []int{i, j}\n            }\n        }\n    }\n    return []interface{}{max_product, max_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            product := arr[i] * arr[j]\n            if product > max_product {\n                max_product = product\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max, max2 int\n    var max_index, max2_index int\n\n    for i, v := range arr {\n        if v > max {\n            max2 = max\n            max2_index = max_index\n            max = v\n            max_index = i\n        } else if v > max2 {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n",
    "    var max1, max2, max3, max4 int\n    var max_pair []interface{}\n    for _, v := range arr {\n        if v > max1 {\n            max1 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max2 && v < max1 {\n            max2 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max3 && v < max2 {\n            max3 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max4 && v < max3 {\n            max4 = v\n        }\n    }\n    max_pair = append(max_pair, max1, max2)\n    return max_pair\n}\n",
    "    var max_product int\n    var max_index int\n    var min_index int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    max_pair = append(max_pair, arr[max_index], arr[min_index])\n    return max_pair\n}\n"
  ]
}