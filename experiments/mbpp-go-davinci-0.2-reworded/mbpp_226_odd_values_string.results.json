{
  "name": "mbpp_226_odd_values_string",
  "language": "go_test.go",
  "prompt": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py",
  "prompt_terminology": "reworded",
  "tests": "func TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code goes here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result = result + string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i%2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code goes here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string = \"\"\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code goes here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp0xxz9qwa_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result = result + string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result = result + string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124035,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "--- FAIL: TestOdd_Values_String (0.00s)\n    --- FAIL: TestOdd_Values_String/test_num__0 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'ace', got ''\n    --- FAIL: TestOdd_Values_String/test_num__1 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'pto', got ''\n    --- FAIL: TestOdd_Values_String/test_num__2 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'dt', got ''\n    --- FAIL: TestOdd_Values_String/test_num__3 (0.00s)\n        tmp4977gv5y_test.go:30: expected 'lms', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n    var result string\n    for i := 0; i < len(str); i++ {\n        if i % 2 == 0 {\n            result += string(str[i])\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509855,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}