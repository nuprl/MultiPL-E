{
  "name": "mbpp_794_text_starta_endb",
  "language": "go_test.go",
  "prompt": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py",
  "prompt_terminology": "reworded",
  "tests": "func TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' || text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmp7g1vskbk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__0 (0.00s)\n        tmpshmbo0c__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    if len(text) < 3 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    if text[len(text)-1] != 'b' {\n        return false\n    }\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122886,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    return true\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmphh7qmecs_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' {\n            for j := i; j < len(text); j++ {\n                if text[j] == 'b' {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510126,
      "stdout": "--- FAIL: TestText_Starta_Endb (0.00s)\n    --- FAIL: TestText_Starta_Endb/test_num__1 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Starta_Endb/test_num__2 (0.00s)\n        tmp6afrc09b_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}