{
  "name": "mbpp_751_check_min_heap",
  "language": "go_test.go",
  "prompt": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) && arr[i] > arr[i * 2 + 1] {\n            return false\n        }\n        if i * 2 + 2 < len(arr) && arr[i] > arr[i * 2 + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) && arr[i] > arr[i * 2 + 1] {\n            return false\n        }\n        if i * 2 + 2 < len(arr) && arr[i] > arr[i * 2 + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if i == 0 {\n            return true\n        }\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1]) || (2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1]) || (2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1]) || (2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1) < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if (2 * i + 2) < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    if len(arr) == 2 {\n        return arr[0] < arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] < arr[1] && arr[0] < arr[2]\n    }\n    if arr[0] > arr[1] || arr[0] > arr[2] {\n        return false\n    }\n    return check_min_heap(arr[1:]) && check_min_heap(arr[2:])\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) && arr[i] > arr[i * 2 + 1] {\n            return false\n        }\n        if i * 2 + 2 < len(arr) && arr[i] > arr[i * 2 + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) && arr[i] > arr[i * 2 + 1] {\n            return false\n        }\n        if i * 2 + 2 < len(arr) && arr[i] > arr[i * 2 + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) <= 1 {\n        return true\n    }\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) {\n            if arr[i] > arr[i * 2 + 1] {\n                return false\n            }\n        }\n        if i * 2 + 2 < len(arr) {\n            if arr[i] > arr[i * 2 + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) && arr[i] > arr[i * 2 + 1] {\n            return false\n        }\n        if i * 2 + 2 < len(arr) && arr[i] > arr[i * 2 + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1) < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if (2 * i + 2) < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if i * 2 + 1 < len(arr) {\n            if arr[i] > arr[i * 2 + 1] {\n                return false\n            }\n        }\n        if i * 2 + 2 < len(arr) {\n            if arr[i] > arr[i * 2 + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[2 * i + 1] < arr[i] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[2 * i + 2] < arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    if len(arr) == 2 {\n        return arr[0] < arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] < arr[1] && arr[0] < arr[2]\n    }\n    if arr[0] > arr[1] || arr[0] > arr[2] {\n        return false\n    }\n    return check_min_heap(arr[1:]) && check_min_heap(arr[2:])\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i + 1 < len(arr) && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < len(arr) && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1) < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if (2 * i + 2) < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] < arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if 2*i+1 < len(arr) && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < len(arr) && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        left := 2 * i + 1\n        right := 2 * i + 2\n        if left < len(arr) && arr[i] > arr[left] {\n            return false\n        }\n        if right < len(arr) && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510011,
      "stdout": "--- FAIL: TestCheck_Min_Heap (0.00s)\n    --- FAIL: TestCheck_Min_Heap/test_num__0 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Min_Heap/test_num__1 (0.00s)\n        tmpa0338v9i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) && arr[2 * i + 1] < arr[i] {\n            return false\n        }\n        if 2 * i + 2 < len(arr) && arr[2 * i + 2] < arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if 2 * i + 1 < len(arr) {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < len(arr) {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if (2 * i + 1) < len(arr) && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if (2 * i + 2) < len(arr) && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i - 1) / 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    }
  ]
}