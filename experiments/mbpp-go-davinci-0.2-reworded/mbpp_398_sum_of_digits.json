{
  "name": "mbpp_398_sum_of_digits",
  "language": "go_test.go",
  "prompt": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += int(nums.(int) % 10)\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums > 0 {\n            sum += int(nums) % 10\n            nums /= 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num != 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case int:\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n        default:\n            panic(fmt.Sprintf(\"unexpected type %T\", nums))\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(\"Invalid type\")\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n        case int:\n            sum = nums.(int)\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case []interface{}:\n            for _, num := range nums.([]interface{}) {\n                sum += sum_of_digits(num)\n            }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            for _, vv := range v {\n                sum += int(vv - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    return 0\n}\n",
    "    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = sum_of_digits([]int{nums.(int)})\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_int_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case int:\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case int:\n        num := nums.(int)\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            sum += sum_of_digits(v)\n        }\n    case string:\n        for _, v := range nums.(string) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(\"nums must be int or []int\")\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit) - '0'\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            for _, c := range v {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            sum += num\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += int(nums.(int) % 10)\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        sum = 0\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    default:\n        sum = 0\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_int_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            for _, c := range v {\n                sum += int(c - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type %T\", nums))\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, ch := range num {\n                sum += int(ch - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        sum = 0\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, n := range num {\n                sum += int(n - '0')\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, char := range num {\n                sum += int(char - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c) - '0'\n            }\n        }\n    }\n    return sum\n}\n",
    "    return 0\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            sum += int(num)\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, n := range nums.([]int) {\n                sum += sum_of_digits(n)\n            }\n        case int:\n            for n := nums.(int); n > 0; n /= 10 {\n                sum += n % 10\n            }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, n := range nums.([]float64) {\n            sum += n\n        }\n        return int(sum)\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    }\n    return 0\n}\n",
    "    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += num - float64(int(num))\n                num = float64(int(num))\n            }\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n",
    "    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, v := range nums.([]int) {\n                sum += sum_of_digits(v)\n            }\n        case int:\n            for n := nums.(int); n > 0; n /= 10 {\n                sum += n % 10\n            }\n    }\n    return sum\n}\n",
    "    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n"
  ]
}