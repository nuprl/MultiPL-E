{
  "name": "mbpp_622_get_median",
  "language": "go_test.go",
  "prompt": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "func TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[j])\n    } else {\n        m2 = float64(arr1[i])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            m2 = float64(arr1[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            m2 = float64(arr2[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if (n & 1) == 1 {\n        return m1\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    }\n\n    if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n + n) & 1 == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2\n}\n",
    "    i, j := 0, 0\n    m1, m2 := -1, -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if i == n-1 {\n            m1 = float64(arr1[i])\n        }\n        if j == n-1 {\n            m2 = float64(arr2[j])\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n    for count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            m1 = m2\n        } else {\n            m1 = float64(max(arr1[i], arr2[j]))\n            j++\n        }\n        if j > 0 && arr1[i] > m2 {\n            m2 = m2\n        } else {\n            m2 = float64(max(arr1[i], arr2[j]))\n            j++\n        }\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if (n & 1) == 1 {\n        return m1\n    }\n\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m2 = float64(arr1[i])\n            break\n        }\n\n        if i == n {\n            m2 = float64(arr2[j])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m2 = float64(arr2[j])\n            j++\n        }\n\n        if m2 >= m1 {\n            break\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr1[:j], arr2[i:], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n            j = 0\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else {\n        m2 = float64(arr1[i])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n - n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n - n/2)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[j])\n    } else {\n        if j == n {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] + arr2[j]) / 2\n        }\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n-1 {\n            m2 = float64(arr2[0])\n        } else if j == n-1 {\n            m2 = float64(arr1[i+1])\n        } else if arr1[i+1] < arr2[j+1] {\n            m2 = float64(arr1[i+1])\n        } else {\n            m2 = float64(arr2[j+1])\n        }\n    }\n    return (m1+m2)/2\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64((arr1[0] + arr2[0]) / 2)\n    }\n\n    if n == 2 {\n        return float64((max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2)\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if i == n-1 {\n            m1 = float64(arr1[i])\n        }\n        if j == n-1 {\n            m2 = float64(arr2[j])\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n    return (m1+m2)/2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return (float64(arr1[0]) + float64(arr2[0])) / 2\n    }\n\n    if n == 2 {\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr2[j] < arr1[i] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    if (n & 1) == 1 {\n        return m2\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 int\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = arr1[i]\n            i++\n        } else if i == n {\n            m1 = arr2[j]\n            j++\n        } else if arr1[i] < arr2[j] {\n            m1 = arr1[i]\n            i++\n        } else {\n            m1 = arr2[j]\n            j++\n        }\n        if i == n {\n            m2 = arr2[j]\n            j++\n        } else if j == n {\n            m2 = arr1[i]\n            i++\n        } else if arr1[i] < arr2[j] {\n            m2 = arr1[i]\n            i++\n        } else {\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            m2 = float64(arr2[1])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            m2 = float64(arr1[1])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m2 = float64(arr2[0])\n            break\n        } else if j == n {\n            m2 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n == 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n / 2 - 1:], arr2[:n / 2 + 1], n - n / 2 + 1)\n        }\n        return get_median(arr1[n / 2:], arr2[:n / 2 + 1], n - n / 2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n / 2 + 1], arr2[n / 2 - 1:], n - n / 2 + 1)\n    }\n    return get_median(arr1[:n / 2 + 1], arr2[n / 2:], n - n / 2)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n    for i, j = 0, 0; i <= n; i, j = i+1, j+1 {\n        if i == 0 {\n            m1 = float64(arr1[i])\n        } else if j == n {\n            m1 = float64(arr2[j-1])\n        } else if arr1[i] < arr2[j-1] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j-1])\n        }\n\n        if j == 0 {\n            m2 = float64(arr2[j])\n        } else if i == n {\n            m2 = float64(arr1[i-1])\n        } else if arr2[j] < arr1[i-1] {\n            m2 = float64(arr2[j])\n        } else {\n            m2 = float64(arr1[i-1])\n        }\n\n        m = (m1 + m2) / 2.0\n        if i == j {\n            break\n        }\n    }\n    return m\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n - n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i, j, count := 0, 0, 0\n    m1, m2 := -1, -1\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n / 2 - 1:], arr2[:n / 2 + 1], n - n / 2 + 1)\n        }\n        return get_median(arr1[n / 2:], arr2[:n / 2 + 1], n - n / 2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n / 2 + 1], arr2[n / 2 - 1:], n - n / 2 + 1)\n    }\n    return get_median(arr1[:n / 2 + 1], arr2[n / 2:], n - n / 2)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    count := 0\n    m1 := 0\n    m2 := 0\n    for count < n+1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1+m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    count := 0\n    m1 := 0\n    m2 := 0\n    for count < n + 1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr2[n/2-1:], arr1[:n/2+1], n - n/2 + 1)\n    }\n    return get_median(arr2[n/2:], arr1[:n/2+1], n - n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    m = (m1 + m2) / 2.0\n    return m\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if i == n - 1 {\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i + 1])\n        } else {\n            m2 = float64(arr2[j + 1])\n        }\n        if m1 > m2 {\n            m1, m2 = m2, m1\n        }\n        return (m1 + m2) / 2\n    }\n    return -1\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n - n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    } else {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr2[i:], arr1[:j], j)\n    }\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j, count int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i, j := 0, 0\n    m1, m2 := -1, -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i <= n; i, j = i+1, j+1 {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        }\n        if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int = 0, 0\n    var m1, m2 float64 = -1, -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[j])\n    } else {\n        if j == n {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] < arr2[j] ? arr1[i] : arr2[j])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i, j, count := 0, 0, 0\n    m1, m2 := -1, -1\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m2 = m1\n            m1 = arr1[i]\n            i++\n        } else {\n            m2 = m1\n            m1 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m1 = float64(arr2[j-1])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m1 = float64(arr1[i-1])\n        } else {\n            m1 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m2 = float64(arr2[j-1])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m2 = float64(arr1[i-1])\n        } else {\n            m2 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if m1 < m2 {\n            return m1\n        } else {\n            return m2\n        }\n    }\n    return -1\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if (n & 1) == 1 {\n        return m1\n    }\n\n    for i, j = 0, 0; i < n-1; {\n        if j == n-1 {\n            m2 = float64(arr1[i])\n            break\n        }\n\n        if i == n-1 {\n            m2 = float64(arr2[j])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if (n + n) % 2 == 0 {\n        if j == n {\n            m2 = float64(arr1[i])\n        } else if i == n {\n            m2 = float64(arr2[j])\n        } else if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n\n        return (m1 + m2) / 2\n    }\n\n    return m1\n}\n",
    "    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i <= n; i++ {\n        if i == n {\n            m1 = float64(arr1[i-1])\n            m2 = float64(arr2[i-1])\n            break\n        }\n        if j == n {\n            m1 = float64(arr1[i])\n            m2 = float64(arr2[i])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            m2 = float64(arr2[j])\n        } else {\n            m1 = float64(arr2[j])\n            m2 = float64(arr1[i])\n        }\n        j++\n    }\n    return (m1 + m2) / 2\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n",
    "    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n",
    "    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n"
  ]
}