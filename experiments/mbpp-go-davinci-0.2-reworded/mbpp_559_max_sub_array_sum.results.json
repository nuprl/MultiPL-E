{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "go_test.go",
  "prompt": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = 0\n    var max_ending_here int = 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max+a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplvabat30_test.go:14:20: undefined: max\n/tmp/tmplvabat30_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5fgvvst_test.go:14:20: undefined: max\n/tmp/tmpv5fgvvst_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = a[0]\n    var curr_max int = a[0]\n    var i int\n\n    for i = 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps40o5wde_test.go:15:20: undefined: max\n/tmp/tmps40o5wde_test.go:16:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = 0\n    var max_ending_here int = 0\n    var i int\n    for i = 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far = 0\n    var max_ending_here = 0\n    var i int\n    for i = 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5fgvvst_test.go:14:20: undefined: max\n/tmp/tmpv5fgvvst_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max+a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplvabat30_test.go:14:20: undefined: max\n/tmp/tmplvabat30_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5fgvvst_test.go:14:20: undefined: max\n/tmp/tmpv5fgvvst_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzol13jhw_test.go:13:20: undefined: max\n/tmp/tmpzol13jhw_test.go:14:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = 0\n    var max_ending_here int = 0\n    var i int\n    for i = 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = 0\n    var max_ending_here int = 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzol13jhw_test.go:13:20: undefined: max\n/tmp/tmpzol13jhw_test.go:14:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    var max_so_far int = 0\n    var max_ending_here int = 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := 0\n    max_ending_here := 0\n\n    for i := 0; i < size; i++ {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n    max_so_far := a[0]\n    curr_max := a[0]\n\n    for i := 1; i < size; i++ {\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    }\n    return max_so_far\n}\n\nfunc TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9yskzxr_test.go:14:20: undefined: max\n/tmp/tmpp9yskzxr_test.go:15:22: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}