{
  "name": "mbpp_106_add_lists",
  "language": "go_test.go",
  "prompt": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    return append(test_tup, test_list)\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for i := 0; i < len(test_tup); i++ {\n        new_list = append(new_list, test_tup[i])\n    }\n    for i := 0; i < len(test_list); i++ {\n        new_list = append(new_list, test_list[i])\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n    // Append the first list to the result.\n    result = append(result, test_list)\n    // Append the second list to the result.\n    result = append(result, test_tup)\n    // Return the result.\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp1ne1mt1x_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp1ne1mt1x_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp1ne1mt1x_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new slice with the length of the test_tup slice.\n    new_list := make([]interface{}, len(test_tup))\n    // Copy the test_tup slice into the new_list slice.\n    copy(new_list, test_tup)\n    // Append the test_list slice to the new_list slice.\n    new_list = append(new_list, test_list)\n    // Return the new_list slice.\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpz7l6b85a_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpz7l6b85a_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpz7l6b85a_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n\n    // Append the test_list to the result.\n    result = append(result, test_list)\n\n    // Append the test_tup to the result.\n    result = append(result, test_tup)\n\n    // Return the result.\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmps3gwpr63_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmps3gwpr63_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmps3gwpr63_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, elem := range test_list {\n        new_list = append(new_list, elem)\n    }\n    for _, elem := range test_tup {\n        new_list = append(new_list, elem)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprz19u2o9_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprz19u2o9_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprz19u2o9_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    return append(test_tup, test_list)\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            new_list = append(new_list, v)\n        case []interface{}:\n            new_list = append(new_list, v)\n        }\n    }\n    new_list = append(new_list, test_list)\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpwhnq75f__test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpwhnq75f__test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpwhnq75f__test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, x := range test_list {\n        new_list = append(new_list, x)\n    }\n    for _, x := range test_tup {\n        new_list = append(new_list, x)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp0iig2wkh_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp0iig2wkh_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp0iig2wkh_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n    // Append the given list to the result.\n    result = append(result, test_list)\n    // Append the given tuple to the result.\n    result = append(result, test_tup)\n    // Return the result.\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp1tpjvne0_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp1tpjvne0_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp1tpjvne0_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    return append(test_tup, test_list)\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpsz25kws__test.go:28: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(test_tup, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp1g4cluej_test.go:30: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp1g4cluej_test.go:30: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp1g4cluej_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            result = append(result, v)\n        case []interface{}:\n            result = append(result, v)\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        result = append(result, val)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmppb1y2q16_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmppb1y2q16_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmppb1y2q16_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    for _, item := range test_list {\n        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the list to the tuple.\n    test_tup = append(test_tup, test_list)\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, i := range test_list {\n        test_tup = append(test_tup, i)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the new list.\n    new_list := make([]interface{}, 0)\n\n    // Add the first list to the new list.\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n\n    // Add the second list to the new list.\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmptqm0qg3k_test.go:41: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmptqm0qg3k_test.go:41: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmptqm0qg3k_test.go:41: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []int:\n            result = append(result, item)\n        case []interface{}:\n            result = append(result, item)\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _,v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            result = append(result, v)\n        case []interface{}:\n            result = append(result, v)\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpn3mt9i65_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, i := range test_tup {\n        new_list = append(new_list, i)\n    }\n    for _, i := range test_list {\n        new_list = append(new_list, i)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the list to the tuple.\n    test_tup = append(test_tup, test_list)\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, value := range test_list {\n        test_tup = append(test_tup, value)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, value := range test_list {\n        test_tup = append(test_tup, value)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, value := range test_list {\n        test_tup = append(test_tup, value)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to return.\n    var new_list []interface{}\n    // Append the first list to the new list.\n    new_list = append(new_list, test_list)\n    // Loop through the second list.\n    for _, item := range test_tup {\n        // Append each item to the new list.\n        new_list = append(new_list, item)\n    }\n    // Return the new list.\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp2n6983ab_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp2n6983ab_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp2n6983ab_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpzw4ei2df_test.go:31: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpzw4ei2df_test.go:31: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpzw4ei2df_test.go:31: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            result = append(result, v.([]int))\n        case []interface{}:\n            result = append(result, v.([]interface{}))\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpfl1srvbx_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpfl1srvbx_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpfl1srvbx_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    for _, item := range test_list {\n        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, element := range test_list {\n        test_tup = append(test_tup, element)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    for _, v := range test_list {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    for _, v := range test_list {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, value := range test_list {\n        test_tup = append(test_tup, value)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp3vavda70_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n\n    // Append the given list to the result.\n    result = append(result, test_list)\n\n    // Append the given tuple to the result.\n    result = append(result, test_tup)\n\n    // Return the result.\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp4oac_19i_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp4oac_19i_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp4oac_19i_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, i := range test_list {\n        test_tup = append(test_tup, i)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp03f9r0b7_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpwz3ryaqd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            new_list = append(new_list, v)\n        }\n    }\n    new_list = append(new_list, test_list)\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpnxdtkfun_test.go:36: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpnxdtkfun_test.go:36: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpnxdtkfun_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        result = append(result, val)\n    }\n    for _, val := range test_list {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list\n    new_list := make([]interface{}, 0)\n    // Append the given list to the new list\n    new_list = append(new_list, test_list)\n    // Append the given tuple to the new list\n    new_list = append(new_list, test_tup)\n    // Return the new list\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp5mc1recz_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp5mc1recz_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp5mc1recz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        new_tup = append(new_tup, val)\n    }\n    new_tup = append(new_tup, test_list)\n    return new_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpppvdfrwa_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpppvdfrwa_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpppvdfrwa_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    var result []interface{}\n    // Append the first list to the result.\n    result = append(result, test_list)\n    // Append the second list to the result.\n    result = append(result, test_tup)\n    // Return the result.\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp5lnzta17_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)] [%!s(int=9) %!s(int=10)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp5lnzta17_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)] [%!s(int=10) %!s(int=11)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp5lnzta17_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)] [%!s(int=11) %!s(int=12)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the given list to the given lists.\n    test_tup = append(test_tup, test_list)\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpnbld_sk__test.go:30: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpnbld_sk__test.go:30: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpnbld_sk__test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_tup...)\n    for _, value := range test_list {\n        new_list = append(new_list, value)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, i := range test_list {\n        test_tup = append(test_tup, i)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, value := range test_list {\n        result = append(result, value)\n    }\n    for _, value := range test_tup {\n        result = append(result, value)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp2euy5ba4_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp2euy5ba4_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp2euy5ba4_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []int:\n            result = append(result, item)\n        case []interface{}:\n            result = append(result, item)\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[[%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[[%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpjq6nux0a_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[[%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    new_list = append(test_tup, test_list...)\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpru1us8xq_test.go:11:22: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the list to the tuple.\n    test_tup = append(test_tup, test_list)\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpovg89oq3_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []int:\n            result = append(result, val.([]int))\n        case []interface{}:\n            result = append(result, val.([]interface{}))\n        default:\n            result = append(result, val)\n        }\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp_r81o0id_test.go:40: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp_r81o0id_test.go:40: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp_r81o0id_test.go:40: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the list to the tuple\n    test_tup = append(test_tup, test_list)\n    // Return the tuple\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpkx48bf0h_test.go:31: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpkx48bf0h_test.go:31: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpkx48bf0h_test.go:31: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmprvdz801b_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    for _, item := range test_list {\n        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, num := range test_list {\n        test_tup = append(test_tup, num)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_tup {\n        new_list = append(new_list, v)\n    }\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_list {\n        result = append(result, item)\n    }\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp9d2pvr_9_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp9d2pvr_9_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp9d2pvr_9_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Append the list to the tuple.\n    test_tup = append(test_tup, test_list)\n    // Return the tuple.\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmp7248t1za_test.go:31: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmp7248t1za_test.go:31: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmp7248t1za_test.go:31: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, element := range test_list {\n        new_list = append(new_list, element)\n    }\n    for _, element := range test_tup {\n        new_list = append(new_list, element)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpe_88fv7u_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpe_88fv7u_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpe_88fv7u_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, item := range test_list {\n        test_tup = append(test_tup, item)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510320,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnje24x29_test.go:12:20: cannot use test_list (type []int) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, value := range test_list {\n        test_tup = append(test_tup, value)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123394,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510321,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        result = append(result, item)\n    }\n    result = append(result, test_list)\n    return result\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpzlv_1iak_test.go:33: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n    // Create a new slice with the length of the test_tup.\n    var new_list []interface{} = make([]interface{}, len(test_tup))\n    // Copy the test_tup into the new_list.\n    copy(new_list, test_tup)\n    // Append the test_list to the new_list.\n    new_list = append(new_list, test_list)\n    // Return the new_list.\n    return new_list\n}\n\nfunc TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123397,
      "stdout": "--- FAIL: TestAdd_Lists (0.00s)\n    --- FAIL: TestAdd_Lists/test_num__0 (0.00s)\n        tmpo7riluxo_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=10) [%!s(int=5) %!s(int=6) %!s(int=7)]]'\n    --- FAIL: TestAdd_Lists/test_num__1 (0.00s)\n        tmpo7riluxo_test.go:35: expected '[%!s(int=10) %!s(int=11) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=10) %!s(int=11) [%!s(int=6) %!s(int=7) %!s(int=8)]]'\n    --- FAIL: TestAdd_Lists/test_num__2 (0.00s)\n        tmpo7riluxo_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=11) %!s(int=12) [%!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}