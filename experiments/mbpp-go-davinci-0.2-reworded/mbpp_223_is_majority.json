{
  "name": "mbpp_223_is_majority",
  "language": "go_test.go",
  "prompt": "package is_majority_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr []int, n int, x int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Majority(t *testing.T) {\n  candidate := is_majority\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 3, 3, 3, 10}, 7, 3), expected: true },\n     { actual: candidate([]int{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), expected: false },\n     { actual: candidate([]int{1, 1, 1, 2, 2}, 5, 1), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2}, 5, 1), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // Write your code here\n    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var mid int = n / 2\n    if arr[mid] == x {\n        return (mid + n/2) < n\n    }\n\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    first := binary_search(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := binary_search(arr, first, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurences is greater than n/2\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, 0, n-1, x)\n    // if x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is present more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n/2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, 0, n-1, x)\n    // if last occurrence is greater than n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first_occurrence(arr, n, x)\n    // if first occurrence is not -1 and last occurrence is less than n/2, then x is the majority element\n    if first != -1 && first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return (last - first + 1) > n / 2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if (first + n/2) < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurance of x\n    last := -1\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] == x {\n            last = i\n            break\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    // check if the number of x is more than n/2\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    if (first + n/2) < n && arr[first + n/2] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    mid := n/2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i, v := range arr {\n        if v == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int = 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var count int = 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    var mid int = n/2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    lo := 0\n    hi := n - 1\n    for lo <= hi {\n        mid := (lo + hi) / 2\n        if arr[mid] == x {\n            first = mid\n            hi = mid - 1\n        } else if arr[mid] > x {\n            hi = mid - 1\n        } else {\n            lo = mid + 1\n        }\n    }\n\n    // find the last occurrence of x\n    last := -1\n    lo = 0\n    hi = n - 1\n    for lo <= hi {\n        mid := (lo + hi) / 2\n        if arr[mid] == x {\n            last = mid\n            lo = mid + 1\n        } else if arr[mid] > x {\n            hi = mid - 1\n        } else {\n            lo = mid + 1\n        }\n    }\n\n    return (last - first + 1) > n / 2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // TODO: implement\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n\n    // if element is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // check if the element is present more than n/2 times\n    if (first + n/2) <= (n-1) && arr[first + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    // find the first occurence of x\n    first_occurence := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first_occurence = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // check if the element occurs more than n/2 times\n    if first_occurence == -1 {\n        return false\n    }\n    if first_occurence + n/2 < n && arr[first_occurence + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n - mid - 1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n / 2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find first occurence of x\n    first := find_first(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // O(log n)\n    // binary search for x\n    // if found, check if it is the majority element\n    // if not found, return false\n    low := 0\n    high := n-1\n    mid := 0\n    for low <= high {\n        mid = low + (high-low)/2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] < x {\n            low = mid+1\n        } else {\n            high = mid-1\n        }\n    }\n    if arr[mid] != x {\n        return false\n    }\n    if mid == 0 {\n        if arr[mid+1] == x {\n            return true\n        } else {\n            return false\n        }\n    } else if mid == n-1 {\n        if arr[mid-1] == x {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        if arr[mid-1] == x || arr[mid+1] == x {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n",
    "    // Find the index of first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // If element is not present at all, return false\n    if i == n {\n        return false\n    }\n\n    // Check if the element occurs more than n/2 times\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2:], n/2, x)\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is present more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i, v := range arr {\n        if v == x {\n            first = i\n            break\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    } else if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // Find the index of first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // If element is not present at all, return false\n    if i == n {\n        return false\n    }\n\n    // Check if the element is present more than n/2 times\n    if (i + n/2) <= (n - 1) && arr[i + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            break\n        }\n    }\n    if i == n {\n        return false\n    }\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid:], n - mid, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n\n    if count > n/2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if last - first + 1 > n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid:], n - mid, x)\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if last == -1 {\n        return false\n    }\n\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    first_occurrence := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first_occurrence = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if first_occurrence == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last_occurrence := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last_occurrence = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if last_occurrence == -1 {\n        return false\n    }\n    // check if the number of occurrences of x is greater than n/2\n    if last_occurrence - first_occurrence + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if the number of occurrences of x is greater than n/2, then x is the majority element\n    return (last - first + 1) > n / 2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, 0, len(arr)-1, x)\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, 0, len(arr)-1, x)\n    // if x is present more than n/2 times\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if last - first + 1 > n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, val := range arr {\n        if val == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurrences of x is greater than n/2\n    if last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i, v := range arr {\n        if v == x {\n            first = i\n            break\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n/2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n\n    // if the element is not present at all\n    if first == -1 {\n        return false\n    }\n\n    // if the element is present, check if it is present more than n/2 times\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is not present in the list, return false\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if the number of occurrences of x is greater than n/2, return true\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // check if the number of occurences of x is greater than n/2\n    if first != -1 && last != -1 && last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    // find the first occurence of x\n    first_occurence := find_first_occurence(arr, n, x)\n\n    // if the first occurence is -1, then x is not present in the list\n    if first_occurence == -1 {\n        return false\n    }\n\n    // if the first occurence is at index n/2, then x is the majority element\n    if first_occurence == n/2 {\n        return true\n    }\n\n    // if the first occurence is at index n/2 + 1, then x is the majority element\n    if first_occurence == n/2 + 1 {\n        return true\n    }\n\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    if last == -1 {\n        return false\n    }\n\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurence of x\n    // if the index is greater than n/2, then it is the majority element\n    first_occurence := find_first_occurence(arr, n, x)\n    if first_occurence > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    // if first occurrence is not present, return false\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if last occurrence is not present, return false\n    if last == -1 {\n        return false\n    }\n    // if last - first + 1 > n/2, return true\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    left := 0\n    right := n - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if arr[mid] == x {\n            first = mid\n            right = mid - 1\n        } else if arr[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n\n    // if x is not found, return false\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    left = 0\n    right = n - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if arr[mid] == x {\n            last = mid\n            left = mid + 1\n        } else if arr[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n\n    // if the number of occurrences of x is greater than n/2, return true\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if x == arr[n/2] {\n        return true\n    } else if x < arr[n/2] {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    // find the first occurance of x\n    var first_occurance int\n    for i, v := range arr {\n        if v == x {\n            first_occurance = i\n            break\n        }\n    }\n\n    if (first_occurance + n/2) < n && arr[first_occurance + n/2] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    // find x in arr\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element\n    // if x is the majority element, return true\n    // if x is not the majority element, return false\n    // if x is not in arr, return false\n    // if x is in arr, check if x is the majority element",
    "    if n == 0 {\n        return false\n    }\n\n    if arr[n/2] == x {\n        return true\n    }\n\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    if arr[n/2] == x {\n        return true\n    }\n\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n\n    return is_majority(arr[n/2:], n - n/2, x)\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n\n    if n % 2 == 0 {\n        return arr[n/2] == x && arr[n/2-1] == x\n    } else {\n        return arr[n/2] == x\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurance of x\n    first_occurance := -1\n    for i, v := range arr {\n        if v == x {\n            first_occurance = i\n            break\n        }\n    }\n\n    if first_occurance == -1 {\n        return false\n    }\n\n    // check if the occurance is more than n/2\n    if first_occurance + n/2 < n && arr[first_occurance + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            break\n        }\n    }\n\n    if i == n {\n        return false\n    }\n\n    for j = i+1; j < n; j++ {\n        if arr[j] != x {\n            break\n        }\n    }\n\n    if j - i > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, n, x)\n    // if x is not present at all, return false\n    if first == -1 {\n        return false\n    }\n    // if there is at least n/2 occurences of x, return true\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n\n    if arr[mid] == x {\n        return true\n    }\n\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if x == arr[n/2] {\n        return true\n    }\n\n    if x < arr[n/2] {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n\n    // if x is not found\n    if first == -1 {\n        return false\n    }\n\n    // if x is found, check if it occurs more than n/2 times\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if the last occurrence of x is greater than n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var count int = 0\n    for _, num := range arr {\n        if num == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    i := 0\n    for i < n {\n        if arr[i] == x {\n            break\n        }\n        i++\n    }\n\n    // if x is the last element, it can't be the majority element\n    if i == n-1 {\n        return false\n    }\n\n    // if the next element is not x, it can't be the majority element\n    if arr[i+1] != x {\n        return false\n    }\n\n    // if there are more than n/2 elements left, x is the majority element\n    if n/2 <= n-i-1 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    if (first + n/2) <= (n - 1) && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // Find the first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // If x is not present in the array, return false\n    if i == n {\n        return false\n    }\n\n    // Find the last occurrence of x\n    j := n - 1\n    for j >= 0 && arr[j] != x {\n        j--\n    }\n\n    // If x is not present in the array, return false\n    if j == -1 {\n        return false\n    }\n\n    // If the number of occurrences of x is more than n/2, return true\n    if (j - i + 1) > n/2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // if x is not present in arr[]\n    if i == n {\n        return false\n    }\n\n    // check if there is a majority element\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if x == arr[n/2] {\n        return true\n    } else if x < arr[n/2] {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if the element is present more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    // find the first occurence of x\n    first := -1\n    left := 0\n    right := n - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if arr[mid] == x {\n            first = mid\n            right = mid - 1\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := -1\n    left = 0\n    right = n - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if arr[mid] == x {\n            last = mid\n            left = mid + 1\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    return last - first + 1 > n / 2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n\n    // if first occurrence is not present, return false\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := find_last(arr, 0, n-1, x)\n\n    // if last occurrence is not present, return false\n    if last == -1 {\n        return false\n    }\n\n    // if last occurrence is greater than first occurrence, return true\n    if last - first + 1 > n/2 {\n        return true\n    }\n\n    return false\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first_occurrence := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first_occurrence = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if first_occurrence == -1 {\n        return false\n    }\n    if first_occurrence + n/2 < n && arr[first_occurrence + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := binary_search(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := binary_search(arr, 0, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // if last occurs more than n/2 times, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    if n % 2 == 0 {\n        return is_majority(arr[:n/2], n/2, x) || is_majority(arr[n/2:], n/2, x)\n    } else {\n        return is_majority(arr[:n/2], n/2, x) || is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    } else if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is present more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return last - first + 1 > n / 2\n}\n"
  ]
}