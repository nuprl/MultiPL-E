{
  "name": "mbpp_223_is_majority",
  "language": "go_test.go",
  "prompt": "package is_majority_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr []int, n int, x int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Majority(t *testing.T) {\n  candidate := is_majority\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 3, 3, 3, 10}, 7, 3), expected: true },\n     { actual: candidate([]int{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), expected: false },\n     { actual: candidate([]int{1, 1, 1, 2, 2}, 5, 1), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2}, 5, 1), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // Write your code here\n    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var mid int = n / 2\n    if arr[mid] == x {\n        return (mid + n/2) < n\n    }\n\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n    return is_majority(arr[:mid], mid, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    first := binary_search(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := binary_search(arr, first, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurences is greater than n/2\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, 0, n-1, x)\n    // if x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n"
  ]
}