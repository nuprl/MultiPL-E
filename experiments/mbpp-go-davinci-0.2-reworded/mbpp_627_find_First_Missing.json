{
  "name": "mbpp_627_find_First_Missing",
  "language": "go_test.go",
  "prompt": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    // find the first missing number from a sorted list of natural numbers\n    // array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n",
    "    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    var i int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return i\n}\n",
    "    // Write your code here\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n",
    "    // if the array is empty, return 1\n    if len(array) == 0 {\n        return 1\n    }\n\n    // if the array is not empty, find the first missing number\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n\n    // if the array is not empty and there is no missing number, return the last number + 1\n    return array[len(array) - 1] + 1\n}\n",
    "    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n",
    "    var i int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return i\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 0\n    }\n\n    if array[0] != 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    // find the smallest missing number from a sorted list of natural numbers.\n    // array is sorted and contains natural numbers\n    // return the smallest missing number\n    // if no missing number, return -1\n    // if array is nil, return -1\n    if array == nil {\n        return -1\n    }\n    if len(array) == 0 {\n        return -1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n"
  ]
}