{
  "name": "mbpp_580_extract_even",
  "language": "go_test.go",
  "prompt": "package extract_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uneven elements in the nested mixed list.\nfunc extract_even(test_tuple []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "func TestExtract_Even(t *testing.T) {\n  candidate := extract_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{4, 5, []interface{}{7, 6, []interface{}{2, 4}}, 6, 8}), expected: []interface{}{4, []interface{}{6, []interface{}{2, 4}}, 6, 8} },\n     { actual: candidate([]interface{}{5, 6, []interface{}{8, 7, []interface{}{4, 8}}, 7, 9}), expected: []interface{}{6, []interface{}{8, []interface{}{4, 8}}} },\n     { actual: candidate([]interface{}{5, 6, []interface{}{9, 8, []interface{}{4, 6}}, 8, 10}), expected: []interface{}{6, []interface{}{8, []interface{}{4, 6}}, 8, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for _, v := range test_tuple {\n        switch v.(type) {\n        case int:\n            if v.(int) % 2 == 0 {\n                result = append(result, v)\n            }\n        case []interface{}:\n            result = append(result, extract_even(v.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tuple {\n        switch elem.(type) {\n        case int:\n            if elem.(int) % 2 == 0 {\n                result = append(result, elem)\n            }\n        case []interface{}:\n            result = append(result, extract_even(elem.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tuple {\n        switch v.(type) {\n        case int:\n            if v.(int) % 2 == 0 {\n                result = append(result, v)\n            }\n        case []interface{}:\n            result = append(result, extract_even(v.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tuple {\n        switch item.(type) {\n        case int:\n            if item.(int) % 2 == 0 {\n                result = append(result, item)\n            }\n        case []interface{}:\n            result = append(result, extract_even(item.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tuple {\n        switch v.(type) {\n        case int:\n            if v.(int) % 2 == 0 {\n                result = append(result, v)\n            }\n        case []interface{}:\n            result = append(result, extract_even(v.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, value := range test_tuple {\n        switch value.(type) {\n        case int:\n            if value.(int) % 2 == 0 {\n                result = append(result, value)\n            }\n        case []interface{}:\n            result = append(result, extract_even(value.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tuple {\n        switch item.(type) {\n        case int:\n            if item.(int) % 2 == 0 {\n                result = append(result, item)\n            }\n        case []interface{}:\n            result = append(result, extract_even(item.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n            case int:\n                if element.(int) % 2 == 0 {\n                    result = append(result, element)\n                }\n            case []interface{}:\n                result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, value := range test_tuple {\n        switch value.(type) {\n        case []interface{}:\n            result = append(result, extract_even(value.([]interface{})))\n        case int:\n            if value.(int) % 2 == 0 {\n                result = append(result, value)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n            case int:\n                if element.(int) % 2 == 0 {\n                    result = append(result, element)\n                }\n            case []interface{}:\n                result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tuple {\n        switch element.(type) {\n        case int:\n            if element.(int) % 2 == 0 {\n                result = append(result, element)\n            }\n        case []interface{}:\n            result = append(result, extract_even(element.([]interface{})))\n        }\n    }\n    return result\n}\n"
  ]
}