{
  "name": "mbpp_779_unique_sublists",
  "language": "go_test.go",
  "prompt": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of lists within a list. The function should return a map, where every list is turned to a list, and the value of the list is the number of its occurrences.\nfunc unique_sublists(list1 interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}, []int{4, 5}, []int{6, 7}}), expected: map[[]int]int{[]interface{}{1, 2}: 1, []interface{}{3, 4}: 1, []interface{}{4, 5}: 1, []interface{}{6, 7}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v]++\n        }\n    case []int:\n        for _, v := range list1.([]int) {\n            result[v]++\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            result[v]++\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = unique_sublists(v).(int)\n        }\n    default:\n        list2 = 1\n    }\n    return list2\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            result := make(map[interface{}]int)\n            for _, item := range list {\n                result[item]++\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v]++\n        }\n    case []int:\n        for _, v := range list1.([]int) {\n            result[v]++\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            result[v]++\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        if len(list) == 0 {\n            return map[interface{}]int{}\n        }\n        result := map[interface{}]int{}\n        for _, v := range list {\n            result[v] = result[v] + 1\n        }\n        return result\n    default:\n        return map[interface{}]int{}\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list1_map := make(map[interface{}]int)\n            for _, v := range list1.([]interface{}) {\n                list1_map[v] += 1\n            }\n            return list1_map\n        default:\n            return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1_map := make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list1_map[v] += 1\n        }\n        return list1_map\n    default:\n        return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1 := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list1 {\n            switch v.(type) {\n            case []interface{}:\n                v := v.([]interface{})\n                result[v]++\n            }\n        }\n        return result\n    }\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v]++\n        }\n    case []int:\n        for _, v := range list1.([]int) {\n            result[v]++\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            result[v]++\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            var result map[interface{}]int = make(map[interface{}]int)\n            for _, v := range list {\n                result[v]++\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[unique_sublists(v)]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            m := make(map[interface{}]int)\n            for _, v := range list {\n                m[v]++\n            }\n            return m\n        default:\n            return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return list1\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v] += 1\n        }\n    }\n    return result\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, len(list1.([]interface{})))\n        for i, v := range list1.([]interface{}) {\n            list2.([]interface{})[i] = unique_sublists(v)\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1_ := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list1_ {\n            result[v] += 1\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            result := make(map[interface{}]int)\n            for _, item := range list {\n                result[item]++\n            }\n            return result\n        default:\n            return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = v.(int)\n        }\n    }\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case [][]interface{}:\n        list2 = [][]interface{}{}\n        for _, v := range list1.([][]interface{}) {\n            list2 = append(list2.([][]interface{}), unique_sublists(v).([]interface{}))\n        }\n    case map[interface{}]interface{}:\n        list2 = map[interface{}]interface{}{}\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1_ := list1.([]interface{})\n        map_ := make(map[interface{}]int)\n        for _, v := range list1_ {\n            map_[v]++\n        }\n        return map_\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[unique_sublists(v)]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item] += 1\n        }\n        return result\n    default:\n        return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return list1\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    var list2 interface{}\n    list2 = list1\n    for {\n        if list2 == nil {\n            break\n        }\n        result[list2]++\n        list2 = list2.([]interface{})[1:]\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1 := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list1 {\n            if _, ok := result[item]; ok {\n                result[item] += 1\n            } else {\n                result[item] = 1\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        return unique_sublists_list(list1.([]interface{}))\n    default:\n        return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item] += 1\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        if _, ok := result[v]; ok {\n            result[v] += 1\n        } else {\n            result[v] = 1\n        }\n    }\n    return result\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = v.(int)\n        }\n    }\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = unique_sublists(v).(int)\n        }\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[unique_sublists(v)] += 1\n        }\n        return result\n    default:\n        return list1\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, item1 := range list1.([]interface{}) {\n            item2 := unique_sublists(item1)\n            list2.(map[interface{}]int)[item2]++\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case int:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    }\n    return list2\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result = make(map[interface{}]int)\n    var list = list1.([]interface{})\n    var sublist []interface{}\n    for i := 0; i < len(list); i++ {\n        sublist = list[i:len(list)]\n        result[sublist] = result[sublist] + 1\n    }\n    return result\n}\n",
    "    // Your code goes here\n    return nil\n}\n"
  ]
}