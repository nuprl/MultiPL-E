{
  "name": "mbpp_560_union_elements",
  "language": "go_test.go",
  "prompt": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, i := range test_tup1 {\n        union_list = append(union_list, i)\n    }\n    for _, i := range test_tup2 {\n        union_list = append(union_list, i)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        for j := 0; j < len(result); j++ {\n            if test_tup2[i] == result[j] {\n                break\n            }\n            if j == len(result) - 1 {\n                result = append(result, test_tup2[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map map[interface{}]int\n    tup1_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        tup1_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        if _, ok := tup1_map[v]; ok {\n            continue\n        } else {\n            tup1_map[v] = 1\n        }\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmprd1foeoy_test.go:44: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmprd1foeoy_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmprd1foeoy_test.go:44: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    var union_set_map = make(map[interface{}]bool)\n    var union_set_map_2 = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_set_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_set_map_2[val] = true\n    }\n    for key, _ := range union_set_map {\n        union_set = append(union_set, key)\n    }\n    for key, _ := range union_set_map_2 {\n        union_set = append(union_set, key)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp2wlb__zr_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp2wlb__zr_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp2wlb__zr_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, item1 := range test_tup1 {\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                union_tup = append(union_tup, item1)\n            }\n        }\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkvvnjqk__test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkvvnjqk__test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkvvnjqk__test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]int\n    union_map = make(map[interface{}]int)\n    for _, elem := range test_tup1 {\n        union_map[elem] = 1\n    }\n    for _, elem := range test_tup2 {\n        union_map[elem] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa6y3hlt3_test.go:40: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa6y3hlt3_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa6y3hlt3_test.go:40: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        result = append(result, val1)\n    }\n    for _, val2 := range test_tup2 {\n        if !contains(result, val2) {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsja8i9o_test.go:15:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, elem := range test_tup1 {\n        union_tup = append(union_tup, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_tup = append(union_tup, elem)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp2jqxi1jv_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp2jqxi1jv_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp2jqxi1jv_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, i := range test_tup1 {\n        test_tup3 = append(test_tup3, i)\n    }\n    for _, i := range test_tup2 {\n        test_tup3 = append(test_tup3, i)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v1 := range test_tup1 {\n        union_list = append(union_list, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_list = append(union_list, v2)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] == test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i += 1\n            j += 1\n        } else if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i += 1\n        } else {\n            result = append(result, test_tup2[j])\n            j += 1\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i += 1\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j += 1\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpma8fdrt6_test.go:17:32: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp9m2_xoen_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp9m2_xoen_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp9m2_xoen_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a map to store the elements of the first list\n    test_map := make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        test_map[val] = true\n    }\n    // Create a list to store the union of the two lists\n    union_list := make([]interface{}, 0)\n    for _, val := range test_tup2 {\n        if _, ok := test_map[val]; !ok {\n            union_list = append(union_list, val)\n        }\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpdgc_3scf_test.go:40: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpdgc_3scf_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpdgc_3scf_test.go:40: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        if !is_in_tup(union_tup, v) {\n            union_tup = append(union_tup, v)\n        }\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeyvunnd9_test.go:15:13: undefined: is_in_tup\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, item := range test_tup1 {\n        union_list = append(union_list, item)\n    }\n    for _, item := range test_tup2 {\n        union_list = append(union_list, item)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, i := range test_tup1 {\n        test_tup3 = append(test_tup3, i)\n    }\n    for _, i := range test_tup2 {\n        test_tup3 = append(test_tup3, i)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var test_tup1_len int = len(test_tup1)\n    var test_tup2_len int = len(test_tup2)\n    for i = 0; i < test_tup1_len; i++ {\n        result = append(result, test_tup1[i])\n    }\n    for j = 0; j < test_tup2_len; j++ {\n        for k = 0; k < test_tup1_len; k++ {\n            if test_tup2[j] == test_tup1[k] {\n                break\n            }\n        }\n        if k == test_tup1_len {\n            result = append(result, test_tup2[j])\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var set1 = make(map[interface{}]bool)\n    var set2 = make(map[interface{}]bool)\n\n    for _, item := range test_tup1 {\n        set1[item] = true\n    }\n    for _, item := range test_tup2 {\n        set2[item] = true\n    }\n\n    for item := range set1 {\n        result = append(result, item)\n    }\n    for item := range set2 {\n        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi0nptav3_test.go:45: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi0nptav3_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi0nptav3_test.go:45: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        tup1_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = 1\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmplyaitj0l_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmplyaitj0l_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmplyaitj0l_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=11) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, elem := range test_tup1 {\n        union_list = append(union_list, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_list = append(union_list, elem)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n\n    for i < tup1_len {\n        union_tup = append(union_tup, test_tup1[i])\n        i++\n    }\n\n    for j < tup2_len {\n        union_tup = append(union_tup, test_tup2[j])\n        j++\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2d9gz3v1_test.go:17:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp2d9gz3v1_test.go:20:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        result = append(result, val1)\n    }\n    for _, val2 := range test_tup2 {\n        result = append(result, val2)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp561_zms2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp561_zms2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp561_zms2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, item := range test_tup1 {\n        union_list = append(union_list, item)\n    }\n    for _, item := range test_tup2 {\n        union_list = append(union_list, item)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpsos46zpu_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, i := range test_tup1 {\n        union_list = append(union_list, i)\n    }\n    for _, i := range test_tup2 {\n        union_list = append(union_list, i)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp53vfy0ml_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, elem := range test_tup1 {\n        union_list = append(union_list, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_list = append(union_list, elem)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var len1 int\n    var len2 int\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    for i = 0; i < len1; i++ {\n        result = append(result, test_tup1[i])\n    }\n    for j = 0; j < len2; j++ {\n        for k = 0; k < len1; k++ {\n            if test_tup2[j] == test_tup1[k] {\n                break\n            }\n        }\n        if k == len1 {\n            result = append(result, test_tup2[j])\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, element := range test_tup1 {\n        tup1_map[element] = true\n    }\n    for _, element := range test_tup2 {\n        tup2_map[element] = true\n    }\n\n    for key, _ := range tup1_map {\n        result = append(result, key)\n    }\n    for key, _ := range tup2_map {\n        result = append(result, key)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpbj49m1o8_test.go:45: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpbj49m1o8_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpbj49m1o8_test.go:45: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, value := range test_tup1 {\n        result = append(result, value)\n    }\n    for _, value := range test_tup2 {\n        result = append(result, value)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp9p5ox83w_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp9p5ox83w_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp9p5ox83w_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    test_tup3 = append(test_tup3, test_tup1...)\n    test_tup3 = append(test_tup3, test_tup2...)\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0h18awy4_test.go:31: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0h18awy4_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0h18awy4_test.go:31: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var i, j int\n    for i = 0; i < len(test_tup1); i++ {\n        union_list = append(union_list, test_tup1[i])\n    }\n    for j = 0; j < len(test_tup2); j++ {\n        union_list = append(union_list, test_tup2[j])\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp9qirbvwg_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp9qirbvwg_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp9qirbvwg_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_set = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_set[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_set[val] = 1\n    }\n    for key, _ := range union_set {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp1_8ysd1f_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp1_8ysd1f_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp1_8ysd1f_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // create a map to store the elements\n    var elements_map = make(map[interface{}]int)\n    // create a slice to store the elements\n    var elements_slice []interface{}\n\n    // iterate through the first list\n    for _, element := range test_tup1 {\n        // if the element is not in the map, add it to the map\n        if _, ok := elements_map[element]; !ok {\n            elements_map[element] = 1\n        }\n    }\n\n    // iterate through the second list\n    for _, element := range test_tup2 {\n        // if the element is not in the map, add it to the map\n        if _, ok := elements_map[element]; !ok {\n            elements_map[element] = 1\n        }\n    }\n\n    // iterate through the map and add the keys to the slice\n    for key, _ := range elements_map {\n        elements_slice = append(elements_slice, key)\n    }\n\n    // return the slice\n    return elements_slice\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpnaxl09aq_test.go:55: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpnaxl09aq_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpnaxl09aq_test.go:55: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var map_tup1 = make(map[interface{}]int)\n    var map_tup2 = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        map_tup1[v] = 1\n    }\n    for _, v := range test_tup2 {\n        map_tup2[v] = 1\n    }\n    for k, _ := range map_tup1 {\n        result = append(result, k)\n    }\n    for k, _ := range map_tup2 {\n        if _, ok := map_tup1[k]; !ok {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    for _, elem := range test_tup1 {\n        union_set = append(union_set, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_set = append(union_set, elem)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for _, val := range test_tup1 {\n        result_tup = append(result_tup, val)\n    }\n    for _, val := range test_tup2 {\n        result_tup = append(result_tup, val)\n    }\n    return result_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpecxpweu__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpecxpweu__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpecxpweu__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        result = append(result, v1)\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(result, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnsmff03t_test.go:15:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // create a map to store the elements\n    var union_map = make(map[interface{}]int)\n    var union_list []interface{}\n    // iterate through the first list\n    for _, value := range test_tup1 {\n        union_map[value] = 1\n    }\n    // iterate through the second list\n    for _, value := range test_tup2 {\n        union_map[value] = 1\n    }\n    // iterate through the map and append the keys to the list\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmprvfkehv6_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmprvfkehv6_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmprvfkehv6_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // create a map to store the elements of the first list\n    test_map := make(map[interface{}]bool)\n    // create a slice to store the union of the two lists\n    union_slice := make([]interface{}, 0)\n\n    // iterate through the first list and add each element to the map\n    for _, element := range test_tup1 {\n        test_map[element] = true\n    }\n\n    // iterate through the second list and add each element to the map\n    for _, element := range test_tup2 {\n        test_map[element] = true\n    }\n\n    // iterate through the map and add each element to the slice\n    for key, _ := range test_map {\n        union_slice = append(union_slice, key)\n    }\n\n    return union_slice\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpcz4kskzx_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union []interface{}\n    union = append(test_tup1, test_tup2...)\n    return union\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi8nbyajs_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi8nbyajs_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi8nbyajs_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, item := range test_tup1 {\n        if !contains(union_list, item) {\n            union_list = append(union_list, item)\n        }\n    }\n    for _, item := range test_tup2 {\n        if !contains(union_list, item) {\n            union_list = append(union_list, item)\n        }\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgxddl4e4_test.go:12:13: undefined: contains\n/tmp/tmpgxddl4e4_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var i, j int\n    var tup1_len, tup2_len int = len(test_tup1), len(test_tup2)\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_list = append(union_list, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_list = append(union_list, test_tup2[j])\n            j++\n        } else {\n            union_list = append(union_list, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < tup1_len {\n        union_list = append(union_list, test_tup1[i:]...)\n    }\n    if j < tup2_len {\n        union_list = append(union_list, test_tup2[j:]...)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfzb5emmc_test.go:14:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpfzb5emmc_test.go:17:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v1 := range test_tup1 {\n        test_tup3 = append(test_tup3, v1)\n    }\n    for _, v2 := range test_tup2 {\n        test_tup3 = append(test_tup3, v2)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp9_btto7x_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp9_btto7x_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp9_btto7x_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n\n    for key, _ := range tup1_map {\n        result = append(result, key)\n    }\n\n    for key, _ := range tup2_map {\n        result = append(result, key)\n    }\n\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0mpp5h04_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=10) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0mpp5h04_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0mpp5h04_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        union_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_map[v] = 1\n    }\n    for k, _ := range union_map {\n        union_list = append(union_list, k)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp_jn2tqwp_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp_jn2tqwp_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]interface{}\n    union_map = make(map[interface{}]interface{})\n    for _, val := range test_tup1 {\n        union_map[val] = val\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = val\n    }\n    for _, val := range union_map {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpl_5b_ieb_test.go:40: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpl_5b_ieb_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpl_5b_ieb_test.go:40: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var test_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        test_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        test_map[v] = 1\n    }\n    for k, _ := range test_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp74plsfj4_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp74plsfj4_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp74plsfj4_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < tup1_len {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < tup2_len {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdan5fduw_test.go:17:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpdan5fduw_test.go:20:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        union_tup_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_tup_map[v] = 1\n    }\n    for k, _ := range union_tup_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpdofb8p_s_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpdofb8p_s_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    var test_tup4 []interface{}\n    var test_tup5 []interface{}\n    var test_tup6 []interface{}\n    var test_tup7 []interface{}\n    var test_tup8 []interface{}\n    var test_tup9 []interface{}\n    var test_tup10 []interface{}\n    var test_tup11 []interface{}\n    var test_tup12 []interface{}\n    var test_tup13 []interface{}\n    var test_tup14 []interface{}\n    var test_tup15 []interface{}\n    var test_tup16 []interface{}\n    var test_tup17 []interface{}\n    var test_tup18 []interface{}\n    var test_tup19 []interface{}\n    var test_tup20 []interface{}\n    var test_tup21 []interface{}\n    var test_tup22 []interface{}\n    var test_tup23 []interface{}\n    var test_tup24 []interface{}\n    var test_tup25 []interface{}\n    var test_tup26 []interface{}\n    var test_tup27 []interface{}\n    var test_tup28 []interface{}\n    var test_tup29 []interface{}\n    var test_tup30 []interface{}\n    var test_tup31 []interface{}\n    var test_tup32 []interface{}\n    var test_tup33 []interface{}\n    var test_tup34 []interface{}\n    var test_tup35 []interface{}\n    var test_tup36 []interface{}\n    var test_tup37 []interface{}\n    var test_tup38 []interface{}\n    var test_tup39 []interface{}\n    var test_tup40 []interface{}\n    var test_tup41 []interface{}\n    var test_tup42 []interface{}\n    var test_tup43 []interface{}\n    var test_tup44 []interface{}\n    var test_tup45\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7y08k84__test.go:52:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var test_tup1_len int = len(test_tup1)\n    var test_tup2_len int = len(test_tup2)\n    var test_tup1_val interface{}\n    var test_tup2_val interface{}\n\n    for i = 0; i < test_tup1_len; i++ {\n        test_tup1_val = test_tup1[i]\n        for j = 0; j < test_tup2_len; j++ {\n            test_tup2_val = test_tup2[j]\n            if test_tup1_val == test_tup2_val {\n                result = append(result, test_tup1_val)\n                break\n            }\n        }\n    }\n\n    for i = 0; i < test_tup1_len; i++ {\n        test_tup1_val = test_tup1[i]\n        for j = 0; j < test_tup2_len; j++ {\n            test_tup2_val = test_tup2[j]\n            if test_tup1_val == test_tup2_val {\n                break\n            }\n        }\n        if j == test_tup2_len {\n            result = append(result, test_tup1_val)\n        }\n    }\n\n    for i = 0; i < test_tup2_len; i++ {\n        test_tup2_val = test_tup2[i]\n        for j = 0; j < test_tup1_len; j++ {\n            test_tup1_val = test_tup1[j]\n            if test_tup2_val == test_tup1_val {\n                break\n            }\n        }\n        if j == test_tup1_len {\n            result = append(result, test_tup2_val)\n        }\n    }\n\n    for i = 0; i < len(result); i++ {\n        for j = i\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpb_6t12rp_test.go:58:6: expected '(', found TestUnion_Elements\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // create a map to store the elements of the first list\n    var map_tup1 = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        map_tup1[v] = 1\n    }\n\n    // create a map to store the elements of the second list\n    var map_tup2 = make(map[interface{}]int)\n    for _, v := range test_tup2 {\n        map_tup2[v] = 1\n    }\n\n    // create a map to store the union of the two lists\n    var map_union = make(map[interface{}]int)\n    for k, _ := range map_tup1 {\n        map_union[k] = 1\n    }\n    for k, _ := range map_tup2 {\n        map_union[k] = 1\n    }\n\n    // create a list to store the union of the two lists\n    var list_union []interface{}\n    for k, _ := range map_union {\n        list_union = append(list_union, k)\n    }\n\n    return list_union\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpov4zun2t_test.go:55: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=3) %!s(int=7) %!s(int=10) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpov4zun2t_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpov4zun2t_test.go:55: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, element := range test_tup1 {\n        result = append(result, element)\n    }\n    for _, element := range test_tup2 {\n        result = append(result, element)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]int\n\n    union_map = make(map[interface{}]int)\n    for _, ele := range test_tup1 {\n        union_map[ele] = 1\n    }\n    for _, ele := range test_tup2 {\n        union_map[ele] = 1\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppzfdrpnd_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n\n    for _, v := range test_tup1 {\n        union_map[v] = true\n    }\n\n    for _, v := range test_tup2 {\n        union_map[v] = true\n    }\n\n    for k, _ := range union_map {\n        union_list = append(union_list, k)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp3akb3dni_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp3akb3dni_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpylyi67g8_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpxwyeuieq_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpxwyeuieq_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpxwyeuieq_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, i := range test_tup1 {\n        test_tup3 = append(test_tup3, i)\n    }\n    for _, i := range test_tup2 {\n        test_tup3 = append(test_tup3, i)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i, j = 0, 0; i < len(test_tup1) && j < len(test_tup2); {\n        if test_tup1[i] == test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        } else if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else {\n            result = append(result, test_tup2[j])\n            j++\n        }\n    }\n    for ; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i])\n    }\n    for ; j < len(test_tup2); j++ {\n        result = append(result, test_tup2[j])\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi_35gxbx_test.go:17:32: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, val := range test_tup1 {\n        test_tup3 = append(test_tup3, val)\n    }\n    for _, val := range test_tup2 {\n        test_tup3 = append(test_tup3, val)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_index int = 0\n    var tup2_index int = 0\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    for tup1_index < tup1_len && tup2_index < tup2_len {\n        if test_tup1[tup1_index] < test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n        } else if test_tup1[tup1_index] > test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup2[tup2_index])\n            tup2_index++\n        } else {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n            tup2_index++\n        }\n    }\n    if tup1_index < tup1_len {\n        union_tup = append(union_tup, test_tup1[tup1_index:]...)\n    }\n    if tup2_index < tup2_len {\n        union_tup = append(union_tup, test_tup2[tup2_index:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122642,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm1zg7d6k_test.go:16:34: invalid operation: test_tup1[tup1_index] < test_tup2[tup2_index] (operator < not defined on interface)\n/tmp/tmpm1zg7d6k_test.go:19:41: invalid operation: test_tup1[tup1_index] > test_tup2[tup2_index] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]bool = make(map[interface{}]bool)\n    for _, item := range test_tup1 {\n        union_map[item] = true\n    }\n    for _, item := range test_tup2 {\n        union_map[item] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpee2dwbyn_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpee2dwbyn_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpee2dwbyn_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, item := range test_tup1 {\n        union_map[item] = true\n    }\n    for _, item := range test_tup2 {\n        union_map[item] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpy0eprjty_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpy0eprjty_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpy0eprjty_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union []interface{}\n    var union_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union = append(union, key)\n    }\n    return union\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpgy7zhdnz_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpgy7zhdnz_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, element := range test_tup1 {\n        result = append(result, element)\n    }\n    for _, element := range test_tup2 {\n        result = append(result, element)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    result = append(result, test_tup1...)\n    result = append(result, test_tup2...)\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp5xq52od1_test.go:31: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp5xq52od1_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp5xq52od1_test.go:31: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map map[interface{}]bool = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = true\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpv63zmifp_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpv63zmifp_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n\n    for _, element := range test_tup1 {\n        union_map[element] = 1\n    }\n\n    for _, element := range test_tup2 {\n        union_map[element] = 1\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpfnx5dgro_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var set map[interface{}]bool\n    set = make(map[interface{}]bool)\n    for _, value := range test_tup1 {\n        set[value] = true\n    }\n    for _, value := range test_tup2 {\n        set[value] = true\n    }\n    for key, _ := range set {\n        result = append(result, key)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpzqi9n79r_test.go:40: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpzqi9n79r_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, elem := range test_tup1 {\n        union_list = append(union_list, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_list = append(union_list, elem)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        union_list = append(union_list, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        union_list = append(union_list, test_tup2[i])\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpax_0e1o8_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpax_0e1o8_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpax_0e1o8_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, i := range test_tup1 {\n        test_tup3 = append(test_tup3, i)\n    }\n    for _, i := range test_tup2 {\n        test_tup3 = append(test_tup3, i)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        if _, ok := union_map[val]; !ok {\n            union_map[val] = 1\n        }\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpp5x1on3m_test.go:41: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpp5x1on3m_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpp5x1on3m_test.go:41: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n\n    for _, element := range test_tup1 {\n        union_map[element] = true\n    }\n    for _, element := range test_tup2 {\n        union_map[element] = true\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpv0nd6pgt_test.go:41: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpv0nd6pgt_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpv0nd6pgt_test.go:41: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    for _, val := range test_tup1 {\n        union_set = append(union_set, val)\n    }\n    for _, val := range test_tup2 {\n        union_set = append(union_set, val)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp58c9u6xw_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp58c9u6xw_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp58c9u6xw_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var temp_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        temp_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        temp_map[v] = 1\n    }\n    for k, _ := range temp_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptnsahh41_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptnsahh41_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_list_map map[interface{}]bool = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_list_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_list_map[val] = true\n    }\n    for key, _ := range union_list_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, element := range test_tup1 {\n        union_map[element] = 1\n    }\n    for _, element := range test_tup2 {\n        union_map[element] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpphcbsymb_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1 []interface{}\n    var tup2 []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var tup1_elem interface{}\n    var tup2_elem interface{}\n    var tup1_elem_int int\n    var tup2_elem_int int\n    var tup1_elem_str string\n    var tup2_elem_str string\n    var tup1_elem_float64 float64\n    var tup2_elem_float64 float64\n    var tup1_elem_bool bool\n    var tup2_elem_bool bool\n    var tup1_elem_type string\n    var tup2_elem_type string\n    var tup1_elem_type_int bool\n    var tup2_elem_type_int bool\n    var tup1_elem_type_str bool\n    var tup2_elem_type_str bool\n    var tup1_elem_type_float64 bool\n    var tup2_elem_type_float64 bool\n    var tup1_elem_type_bool bool\n    var tup2_elem_type_bool bool\n\n    // Check if the two tuples are empty\n    if tup1_len == 0 && tup2_len == 0 {\n        return result\n    } else if tup1_len == 0 {\n        return test_tup2\n    } else if tup2_len == 0 {\n        return test_tup1\n    }\n\n    // Check if the two tuples are the same\n    if tup1_len == tup2_len {\n        for i = 0; i < tup1_len; i++ {\n            tup1_elem = test_tup1[i]\n            tup2_elem = test_tup2[i]\n            tup1_e\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgbtctqsc_test.go:54:6: expected '(', found TestUnion_Elements\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_set = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_set[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_set[val] = true\n    }\n    for key, _ := range union_set {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpwpp_aztx_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpwpp_aztx_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, elem := range test_tup1 {\n        union_map[elem] = true\n    }\n    for _, elem := range test_tup2 {\n        union_map[elem] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4_sk09fs_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4_sk09fs_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4_sk09fs_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var result_map map[interface{}]int = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        result_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        result_map[v] = 1\n    }\n    for k, _ := range result_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpiqmykzvb_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        if !contains(result, i) {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        if !contains(result, i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj_j4f0v4_test.go:12:13: undefined: contains\n/tmp/tmpj_j4f0v4_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ogfgsa9_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp4ogfgsa9_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup []interface{}\n    for _, v := range test_tup1 {\n        test_tup = append(test_tup, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp08sud1st_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp08sud1st_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp08sud1st_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i = 0; i < len(test_tup1); i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for j = 0; j < len(test_tup2); j++ {\n        union_tup = append(union_tup, test_tup2[j])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpsd5f_q2a_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpsd5f_q2a_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpsd5f_q2a_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq_xqyr0v_test.go:15:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a map to store the elements of the union\n    union_map := make(map[interface{}]int)\n\n    // Add the elements of the first list to the map\n    for _, element := range test_tup1 {\n        union_map[element] = 1\n    }\n\n    // Add the elements of the second list to the map\n    for _, element := range test_tup2 {\n        union_map[element] = 1\n    }\n\n    // Create a slice to store the union elements\n    union_slice := make([]interface{}, len(union_map))\n\n    // Add the elements of the map to the slice\n    index := 0\n    for key, _ := range union_map {\n        union_slice[index] = key\n        index++\n    }\n\n    return union_slice\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp_k_52plx_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp_k_52plx_test.go:51: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_set = append(union_set, key)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpd4qwm4iw_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpd4qwm4iw_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpzkcg337b_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    var union_map map[interface{}]bool = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n\n    for key, _ := range union_map {\n        union_set = append(union_set, key)\n    }\n\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, elem := range test_tup1 {\n        union_list = append(union_list, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_list = append(union_list, elem)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp7okt3t0y_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, val := range test_tup1 {\n        test_tup3 = append(test_tup3, val)\n    }\n    for _, val := range test_tup2 {\n        test_tup3 = append(test_tup3, val)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i = 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i])\n    }\n    for j = 0; j < len(test_tup2); j++ {\n        result = append(result, test_tup2[j])\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpfsjqymoo_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpfsjqymoo_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpfsjqymoo_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpz8kr2d0a_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpa39l72c2_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, element := range test_tup1 {\n        result = append(result, element)\n    }\n    for _, element := range test_tup2 {\n        result = append(result, element)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpx8n2ht09_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // create a map to store the elements\n    var test_map = make(map[interface{}]bool)\n    // create a slice to store the result\n    var result []interface{}\n    // iterate through the first list and store the elements in the map\n    for _, value := range test_tup1 {\n        test_map[value] = true\n    }\n    // iterate through the second list and store the elements in the map\n    for _, value := range test_tup2 {\n        test_map[value] = true\n    }\n    // iterate through the map and store the elements in the slice\n    for key, _ := range test_map {\n        result = append(result, key)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpjbpjm0uh_test.go:44: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpjbpjm0uh_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpjbpjm0uh_test.go:44: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, element := range test_tup1 {\n        union_list = append(union_list, element)\n    }\n    for _, element := range test_tup2 {\n        union_list = append(union_list, element)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp0y1404rd_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] == test_tup2[j] {\n            union = append(union, test_tup1[i])\n            i++\n            j++\n        } else if test_tup1[i] < test_tup2[j] {\n            union = append(union, test_tup1[i])\n            i++\n        } else {\n            union = append(union, test_tup2[j])\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        union = append(union, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        union = append(union, test_tup2[j])\n        j++\n    }\n    return union\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122644,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzw4zwtto_test.go:17:32: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    for _, elem := range test_tup1 {\n        union_set = append(union_set, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_set = append(union_set, elem)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpchtwfjcj_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkjjuuu23_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp94vp0ll2_test.go:41: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, value := range test_tup1 {\n        test_tup3 = append(test_tup3, value)\n    }\n    for _, value := range test_tup2 {\n        test_tup3 = append(test_tup3, value)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpjbluel_3_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpjbluel_3_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpjbluel_3_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_set = make(map[interface{}]bool)\n\n    for _, element := range test_tup1 {\n        union_set[element] = true\n    }\n\n    for _, element := range test_tup2 {\n        union_set[element] = true\n    }\n\n    for key, _ := range union_set {\n        union_list = append(union_list, key)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp7qsng0h4_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp7qsng0h4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = true\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmps9d7mrf9_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmps9d7mrf9_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpouolxrdo_test.go:42: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptsdfpym5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, i := range test_tup1 {\n        test_tup3 = append(test_tup3, i)\n    }\n    for _, i := range test_tup2 {\n        test_tup3 = append(test_tup3, i)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpck4bi9in_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpie0hdrcg_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp4e9f7we__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpt841tzer_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    union_list = append(test_tup1, test_tup2...)\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6fzwkq2z_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v := range test_tup1 {\n        union_list = append(union_list, v)\n    }\n    for _, v := range test_tup2 {\n        union_list = append(union_list, v)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpb_6q6b4h_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, v1 := range test_tup1 {\n        union_list = append(union_list, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_list = append(union_list, v2)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpys66jj7m_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    var test_tup4 []interface{}\n    var test_tup5 []interface{}\n    var test_tup6 []interface{}\n    var test_tup7 []interface{}\n    var test_tup8 []interface{}\n    var test_tup9 []interface{}\n    var test_tup10 []interface{}\n    var test_tup11 []interface{}\n    var test_tup12 []interface{}\n    var test_tup13 []interface{}\n    var test_tup14 []interface{}\n    var test_tup15 []interface{}\n    var test_tup16 []interface{}\n    var test_tup17 []interface{}\n    var test_tup18 []interface{}\n    var test_tup19 []interface{}\n    var test_tup20 []interface{}\n    var test_tup21 []interface{}\n    var test_tup22 []interface{}\n    var test_tup23 []interface{}\n    var test_tup24 []interface{}\n    var test_tup25 []interface{}\n    var test_tup26 []interface{}\n    var test_tup27 []interface{}\n    var test_tup28 []interface{}\n    var test_tup29 []interface{}\n    var test_tup30 []interface{}\n    var test_tup31 []interface{}\n    var test_tup32 []interface{}\n    var test_tup33 []interface{}\n    var test_tup34 []interface{}\n    var test_tup35 []interface{}\n    var test_tup36 []interface{}\n    var test_tup37 []interface{}\n    var test_tup38 []interface{}\n    var test_tup39 []interface{}\n    var test_tup40 []interface{}\n    var test_tup41 []interface{}\n    var test_tup42 []interface{}\n    var test_tup43 []interface{}\n    var test_tup44 []interface{}\n    var test_tup45\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122640,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7y08k84__test.go:52:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphb_0ikbq_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmphb_0ikbq_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var len1 int\n    var len2 int\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    for i = 0; i < len1; i++ {\n        result = append(result, test_tup1[i])\n    }\n    for j = 0; j < len2; j++ {\n        for k = 0; k < len1; k++ {\n            if test_tup2[j] == test_tup1[k] {\n                break\n            }\n        }\n        if k == len1 {\n            result = append(result, test_tup2[j])\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122638,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = 1\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122645,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkjjuuu23_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8tvdiw5_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpa8tvdiw5_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, val := range test_tup1 {\n        test_tup3 = append(test_tup3, val)\n    }\n    for _, val := range test_tup2 {\n        test_tup3 = append(test_tup3, val)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122643,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmppnysmwhi_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}