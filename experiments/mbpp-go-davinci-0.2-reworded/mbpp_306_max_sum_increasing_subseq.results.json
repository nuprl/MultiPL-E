{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "go_test.go",
  "prompt": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzeubtyy2_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzopip8ie_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzaz017kl_test.go:23:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2m9bl5s4_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if index == k {\n        return a[k]\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp43_58ej3_test.go:18:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczs2v2qg_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpms5rl7b9_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp92qqwt_0_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph798sk_6_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxgjquaxc_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp27_ba9kn_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaj4hx_wp_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpke2fy6kq_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplc62k074_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpxc_wrmhg_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpxc_wrmhg_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpxc_wrmhg_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v0l6bo_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ymp5uia_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == 0 {\n        return a[index]\n    }\n    if k < index {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgqbfeubz_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplc62k074_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpckl_zbh6_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] < a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi16pseo4_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8q8gjvs5_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpglbeny4j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpefmxbyty_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplc62k074_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzejzot98_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6fgkoki_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, index+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpije458k0_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjxq8s_om_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcr7v9bk_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm_1gm9tr_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5ijyzdd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6fgkoki_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpqc7dv374_test.go:38: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpqc7dv374_test.go:38: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpqc7dv374_test.go:38: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == 0 {\n        return a[0]\n    }\n    if k == 0 {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpih9aaj6x_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhvr781d_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ymp5uia_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkgqe8co7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqc9fln3j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=7)', got '%!s(int=105)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpta_lpd_e_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, index+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9odqlo35_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] >= a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn746fv0u_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k),\n                   max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppp6lfxq_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr9vlvsi_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if k <= index {\n        return 0\n    }\n\n    if a[index] >= a[k] {\n        return 0\n    }\n\n    return a[k] + max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp0b_8eryb_test.go:44: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp0b_8eryb_test.go:44: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp0b_8eryb_test.go:44: expected '%!s(int=71)', got '%!s(int=85)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplzsubmrt_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    if index > k {\n        return 0\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvd0yl9g8_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp45ng8y__test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpekduj418_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkgqe8co7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, index+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnxf32mr9_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpozke91wy_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpirt_a7ks_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhvr781d_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjn5zvibx_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpirt_a7ks_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if k < index {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo2e_0fqm_test.go:23:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp62_ldwln_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptut6a8b0_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprwn9nh27_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkgqe8co7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1)+a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm_k8mc3h_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpafbtfotg_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpafbtfotg_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpafbtfotg_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3lvfj7bn_test.go:40: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3lvfj7bn_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3lvfj7bn_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy9esoyva_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == 0 {\n        return a[0]\n    } else {\n        if k > index {\n            return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n        } else {\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n        }\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp9lpnuoou_test.go:36: expected '%!s(int=11)', got '%!s(int=207)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp9lpnuoou_test.go:36: expected '%!s(int=7)', got '%!s(int=104)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp9lpnuoou_test.go:36: expected '%!s(int=71)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v0l6bo_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpym3m682g_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, k, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7o1vdmsw_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bgtofps_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpfxii9v9p_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpfxii9v9p_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpfxii9v9p_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppqfw02l8_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k < index {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp3_pn_64_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if k >= n {\n        return 0\n    }\n    if index == 0 {\n        return a[k]\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k + 1) + a[k])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hgldnre_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index > n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu17k_oo1_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1xwd0v9_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb0qk8tcx_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxzlahj3l_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7lt5q48_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8m2z7ert_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprw3v80_a_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfy6fk3w8_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpirt_a7ks_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgesnvpn2_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpozke91wy_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy4bkqvfl_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcr7v9bk_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp27_ba9kn_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkee_5170_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcr7v9bk_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=7)', got '%!s(int=105)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplvudmlah_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpank942dr_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpank942dr_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpke2fy6kq_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy9esoyva_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22p7f0jd_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy49497oh_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppem76s2n_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if index > k {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5eskdycu_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpewjdu9w9_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjhdyk6ck_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpggxdqlhp_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_ar4nkv5_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v0l6bo_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjmglyrmp_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4a5ktgdu_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkllic8tb_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpggxdqlhp_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppqfw02l8_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy9esoyva_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}