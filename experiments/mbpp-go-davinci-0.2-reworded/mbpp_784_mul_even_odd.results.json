{
  "name": "mbpp_784_mul_even_odd",
  "language": "go_test.go",
  "prompt": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    even := 0\n    odd := 0\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for i, v := range list1 {\n        if i % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            if v % 2 == 0 {\n                even = v\n            } else {\n                odd = v\n            }\n        } else {\n            if v % 2 == 0 && even == 0 {\n                even = v\n            } else if v % 2 != 0 && odd == 0 {\n                odd = v\n            }\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            if even == 0 {\n                even = v\n            }\n        } else {\n            if odd == 0 {\n                odd = v\n            }\n        }\n        if even != 0 && odd != 0 {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvm7ybr9i_test.go:11:9: i declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var found_even, found_odd bool\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            if !found_even {\n                even = v\n                found_even = true\n            }\n        } else {\n            if !found_odd {\n                odd = v\n                found_odd = true\n            }\n        }\n        if found_even && found_odd {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        } else {\n            if v % 2 == 0 {\n                even = v\n            } else {\n                odd = v\n            }\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=2)', got '%!s(int=90)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=10)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v%2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1)-1 {\n            even = -1\n        }\n    }\n    for i, v := range list1 {\n        if v%2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1)-1 {\n            odd = -1\n        }\n    }\n    return even*odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        } else {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmps9kna5cu_test.go:38: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmps9kna5cu_test.go:38: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even int\n    var odd int\n    var flag bool = false\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            flag = true\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            flag = true\n            break\n        }\n    }\n    if flag {\n        return even * odd\n    }\n    return 0\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        } else if i % 2 == 0 {\n            even = v\n        } else {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj78awuie_test.go:40: expected '%!s(int=4)', got '%!s(int=48)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmpj78awuie_test.go:40: expected '%!s(int=2)', got '%!s(int=90)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj78awuie_test.go:40: expected '%!s(int=10)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var even_found, odd_found bool\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            if !even_found {\n                even = v\n                even_found = true\n            }\n        } else {\n            if !odd_found {\n                odd = v\n                odd_found = true\n            }\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for i, v := range list1 {\n        if i % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var flag bool\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            if !flag {\n                even = v\n                flag = true\n            }\n        } else {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpoqi7ba0f_test.go:41: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmpoqi7ba0f_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpoqi7ba0f_test.go:41: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var flag bool = false\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            if !flag {\n                even = v\n                flag = true\n            }\n        } else {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            if v % 2 == 0 {\n                even = v\n            } else {\n                odd = v\n            }\n        } else {\n            if v % 2 == 0 {\n                if even == 0 {\n                    even = v\n                }\n            } else {\n                if odd == 0 {\n                    odd = v\n                }\n            }\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var flag bool = false\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            if !flag {\n                even = v\n                flag = true\n            }\n        } else {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpabbj627w_test.go:41: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v%2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v%2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for i, v := range list1 {\n        if i % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp_gibczgd_test.go:41: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var even_found, odd_found bool\n    for _, v := range list1 {\n        if v % 2 == 0 && !even_found {\n            even = v\n            even_found = true\n        } else if v % 2 != 0 && !odd_found {\n            odd = v\n            odd_found = true\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var even_found, odd_found bool\n    for _, num := range list1 {\n        if num % 2 == 0 && !even_found {\n            even = num\n            even_found = true\n        } else if num % 2 != 0 && !odd_found {\n            odd = num\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        } else {\n            if v % 2 == 0 {\n                even = v\n            } else {\n                odd = v\n            }\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=2)', got '%!s(int=90)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp0pfkytag_test.go:42: expected '%!s(int=10)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            if v % 2 == 0 {\n                even = v\n            } else {\n                odd = v\n            }\n        } else {\n            if v % 2 == 0 && even == 0 {\n                even = v\n            } else if v % 2 != 0 && odd == 0 {\n                odd = v\n            }\n        }\n        if even != 0 && odd != 0 {\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    var i int\n    for i = 0; i < len(list1); i++ {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i = 0; i < len(list1); i++ {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i := 0; i < len(list1); i++ {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i := 0; i < len(list1); i++ {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        }\n        if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpx2366jw5_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpx2366jw5_test.go:37: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i := 0; i < len(list1); i++ {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i := 0; i < len(list1); i++ {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    for i, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n        if i == len(list1) - 1 {\n            return 0\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i, v := range list1 {\n        if i == 0 {\n            even = v\n        } else if i == 1 {\n            odd = v\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmpj3lzt4nc_test.go:36: expected '%!s(int=10)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for i := 0; i < len(list1); i++ {\n        if i % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122848,
      "stdout": "--- FAIL: TestMul_Even_Odd (0.00s)\n    --- FAIL: TestMul_Even_Odd/test_num__0 (0.00s)\n        tmp7n42dkz5_test.go:36: expected '%!s(int=4)', got '%!s(int=48)'\n    --- FAIL: TestMul_Even_Odd/test_num__1 (0.00s)\n        tmp7n42dkz5_test.go:36: expected '%!s(int=2)', got '%!s(int=90)'\n    --- FAIL: TestMul_Even_Odd/test_num__2 (0.00s)\n        tmp7n42dkz5_test.go:36: expected '%!s(int=10)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n    var even, odd int\n    for _, v := range list1 {\n        if v % 2 == 0 {\n            even = v\n            break\n        }\n    }\n    for _, v := range list1 {\n        if v % 2 != 0 {\n            odd = v\n            break\n        }\n    }\n    return even * odd\n}\n\nfunc TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510074,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}