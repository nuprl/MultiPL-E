{
  "name": "mbpp_619_move_num",
  "language": "go_test.go",
  "prompt": "package move_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMove_Num(t *testing.T) {\n  candidate := move_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"I1love143you55three3000thousand\"), expected: \"Iloveyouthreethousand1143553000\" },\n     { actual: candidate(\"Avengers124Assemble\"), expected: \"AvengersAssemble124\" },\n     { actual: candidate(\"Its11our12path13to14see15things16do17things\"), expected: \"Itsourpathtoseethingsdothings11121314151617\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result string\n    var num_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result + num_str\n}\n",
    "    var result string\n    var num_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result + num_str\n}\n",
    "    var result string\n    var num_str string\n    for _, ch := range test_str {\n        if ch >= '0' && ch <= '9' {\n            num_str += string(ch)\n        } else {\n            result += string(ch)\n        }\n    }\n    return result + num_str\n}\n",
    "    var result string\n    var num_str string\n    for _, c := range test_str {\n        if c >= '0' && c <= '9' {\n            num_str += string(c)\n        } else {\n            result += string(c)\n        }\n    }\n    return result + num_str\n}\n",
    "    var result string\n    for _, c := range test_str {\n        if c >= '0' && c <= '9' {\n            result += string(c)\n        }\n    }\n    for _, c := range test_str {\n        if c < '0' || c > '9' {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    var str_arr []byte\n    var num_arr []byte\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_arr = append(num_arr, byte(v))\n        } else {\n            str_arr = append(str_arr, byte(v))\n        }\n    }\n    return string(str_arr) + string(num_arr)\n}\n",
    "    var str_arr []string\n    var num_arr []string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_arr = append(num_arr, string(v))\n        } else {\n            str_arr = append(str_arr, string(v))\n        }\n    }\n    return fmt.Sprintf(\"%s%s\", strings.Join(str_arr, \"\"), strings.Join(num_arr, \"\"))\n}\n",
    "    var result string\n    var nums string\n    for _, c := range test_str {\n        if c >= '0' && c <= '9' {\n            nums += string(c)\n        } else {\n            result += string(c)\n        }\n    }\n    return result + nums\n}\n",
    "    var result string\n    var num_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result + num_str\n}\n",
    "    var result string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            result += string(v)\n        }\n    }\n    for _, v := range test_str {\n        if v < '0' || v > '9' {\n            result += string(v)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var num_str string\n    for _, char := range test_str {\n        if char >= '0' && char <= '9' {\n            num_str += string(char)\n        } else {\n            result += string(char)\n        }\n    }\n    return result + num_str\n}\n",
    "    var str_arr []byte\n    var num_arr []byte\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_arr = append(num_arr, byte(v))\n        } else {\n            str_arr = append(str_arr, byte(v))\n        }\n    }\n    return string(str_arr) + string(num_arr)\n}\n",
    "    var result string\n    for _, char := range test_str {\n        if char >= 48 && char <= 57 {\n            result += string(char)\n        }\n    }\n    for _, char := range test_str {\n        if char < 48 || char > 57 {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var num_str string\n    var char_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            char_str += string(v)\n        }\n    }\n    return char_str + num_str\n}\n",
    "    var num_str string\n    var char_str string\n    for _, char := range test_str {\n        if char >= '0' && char <= '9' {\n            num_str += string(char)\n        } else {\n            char_str += string(char)\n        }\n    }\n    return char_str + num_str\n}\n",
    "    var ret_str string\n    var num_str string\n    for _, ch := range test_str {\n        if ch >= '0' && ch <= '9' {\n            num_str += string(ch)\n        } else {\n            ret_str += string(ch)\n        }\n    }\n    return ret_str + num_str\n}\n",
    "    var result string\n    var num_str string\n    for _, ch := range test_str {\n        if ch >= '0' && ch <= '9' {\n            num_str += string(ch)\n        } else {\n            result += string(ch)\n        }\n    }\n    return result + num_str\n}\n",
    "    var num_str string\n    var char_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            char_str += string(v)\n        }\n    }\n    return char_str + num_str\n}\n",
    "    var str_arr []string\n    var num_arr []string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_arr = append(num_arr, string(v))\n        } else {\n            str_arr = append(str_arr, string(v))\n        }\n    }\n    return strings.Join(str_arr, \"\") + strings.Join(num_arr, \"\")\n}\n",
    "    var result string\n    var num_str string\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num_str += string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result + num_str\n}\n"
  ]
}