{
  "name": "mbpp_450_extract_string",
  "language": "go_test.go",
  "prompt": "package extract_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract specified size of strings from a given list of string values.\nfunc extract_string(str []string, l int) []string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "func TestExtract_String(t *testing.T) {\n  candidate := extract_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 8), expected: []string{\"practice\", \"solution\"} },\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 6), expected: []string{\"Python\"} },\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 9), expected: []string{\"exercises\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var res []string\n    for _, v := range str {\n        if len(v) == l {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var res []string\n    for _, s := range str {\n        if len(s) == l {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var res []string\n    for _, s := range str {\n        if len(s) == l {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var res []string\n    for _, s := range str {\n        if len(s) == l {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
    "    var res []string\n    for _, s := range str {\n        if len(s) == l {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
    "    var result []string\n    for _, s := range str {\n        if len(s) == l {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n"
  ]
}