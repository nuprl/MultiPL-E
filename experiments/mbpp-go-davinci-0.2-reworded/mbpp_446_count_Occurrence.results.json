{
  "name": "mbpp_446_count_Occurrence",
  "language": "go_test.go",
  "prompt": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpbvwjc2i3_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpbvwjc2i3_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpbvwjc2i3_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzrzfp7ye_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpzrzfp7ye_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpzrzfp7ye_test.go:21:20: undefined: count_Occurrence_string_int\n/tmp/tmpzrzfp7ye_test.go:23:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                for _, v2 := range tup.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                for _, v2 := range tup.([]string) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpjtg8ougf_test.go:77: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpjtg8ougf_test.go:77: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpjtg8ougf_test.go:77: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int_slice(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string_slice(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64_slice(tup.(int), lst.([]float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int_slice(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string_slice(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64_slice(tup.(string), lst.([]float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int_slice(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string_slice(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64_float64_slice(tup.(float64), lst.([]float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvetq1_54_test.go:14:20: undefined: count_Occurrence_int_int_slice\n/tmp/tmpvetq1_54_test.go:16:20: undefined: count_Occurrence_int_string_slice\n/tmp/tmpvetq1_54_test.go:18:20: undefined: count_Occurrence_int_float64_slice\n/tmp/tmpvetq1_54_test.go:25:20: undefined: count_Occurrence_string_int_slice\n/tmp/tmpvetq1_54_test.go:27:20: undefined: count_Occurrence_string_string_slice\n/tmp/tmpvetq1_54_test.go:29:20: undefined: count_Occurrence_string_float64_slice\n/tmp/tmpvetq1_54_test.go:36:20: undefined: count_Occurrence_float64_int_slice\n/tmp/tmpvetq1_54_test.go:38:20: undefined: count_Occurrence_float64_string_slice\n/tmp/tmpvetq1_54_test.go:40:20: undefined: count_Occurrence_float64_float64_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"Error: lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"Error: tup is not a list\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "Error: tup is not a list\nError: tup is not a list\nError: tup is not a list\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1yl93s9d_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1yl93s9d_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1yl93s9d_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // convert the list to a slice\n    s := lst.([]interface{})\n    // initialize the counter\n    count := 0\n    // loop over the slice\n    for _, v := range s {\n        // if the element is equal to the tuple, increment the counter\n        if v == tup {\n            count += 1\n        }\n    }\n    // return the counter\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []string, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []string, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmpsp25sxo1_test.go:11 +0x108\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpsp25sxo1_test.go:32 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a list\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "tup is not a list\ntup is not a list\ntup is not a list\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfznicg7d_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfznicg7d_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfznicg7d_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int_int(tup.(int), lst.([]int))\n        case string:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        }\n    case []string:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case string:\n            return count_Occurrence_string_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk4t5wq2d_test.go:14:20: undefined: count_Occurrence_int_int\n/tmp/tmpk4t5wq2d_test.go:16:20: undefined: count_Occurrence_string_int\n/tmp/tmpk4t5wq2d_test.go:21:20: undefined: count_Occurrence_int_string\n/tmp/tmpk4t5wq2d_test.go:23:20: undefined: count_Occurrence_string_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpu0hriw_8_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpu0hriw_8_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpu0hriw_8_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range lst.([]bool) {\n            if v == tup.(bool) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range lst.([]interface{}) {\n            if v == tup {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc000010240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc000010240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a8bf)\n\t/tmp/tmpsrtuug0t_test.go:20 +0x4a8\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001200)\n\t/tmp/tmpsrtuug0t_test.go:55 +0x1a5\ntesting.tRunner(0xc000001200, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, v := range lst_int {\n                if fmt.Sprintf(\"%d\", v) == tup_string {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_string := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_string {\n                if fmt.Sprintf(\"%d\", tup_int) == v {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, v := range lst_string {\n                if v == tup_string {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp8v9c620c_test.go:79: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp8v9c620c_test.go:79: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp8v9c620c_test.go:79: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_int {\n                if fmt.Sprintf(\"%d\", v) == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_str {\n                if fmt.Sprintf(\"%d\", tup_int) == v {\n                    count += 1\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpjdj748ri_test.go:79: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpjdj748ri_test.go:79: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpjdj748ri_test.go:79: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_int {\n                if fmt.Sprintf(\"%d\", v) == tup_str {\n                    count++\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_str {\n                if fmt.Sprintf(\"%d\", tup_int) == v {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7i9zdcwj_test.go:74: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7i9zdcwj_test.go:74: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7i9zdcwj_test.go:74: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiduw2i_d_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpiduw2i_d_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpiduw2i_d_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpiduw2i_d_test.go:25:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case []string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9swvg06q_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp9swvg06q_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajuzwlzr_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpajuzwlzr_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpajuzwlzr_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmpajuzwlzr_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpajuzwlzr_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmpajuzwlzr_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmpajuzwlzr_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmpajuzwlzr_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmpajuzwlzr_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            panic(\"Second argument is not a list\")\n        }\n    default:\n        panic(\"First argument is not a list\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: First argument is not a list [recovered]\n\tpanic: First argument is not a list\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008cd98, 0x51aee0, 0xc00008cd80, 0x58a85f)\n\t/tmp/tmp4s2_r4fn_test.go:29 +0x105\ncommand-line-arguments_test.TestCount_Occurrence(0xc000186300)\n\t/tmp/tmp4s2_r4fn_test.go:40 +0x1a5\ntesting.tRunner(0xc000186300, 0x54f320)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []float64:\n        switch lst.(type) {\n        case []float64:\n            tup_lst := tup.([]float64)\n            lst_lst := lst.([]float64)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmptsy_l5mb_test.go:82: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmptsy_l5mb_test.go:82: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmptsy_l5mb_test.go:82: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp3_i_zpub_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp3_i_zpub_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp3_i_zpub_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int_int(tup.(int), lst.([]int))\n        case []int:\n            return count_Occurrence_int_int_slice(tup.([]int), lst.([]int))\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            return count_Occurrence_string_string(tup.(string), lst.([]string))\n        case []string:\n            return count_Occurrence_string_string_slice(tup.([]string), lst.([]string))\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptnt5zw4r_test.go:14:20: undefined: count_Occurrence_int_int\n/tmp/tmptnt5zw4r_test.go:16:20: undefined: count_Occurrence_int_int_slice\n/tmp/tmptnt5zw4r_test.go:23:20: undefined: count_Occurrence_string_string\n/tmp/tmptnt5zw4r_test.go:25:20: undefined: count_Occurrence_string_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        }\n    case []string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2l5q7z_y_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmp2l5q7z_y_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmp2l5q7z_y_test.go:21:20: undefined: count_Occurrence_string_int\n/tmp/tmp2l5q7z_y_test.go:23:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int_slice(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string_slice(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64_slice(tup.(int), lst.([]float64))\n        case []bool:\n            return count_Occurrence_int_bool_slice(tup.(int), lst.([]bool))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int_slice(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string_slice(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64_slice(tup.(string), lst.([]float64))\n        case []bool:\n            return count_Occurrence_string_bool_slice(tup.(string), lst.([]bool))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int_slice(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string_slice(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64_float64_slice(tup.(float64), lst.([]float64))\n        case []bool:\n            return count_Occurrence_float64_bool_slice(tup.(float64), lst.([]bool))\n        }\n    case bool:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_bool_int_slice(tup.(bool), lst.([]int))\n        case []string:\n            return count_Occurrence_bool_string\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbagxnpin_test.go:50:6: expected '(', found TestCount_Occurrence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        count := 0\n        for _, v := range lst_int {\n            if v == tup {\n                count += 1\n            }\n        }\n        return count\n    case []string:\n        lst_str := lst.([]string)\n        count := 0\n        for _, v := range lst_str {\n            if v == tup {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpuunlk1to_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpuunlk1to_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpuunlk1to_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9obxfwe3_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9obxfwe3_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9obxfwe3_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a list\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "tup is not a list\ntup is not a list\ntup is not a list\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1gszfng5_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1gszfng5_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1gszfng5_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, val := range lst_int {\n                if val == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, val := range lst_int {\n                if fmt.Sprintf(\"%d\", val) == tup_str {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, val := range lst_str {\n                if fmt.Sprintf(\"%d\", tup_int) == val {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, val := range lst_str {\n                if val == tup_str {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmppd4qxkw1_test.go:79: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmppd4qxkw1_test.go:79: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmppd4qxkw1_test.go:79: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpltps8brf_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpltps8brf_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpltps8brf_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        default:\n            return -1\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphoi1ko2o_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmphoi1ko2o_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmphoi1ko2o_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmphoi1ko2o_test.go:25:20: undefined: count_Occurrence_string_int\n/tmp/tmphoi1ko2o_test.go:27:20: undefined: count_Occurrence_string\n/tmp/tmphoi1ko2o_test.go:29:20: undefined: count_Occurrence_string_float64\n/tmp/tmphoi1ko2o_test.go:36:20: undefined: count_Occurrence_float64_int\n/tmp/tmphoi1ko2o_test.go:38:20: undefined: count_Occurrence_float64_string\n/tmp/tmphoi1ko2o_test.go:40:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp8f4xim9u_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp8f4xim9u_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp8f4xim9u_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7julfk9_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpx7julfk9_test.go:21:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpvzrq3022_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpvzrq3022_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpvzrq3022_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v1 := range lst.([]int) {\n                    if v == v1 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range tup.([]string) {\n                for _, v1 := range lst.([]string) {\n                    if v == v1 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a list\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "tup is not a list\ntup is not a list\ntup is not a list\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpudbgscrm_test.go:64: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpudbgscrm_test.go:64: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpudbgscrm_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, val := range lst_int {\n                if val == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, val := range lst_str {\n                if val == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpzcguux9l_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpzcguux9l_test.go:59: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpzcguux9l_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup := tup.(int)\n            count := 0\n            for _, v := range lst {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup := tup.([]int)\n            count := 0\n            for _, v := range lst {\n                for _, v2 := range tup {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup := tup.(string)\n            count := 0\n            for _, v := range lst {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup := tup.([]string)\n            count := 0\n            for _, v := range lst {\n                for _, v2 := range tup {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7i4evxsb_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7i4evxsb_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7i4evxsb_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"Error: Second argument is not a list.\")\n            return -1\n        }\n    default:\n        fmt.Println(\"Error: First argument is not a list.\")\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "Error: First argument is not a list.\nError: First argument is not a list.\nError: First argument is not a list.\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpnrjbyd_d_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpnrjbyd_d_test.go:50: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpnrjbyd_d_test.go:50: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzrzfp7ye_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpzrzfp7ye_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpzrzfp7ye_test.go:21:20: undefined: count_Occurrence_string_int\n/tmp/tmpzrzfp7ye_test.go:23:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaanjhfdv_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmpaanjhfdv_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count += 1\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk0ex2swk_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk0ex2swk_test.go:41: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk0ex2swk_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a89f)\n\t/tmp/tmpoojcxubh_test.go:20 +0x256\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpoojcxubh_test.go:37 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]int))\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]string))\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6i_jeb3g_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmp6i_jeb3g_test.go:16:20: undefined: count_Occurrence_string\n/tmp/tmp6i_jeb3g_test.go:23:20: undefined: count_Occurrence_int\n/tmp/tmp6i_jeb3g_test.go:25:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.([]int), lst.([]float64))\n        }\n    case []string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.([]string), lst.([]float64))\n        }\n    case []float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.([]float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.([]float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.([]float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph5fwf2gp_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmph5fwf2gp_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmph5fwf2gp_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmph5fwf2gp_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmph5fwf2gp_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmph5fwf2gp_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmph5fwf2gp_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmph5fwf2gp_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmph5fwf2gp_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, v := range lst_int {\n                if fmt.Sprintf(\"%d\", v) == tup_string {\n                    count++\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_string := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_string {\n                if fmt.Sprintf(\"%d\", tup_int) == v {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, v := range lst_string {\n                if v == tup_string {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpg5yt9u1w_test.go:74: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpg5yt9u1w_test.go:74: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpg5yt9u1w_test.go:74: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfocpppl6_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfocpppl6_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfocpppl6_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch t := tup.(type) {\n    case int:\n        switch l := lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range l {\n                if v == t {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch l := lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range l {\n                if v == t {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv38djrvi_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv38djrvi_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv38djrvi_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            lst_ := lst.([]int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            lst_ := lst.([]string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpc58jmtqq_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpc58jmtqq_test.go:59: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpc58jmtqq_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            var count int = 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            var count int = 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp3v0acr4k_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp3v0acr4k_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp3v0acr4k_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int_int(tup.(int), lst.([]int))\n        case string:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        }\n    case []string:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case string:\n            return count_Occurrence_string_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk4t5wq2d_test.go:14:20: undefined: count_Occurrence_int_int\n/tmp/tmpk4t5wq2d_test.go:16:20: undefined: count_Occurrence_string_int\n/tmp/tmpk4t5wq2d_test.go:21:20: undefined: count_Occurrence_int_string\n/tmp/tmpk4t5wq2d_test.go:23:20: undefined: count_Occurrence_string_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(int), lst.([]string))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppwvildy8_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmppwvildy8_test.go:16:20: undefined: count_Occurrence_string\n/tmp/tmppwvildy8_test.go:21:20: undefined: count_Occurrence_int\n/tmp/tmppwvildy8_test.go:23:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_ := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_ := tup.(int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_ := tup.([]int)\n            count := 0\n            for _, v := range lst_ {\n                for _, vv := range tup_ {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_ := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_ := tup.(string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_ := tup.([]string)\n            count := 0\n            for _, v := range lst_ {\n                for _, vv := range tup_ {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1wm37kdn_test.go:78: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1wm37kdn_test.go:78: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1wm37kdn_test.go:78: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpqojpf5sr_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpqojpf5sr_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpqojpf5sr_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // Check if tup is a tuple\n    if tup == nil {\n        return 0\n    }\n    switch tup.(type) {\n    case []interface{}:\n        // Check if lst is a list\n        switch lst.(type) {\n        case []interface{}:\n            // Count the occurence of tup in lst\n            count := 0\n            for _, v := range lst.([]interface{}) {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a tuple\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "lst is not a list\nlst is not a list\nlst is not a list\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmph43_1al9_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmph43_1al9_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmph43_1al9_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a89f)\n\t/tmp/tmpoojcxubh_test.go:20 +0x256\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpoojcxubh_test.go:37 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64_float64(tup.(float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsvfmuyoz_test.go:14:20: undefined: count_Occurrence_int_int\n/tmp/tmpsvfmuyoz_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpsvfmuyoz_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmpsvfmuyoz_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpsvfmuyoz_test.go:25:20: undefined: count_Occurrence_string_string\n/tmp/tmpsvfmuyoz_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmpsvfmuyoz_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmpsvfmuyoz_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmpsvfmuyoz_test.go:36:20: undefined: count_Occurrence_float64_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            panic(\"lst is not a list\")\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            panic(\"lst is not a list\")\n        }\n    default:\n        panic(\"tup is not a list\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: tup is not a list [recovered]\n\tpanic: tup is not a list\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51ca80, 0x56df60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca80, 0x56df60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a83f)\n\t/tmp/tmp6vy2v7yx_test.go:46 +0x305\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6vy2v7yx_test.go:57 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f310)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_string := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, i := range lst_string {\n                if i == tup_string {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp39bp12nm_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp39bp12nm_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp39bp12nm_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajuzwlzr_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpajuzwlzr_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpajuzwlzr_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmpajuzwlzr_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpajuzwlzr_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmpajuzwlzr_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmpajuzwlzr_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmpajuzwlzr_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmpajuzwlzr_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if tup.(int) == v {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if tup.(string) == v {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpjlwujkka_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpjlwujkka_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpjlwujkka_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []int:\n            return count_Occurrence_int_slice(tup.([]int), lst.([]int))\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []string:\n            return count_Occurrence_string_slice(tup.([]string), lst.([]string))\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpobwm345v_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpobwm345v_test.go:16:20: undefined: count_Occurrence_int_slice\n/tmp/tmpobwm345v_test.go:23:20: undefined: count_Occurrence_string\n/tmp/tmpobwm345v_test.go:25:20: undefined: count_Occurrence_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            lst_ := lst.([]int)\n            tup_ := tup.(int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case float64:\n        switch lst.(type) {\n        case []float64:\n            lst_ := lst.([]float64)\n            tup_ := tup.(float64)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            lst_ := lst.([]string)\n            tup_ := tup.(string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123503,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpzfmzm20i_test.go:76: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpzfmzm20i_test.go:76: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpzfmzm20i_test.go:76: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case float64:\n        switch lst.(type) {\n        case []float64:\n            count := 0\n            for _, v := range lst.([]float64) {\n                if v == tup.(float64) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpil4iyzg6_test.go:70: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpil4iyzg6_test.go:70: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpil4iyzg6_test.go:70: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_ := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_ := tup.(int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            tup_ := tup.([]int)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_ := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_ := tup.(string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count += 1\n                }\n            }\n            return count\n        case []string:\n            tup_ := tup.([]string)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpxlnp_dso_test.go:78: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpxlnp_dso_test.go:78: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpxlnp_dso_test.go:78: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajuzwlzr_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpajuzwlzr_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpajuzwlzr_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmpajuzwlzr_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpajuzwlzr_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmpajuzwlzr_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmpajuzwlzr_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmpajuzwlzr_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmpajuzwlzr_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a89f)\n\t/tmp/tmpoojcxubh_test.go:20 +0x256\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpoojcxubh_test.go:37 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2xc6_iae_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int_slice(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string_slice(tup.(int), lst.([]string))\n        default:\n            panic(fmt.Sprintf(\"Unsupported type: %T\", lst))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int_slice(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string_slice(tup.(string), lst.([]string))\n        default:\n            panic(fmt.Sprintf(\"Unsupported type: %T\", lst))\n        }\n    default:\n        panic(fmt.Sprintf(\"Unsupported type: %T\", tup))\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123503,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt412abe3_test.go:14:20: undefined: count_Occurrence_int_int_slice\n/tmp/tmpt412abe3_test.go:16:20: undefined: count_Occurrence_int_string_slice\n/tmp/tmpt412abe3_test.go:23:20: undefined: count_Occurrence_string_int_slice\n/tmp/tmpt412abe3_test.go:25:20: undefined: count_Occurrence_string_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                for _, v2 := range tup.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                for _, v2 := range tup.([]string) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpoc6jf6xf_test.go:77: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpoc6jf6xf_test.go:77: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpoc6jf6xf_test.go:77: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        var count int\n        for _, i := range tup.([]int) {\n            count += count_Occurrence(i, lst)\n        }\n        return count\n    case int:\n        var count int\n        for _, i := range lst.([]int) {\n            if i == tup.(int) {\n                count += 1\n            }\n        }\n        return count\n    case string:\n        var count int\n        for _, i := range lst.([]string) {\n            if i == tup.(string) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmprleh6l_q_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmprleh6l_q_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmprleh6l_q_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range tup.([]string) {\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7s8u9a9f_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7s8u9a9f_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7s8u9a9f_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        list := lst.([]int)\n        count := 0\n        for _, val := range list {\n            if val == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := lst.([]string)\n        count := 0\n        for _, val := range list {\n            if val == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a7ff)\n\t/tmp/tmpqs1_wh4x_test.go:24 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpqs1_wh4x_test.go:41 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range lst.([]interface{}) {\n            if v == tup {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1ykniecv_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1ykniecv_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1ykniecv_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []interface{}:\n        switch lst.(type) {\n        case []interface{}:\n            count := 0\n            for _, v := range lst.([]interface{}) {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        switch lst.(type) {\n        case []interface{}:\n            count := 0\n            for _, v := range lst.([]interface{}) {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcz7hawsd_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcz7hawsd_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcz7hawsd_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count += 1\n                        break\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count += 1\n                        break\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpi12t7d9y_test.go:85: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpi12t7d9y_test.go:85: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpi12t7d9y_test.go:85: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_ := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_ := tup.(int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_ := tup.([]int)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_ := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_ := tup.(string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_ := tup.([]string)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpceb8wre__test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpceb8wre__test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpceb8wre__test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpx04dg66n_test.go:78: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpx04dg66n_test.go:78: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpx04dg66n_test.go:78: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.([]int), lst.([]float64))\n        }\n    case []string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.([]string), lst.([]float64))\n        }\n    case []float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.([]float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.([]float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.([]float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph5fwf2gp_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmph5fwf2gp_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmph5fwf2gp_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmph5fwf2gp_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmph5fwf2gp_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmph5fwf2gp_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmph5fwf2gp_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmph5fwf2gp_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmph5fwf2gp_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a7ff)\n\t/tmp/tmpxn77ihdd_test.go:20 +0x265\ncommand-line-arguments_test.TestCount_Occurrence(0xc000102600)\n\t/tmp/tmpxn77ihdd_test.go:41 +0x1a5\ntesting.tRunner(0xc000102600, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []int:\n            return count_Occurrence_int_slice(tup.([]int), lst.([]int))\n        default:\n            panic(\"Type not supported\")\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []string:\n            return count_Occurrence_string_slice(tup.([]string), lst.([]string))\n        default:\n            panic(\"Type not supported\")\n        }\n    default:\n        panic(\"Type not supported\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2tu2ep__test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpa2tu2ep__test.go:16:20: undefined: count_Occurrence_int_slice\n/tmp/tmpa2tu2ep__test.go:23:20: undefined: count_Occurrence_string\n/tmp/tmpa2tu2ep__test.go:25:20: undefined: count_Occurrence_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpzkrsp9n7_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_int {\n                if fmt.Sprintf(\"%d\", i) == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_str {\n                if fmt.Sprintf(\"%d\", tup_int) == i {\n                    count += 1\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpl7aftft1_test.go:74: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpl7aftft1_test.go:74: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpl7aftft1_test.go:74: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpvsukr0b8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpvsukr0b8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpvsukr0b8_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        count := 0\n        for _, v := range lst_int {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        lst_string := lst.([]string)\n        count := 0\n        for _, v := range lst_string {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a7ff)\n\t/tmp/tmpgywgr3mo_test.go:24 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000102600)\n\t/tmp/tmpgywgr3mo_test.go:41 +0x1a5\ntesting.tRunner(0xc000102600, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, i := range lst_str {\n                if i == tup_str {\n                    count += 1\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpx7pd5pu9_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpx7pd5pu9_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpx7pd5pu9_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmppaglo6on_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmppaglo6on_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmppaglo6on_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.([]int)[0] {\n                    count++\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"Invalid type for lst\")\n            return -1\n        }\n    default:\n        fmt.Println(\"Invalid type for tup\")\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "Invalid type for tup\nInvalid type for tup\nInvalid type for tup\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp5hn6ujwx_test.go:46: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp5hn6ujwx_test.go:46: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp5hn6ujwx_test.go:46: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            panic(\"lst is not a list\")\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            panic(\"lst is not a list\")\n        }\n    default:\n        panic(\"tup is not a int or string\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123504,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: tup is not a int or string [recovered]\n\tpanic: tup is not a int or string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a85f)\n\t/tmp/tmpvw66kp47_test.go:38 +0x225\ncommand-line-arguments_test.TestCount_Occurrence(0xc000102600)\n\t/tmp/tmpvw66kp47_test.go:49 +0x1a5\ntesting.tRunner(0xc000102600, 0x54f318)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp80th6g9h_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        count := 0\n        for _, v := range lst {\n            if v == tup {\n                count++\n            }\n        }\n        return count\n    case []string:\n        lst := lst.([]string)\n        count := 0\n        for _, v := range lst {\n            if v == tup {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        lst := lst.([]float64)\n        count := 0\n        for _, v := range lst {\n            if v == tup {\n                count++\n            }\n        }\n        return count\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9_pls83y_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9_pls83y_test.go:58: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9_pls83y_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123505,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkmao9qc1_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpkmao9qc1_test.go:16:20: undefined: count_Occurrence_int_float64\n/tmp/tmpkmao9qc1_test.go:18:20: undefined: count_Occurrence_int_string\n/tmp/tmpkmao9qc1_test.go:23:20: undefined: count_Occurrence_float64_int\n/tmp/tmpkmao9qc1_test.go:25:20: undefined: count_Occurrence_float64\n/tmp/tmpkmao9qc1_test.go:27:20: undefined: count_Occurrence_float64_string\n/tmp/tmpkmao9qc1_test.go:32:20: undefined: count_Occurrence_string_int\n/tmp/tmpkmao9qc1_test.go:34:20: undefined: count_Occurrence_string_float64\n/tmp/tmpkmao9qc1_test.go:36:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, i := range lst.([]int) {\n                for _, j := range tup.([]int) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, i := range lst.([]string) {\n                for _, j := range tup.([]string) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpf878vvkn_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpf878vvkn_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpf878vvkn_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        default:\n            panic(\"Invalid type\")\n        }\n    case []string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        default:\n            panic(\"Invalid type\")\n        }\n    default:\n        panic(\"Invalid type\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxonj8j18_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpxonj8j18_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpxonj8j18_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpxonj8j18_test.go:25:20: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp6rk6v6uc_test.go:20 +0x1cc\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp6rk6v6uc_test.go:35 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []int:\n            return count_Occurrence_int_slice(tup.([]int), lst.([]int))\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []string:\n            return count_Occurrence_string_slice(tup.([]string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl4zaiynt_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpl4zaiynt_test.go:16:20: undefined: count_Occurrence_int_slice\n/tmp/tmpl4zaiynt_test.go:21:20: undefined: count_Occurrence_string\n/tmp/tmpl4zaiynt_test.go:23:20: undefined: count_Occurrence_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpd7v5erge_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp8d0qd2dz_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_int {\n                if i == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, i := range lst_int {\n                if fmt.Sprintf(\"%d\", i) == tup_string {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_string := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, i := range lst_string {\n                if fmt.Sprintf(\"%d\", tup_int) == i {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, i := range lst_string {\n                if i == tup_string {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp47r7jzj9_test.go:79: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp47r7jzj9_test.go:79: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp47r7jzj9_test.go:79: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                for _, vv := range tup.([]int) {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                for _, vv := range tup.([]string) {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp_mlog7rj_test.go:77: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp_mlog7rj_test.go:77: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp_mlog7rj_test.go:77: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpn42t97s0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajuzwlzr_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpajuzwlzr_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmpajuzwlzr_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmpajuzwlzr_test.go:23:20: undefined: count_Occurrence_string_int\n/tmp/tmpajuzwlzr_test.go:25:20: undefined: count_Occurrence_string\n/tmp/tmpajuzwlzr_test.go:27:20: undefined: count_Occurrence_string_float64\n/tmp/tmpajuzwlzr_test.go:32:20: undefined: count_Occurrence_float64_int\n/tmp/tmpajuzwlzr_test.go:34:20: undefined: count_Occurrence_float64_string\n/tmp/tmpajuzwlzr_test.go:36:20: undefined: count_Occurrence_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup := tup.(type) {\n    case []int:\n        switch lst := lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst {\n                if v == tup[0] {\n                    count++\n                }\n            }\n            return count\n        }\n    case []string:\n        switch lst := lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst {\n                if v == tup[0] {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpwt9tad1o_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpwt9tad1o_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpwt9tad1o_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch v := tup.(type) {\n    case int:\n        switch l := lst.(type) {\n        case []int:\n            count := 0\n            for _, val := range l {\n                if val == v {\n                    count++\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"List must be of type []int\")\n            return 0\n        }\n    case string:\n        switch l := lst.(type) {\n        case []string:\n            count := 0\n            for _, val := range l {\n                if val == v {\n                    count++\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"List must be of type []string\")\n            return 0\n        }\n    default:\n        fmt.Println(\"Tuple must be of type int or string\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "Tuple must be of type int or string\nTuple must be of type int or string\nTuple must be of type int or string\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfhs018v6_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfhs018v6_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfhs018v6_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000094598, 0x51aee0, 0xc000094580, 0x58a7ff)\n\t/tmp/tmp85u6xtwi_test.go:22 +0x1db\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp85u6xtwi_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup := tup.(int)\n            count := 0\n            for _, v := range lst {\n                if v == tup {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            tup := tup.([]int)\n            count := 0\n            for _, v := range lst {\n                for _, v2 := range tup {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        lst := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup := tup.(string)\n            count := 0\n            for _, v := range lst {\n                if v == tup {\n                    count += 1\n                }\n            }\n            return count\n        case []string:\n            tup := tup.([]string)\n            count := 0\n            for _, v := range lst {\n                for _, v2 := range tup {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcix9b2px_test.go:78: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcix9b2px_test.go:78: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcix9b2px_test.go:78: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, i := range tup.([]int) {\n                for _, j := range lst.([]int) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"Invalid type of list\")\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, i := range tup.([]string) {\n                for _, j := range lst.([]string) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"Invalid type of list\")\n            return -1\n        }\n    default:\n        fmt.Println(\"Invalid type of tuple\")\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "Invalid type of tuple\nInvalid type of tuple\nInvalid type of tuple\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfjtsr_r2_test.go:64: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfjtsr_r2_test.go:64: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfjtsr_r2_test.go:64: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []int:\n            return count_Occurrence_int_slice(tup.([]int), lst.([]int))\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []string:\n            return count_Occurrence_string_slice(tup.([]string), lst.([]string))\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl4zaiynt_test.go:14:20: undefined: count_Occurrence_int\n/tmp/tmpl4zaiynt_test.go:16:20: undefined: count_Occurrence_int_slice\n/tmp/tmpl4zaiynt_test.go:21:20: undefined: count_Occurrence_string\n/tmp/tmpl4zaiynt_test.go:23:20: undefined: count_Occurrence_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int = 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int = 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_int {\n                if fmt.Sprintf(\"%d\", v) == tup_str {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_str {\n                if fmt.Sprintf(\"%d\", tup_int) == v {\n                    count++\n                }\n            }\n            return count\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7h59dsaz_test.go:79: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7h59dsaz_test.go:79: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7h59dsaz_test.go:79: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a89f)\n\t/tmp/tmpoojcxubh_test.go:20 +0x256\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmpoojcxubh_test.go:37 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int_slice(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string_slice(tup.(int), lst.([]string))\n        default:\n            panic(\"Unsupported type\")\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int_slice(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string_slice(tup.(string), lst.([]string))\n        default:\n            panic(\"Unsupported type\")\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4i8s5vw1_test.go:14:20: undefined: count_Occurrence_int_int_slice\n/tmp/tmp4i8s5vw1_test.go:16:20: undefined: count_Occurrence_int_string_slice\n/tmp/tmp4i8s5vw1_test.go:23:20: undefined: count_Occurrence_string_int_slice\n/tmp/tmp4i8s5vw1_test.go:25:20: undefined: count_Occurrence_string_string_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            panic(\"Second argument is not a list\")\n        }\n    default:\n        panic(\"First argument is not a list\")\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: First argument is not a list [recovered]\n\tpanic: First argument is not a list\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca80, 0x56df80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008cd98, 0x51aee0, 0xc00008cd80, 0x58a85f)\n\t/tmp/tmp4s2_r4fn_test.go:29 +0x105\ncommand-line-arguments_test.TestCount_Occurrence(0xc000186300)\n\t/tmp/tmp4s2_r4fn_test.go:40 +0x1a5\ntesting.tRunner(0xc000186300, 0x54f320)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // check if the type of tup is in the type of lst\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfged57kp_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfged57kp_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfged57kp_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup := tup.(int)\n            count := 0\n            for _, v := range lst {\n                if v == tup {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup := tup.([]int)\n            count := 0\n            for _, v := range lst {\n                for _, v2 := range tup {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcywzgfvf_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcywzgfvf_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcywzgfvf_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        default:\n            fmt.Println(\"Error: unsupported type.\")\n            return -1\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        default:\n            fmt.Println(\"Error: unsupported type.\")\n            return -1\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64_float64(tup.(float64), lst.([]float64))\n        default:\n            fmt.Println(\"Error: unsupported type.\")\n            return -1\n        }\n    default:\n        fmt.Println(\"Error: unsupported type.\")\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8o728htf_test.go:14:20: undefined: count_Occurrence_int_int\n/tmp/tmp8o728htf_test.go:16:20: undefined: count_Occurrence_int_string\n/tmp/tmp8o728htf_test.go:18:20: undefined: count_Occurrence_int_float64\n/tmp/tmp8o728htf_test.go:26:20: undefined: count_Occurrence_string_int\n/tmp/tmp8o728htf_test.go:28:20: undefined: count_Occurrence_string_string\n/tmp/tmp8o728htf_test.go:30:20: undefined: count_Occurrence_string_float64\n/tmp/tmp8o728htf_test.go:38:20: undefined: count_Occurrence_float64_int\n/tmp/tmp8o728htf_test.go:40:20: undefined: count_Occurrence_float64_string\n/tmp/tmp8o728htf_test.go:42:20: undefined: count_Occurrence_float64_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        var count int\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a7ff)\n\t/tmp/tmprcuus8dq_test.go:22 +0x285\ncommand-line-arguments_test.TestCount_Occurrence(0xc0001a0300)\n\t/tmp/tmprcuus8dq_test.go:46 +0x1a5\ntesting.tRunner(0xc0001a0300, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcvytdlqp_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Not supported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a89f)\n\t/tmp/tmpv4o280x7_test.go:20 +0x256\ncommand-line-arguments_test.TestCount_Occurrence(0xc000102600)\n\t/tmp/tmpv4o280x7_test.go:37 +0x1a5\ntesting.tRunner(0xc000102600, 0x54f300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpoed0tn9b_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpoed0tn9b_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpoed0tn9b_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case []string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        fmt.Println(\"Unsupported type\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4g5ozie6_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp4g5ozie6_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            t := tup.([]int)\n            l := lst.([]int)\n            c := 0\n            for _, v := range l {\n                for _, vv := range t {\n                    if v == vv {\n                        c++\n                    }\n                }\n            }\n            return c\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            t := tup.([]string)\n            l := lst.([]string)\n            c := 0\n            for _, v := range l {\n                for _, vv := range t {\n                    if v == vv {\n                        c++\n                    }\n                }\n            }\n            return c\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpi6_lvocm_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpi6_lvocm_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpi6_lvocm_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int(tup.(int), lst.([]float64))\n        case []bool:\n            return count_Occurrence_int(tup.(int), lst.([]bool))\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string(tup.(string), lst.([]float64))\n        case []bool:\n            return count_Occurrence_string(tup.(string), lst.([]bool))\n        default:\n            return 0\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        case []bool:\n            return count_Occurrence_float64(tup.(float64), lst.([]bool))\n        default:\n            return 0\n        }\n    case bool:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_bool(tup.(bool), lst.([]int))\n        case []string:\n            return count_Occurrence_bool(tup.(bool), lst.([]string))\n        case []float64:\n            return count_Occurrence_bool(tup.(bool\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpaibobs4r_test.go:57:51: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        switch tup.(type) {\n        case int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch tup.(type) {\n        case string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp5t62a_02_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp5t62a_02_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp5t62a_02_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch tup.(type) {\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123500,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9zp3esk7_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            return count_Occurrence_string(tup.([]string), lst.([]string))\n        case []int:\n            return count_Occurrence_string_int(tup.([]string), lst.([]int))\n        default:\n            return -1\n        }\n    case []int:\n        switch lst.(type) {\n        case []string:\n            return count_Occurrence_int_string(tup.([]int), lst.([]string))\n        case []int:\n            return count_Occurrence_int(tup.([]int), lst.([]int))\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvram664n_test.go:14:20: undefined: count_Occurrence_string\n/tmp/tmpvram664n_test.go:16:20: undefined: count_Occurrence_string_int\n/tmp/tmpvram664n_test.go:23:20: undefined: count_Occurrence_int_string\n/tmp/tmpvram664n_test.go:25:20: undefined: count_Occurrence_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_string := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_string := tup.(string)\n            count := 0\n            for _, v := range lst_string {\n                if v == tup_string {\n                    count += 1\n                }\n            }\n            return count\n        case []string:\n            tup_string := tup.([]string)\n            count := 0\n            for _, v := range lst_string {\n                for _, v2 := range tup_string {\n                    if v == v2 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpega0_nx1_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpega0_nx1_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpega0_nx1_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_ := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_ := tup.(int)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_ := tup.([]int)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        lst_ := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_ := tup.(string)\n            count := 0\n            for _, v := range lst_ {\n                if v == tup_ {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_ := tup.([]string)\n            count := 0\n            for _, v := range lst_ {\n                for _, v2 := range tup_ {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpu11aevnm_test.go:78: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpu11aevnm_test.go:78: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpu11aevnm_test.go:78: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case float64:\n        switch lst.(type) {\n        case []float64:\n            var count int\n            for _, v := range lst.([]float64) {\n                if v == tup.(float64) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk22z1k78_test.go:70: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk22z1k78_test.go:70: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk22z1k78_test.go:70: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, v2 := range tup_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpcoh3qv9p_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517491,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk4ote6oc_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123499,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8r2yi4iy_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmp8r2yi4iy_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        switch tup.(type) {\n        case int:\n            tup_int := tup.(int)\n            count := 0\n            for _, v := range lst_int {\n                if v == tup_int {\n                    count++\n                }\n            }\n            return count\n        case []int:\n            tup_int := tup.([]int)\n            count := 0\n            for _, v := range lst_int {\n                for _, vv := range tup_int {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        lst_str := lst.([]string)\n        switch tup.(type) {\n        case string:\n            tup_str := tup.(string)\n            count := 0\n            for _, v := range lst_str {\n                if v == tup_str {\n                    count++\n                }\n            }\n            return count\n        case []string:\n            tup_str := tup.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, vv := range tup_str {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpmta01of4_test.go:83: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpmta01of4_test.go:83: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpmta01of4_test.go:83: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            var count int = 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            var count int = 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123506,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1qof1_20_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        lst_ := lst.([]int)\n        count := 0\n        for _, v := range lst_ {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        lst_ := lst.([]string)\n        count := 0\n        for _, v := range lst_ {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        fmt.Println(\"Unsupported type\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc000092598, 0x51aee0, 0xc000092580, 0x58a89f)\n\t/tmp/tmp0vxczqdu_test.go:24 +0x285\ncommand-line-arguments_test.TestCount_Occurrence(0xc000001380)\n\t/tmp/tmp0vxczqdu_test.go:42 +0x1a5\ntesting.tRunner(0xc000001380, 0x54f2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_int(tup.(int), lst.([]int))\n        case []string:\n            return count_Occurrence_int_string(tup.(int), lst.([]string))\n        case []float64:\n            return count_Occurrence_int_float64(tup.(int), lst.([]float64))\n        case []bool:\n            return count_Occurrence_int_bool(tup.(int), lst.([]bool))\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_string_int(tup.(string), lst.([]int))\n        case []string:\n            return count_Occurrence_string(tup.(string), lst.([]string))\n        case []float64:\n            return count_Occurrence_string_float64(tup.(string), lst.([]float64))\n        case []bool:\n            return count_Occurrence_string_bool(tup.(string), lst.([]bool))\n        default:\n            return 0\n        }\n    case float64:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_float64_int(tup.(float64), lst.([]int))\n        case []string:\n            return count_Occurrence_float64_string(tup.(float64), lst.([]string))\n        case []float64:\n            return count_Occurrence_float64(tup.(float64), lst.([]float64))\n        case []bool:\n            return count_Occurrence_float64_bool(tup.(float64), lst.([]bool))\n        default:\n            return 0\n        }\n    case bool:\n        switch lst.(type) {\n        case []int:\n            return count_Occurrence_bool_int(tup.(bool), lst.([]int))\n        case []string:\n            return count_Occurrence_bool_string(tup.(bool), lst.(\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwawed_pa_test.go:56:6: expected '(', found TestCount_Occurrence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range lst.([]int) {\n                if v == tup.(int) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                if v == tup.(string) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2utevwiv_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2utevwiv_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2utevwiv_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch lst.(type) {\n    case []int:\n        var count int\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        var count int\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        var count int\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n        return count\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123507,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\npanic: interface conversion: interface {} is []interface {}, not string [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523820, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_Occurrence(0x51a520, 0xc00008c598, 0x51aee0, 0xc00008c580, 0x58a7ff)\n\t/tmp/tmp6d_75cdh_test.go:22 +0x285\ncommand-line-arguments_test.TestCount_Occurrence(0xc000102600)\n\t/tmp/tmp6d_75cdh_test.go:47 +0x1a5\ntesting.tRunner(0xc000102600, 0x54f2e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}