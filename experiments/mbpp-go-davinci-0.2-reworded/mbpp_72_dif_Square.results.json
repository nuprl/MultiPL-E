{
  "name": "mbpp_72_dif_Square",
  "language": "go_test.go",
  "prompt": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if (i * i) - (j * j) == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i <= n; i++ {\n        if i * i > n {\n            break\n        }\n    }\n    i--\n    for j := i; j >= 1; j-- {\n        if i * i - j * j == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnjhncjxw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnjhncjxw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        j := n - i*i\n        if j >= 0 && j == int(math.Sqrt(float64(j)))*int(math.Sqrt(float64(j))) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5_zngtk_test.go:18:31: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        j := n - i * i\n        if j == 0 {\n            return true\n        }\n        if j < 0 {\n            return false\n        }\n        for k := 1; k * k <= j; k++ {\n            if k * k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpl6yc269g_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpl6yc269g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        if n % i == 0 {\n            if i * i == n {\n                return true\n            }\n            if (n / i) % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpcuh3v87a_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpcuh3v87a_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpcuh3v87a_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp83aya4rn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp83aya4rn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnju9eqvm_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnju9eqvm_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i < n; i++ {\n        if i*i > n {\n            break\n        }\n    }\n    for j := i-1; j > 0; j-- {\n        if (i*i - j*j) == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpfxlusgia_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpfxlusgia_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := i; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    for i := 1; i*i < n; i++ {\n        if (n - i*i) % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpd2yp9wd1_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        j := n - i*i\n        if j < 0 {\n            return false\n        }\n        if j == 0 {\n            return true\n        }\n        for k := 1; k*k <= j; k++ {\n            if k*k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp1zxos85w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1zxos85w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpuq4nw_v3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i <= n; i++ {\n        if i*i > n {\n            break\n        }\n    }\n    i--\n    for j := i; j > 0; j-- {\n        if (i*i - j*j) == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpqqdk3h40_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpqqdk3h40_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        j := n - i*i\n        if j < 0 {\n            break\n        }\n        if j == 0 {\n            return true\n        }\n        for k := 1; k*k <= j; k++ {\n            if k*k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpv8zcpnv5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpv8zcpnv5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n        if is_Square(n - i * i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmwfd9bep_test.go:20:12: undefined: is_Square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i*i < n; i++ {\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpbi8nvszg_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1qhmd5eg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1qhmd5eg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i*i <= n; i++ {\n        if (n % i == 0) && ((n / i + i) % 2 == 0) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i <= n; i++ {\n        if i * i > n {\n            break\n        }\n    }\n    for j := 1; j < i; j++ {\n        if (i * i - j * j) == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := i; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp83aya4rn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp83aya4rn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp8f49h64g_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp8f49h64g_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n        if (n - i*i)%2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpa409zrys_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i*i < n; i++ {\n        for j := 1; j*j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpo29z_774_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpo29z_774_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptqijdhiw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptqijdhiw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp5f3g33lz_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp5f3g33lz_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpku1qh_av_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpku1qh_av_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpocazl_jj_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpocazl_jj_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123948,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp0_bk02w9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp0_bk02w9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if n%i == 0 && n/i == i {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp_5zic976_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp_5zic976_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := i; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpfl513qmi_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpfl513qmi_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptqijdhiw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptqijdhiw_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := i; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpylwrjd7e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9u6g9x0b_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9u6g9x0b_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpu09y6s_z_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpu09y6s_z_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j < n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmplz9dce4i_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmplz9dce4i_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpl45tj7pt_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpl45tj7pt_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjsz7_71p_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjsz7_71p_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpcuw7_jyf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpcuw7_jyf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i, j int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpeoixaq0x_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpeoixaq0x_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp2_4w5qtl_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp2_4w5qtl_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i < n; i++ {\n        for j := 1; j*j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp5n8d173w_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp5n8d173w_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var i int\n    for i = 1; i*i < n; i++ {\n        if n % i == 0 {\n            if (n / i) % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpgjh8vnhj_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpgjh8vnhj_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpgjh8vnhj_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n        if is_Square(n - i * i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqs1ahcge_test.go:20:12: undefined: is_Square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpuq4nw_v3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i*i < n; i++ {\n        if (n - i*i) % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp3vjqjlu4_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpggd40qoz_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpggd40qoz_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpc789lzmh_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpc789lzmh_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 0; i * i < n; i++ {\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpopi87kmc_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpbh7f2_4i_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpbh7f2_4i_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        j := n - i*i\n        if j < 0 {\n            return false\n        }\n        if j == 0 || j == 1 {\n            return true\n        }\n        if j*j == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpr10k3zu7_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpr10k3zu7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpn95q8k66_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    for i := 0; i * i < n; i++ {\n        for j := i; j * j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmphu2hafsp_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmphu2hafsp_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i*i > n {\n            return false\n        }\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp1l8k3tvi_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 2; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpa16urv50_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpa16urv50_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjasynu45_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpszidtbxt_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if n%i == 0 {\n            if i*i == n {\n                return true\n            }\n            if (n/i)%2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpsg9lfwo__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpsg9lfwo__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        j := n - i*i\n        if j < 0 {\n            break\n        }\n        if j == 0 {\n            return true\n        }\n        for k := 1; k*k <= j; k++ {\n            if k*k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpv8zcpnv5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpv8zcpnv5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpf35d_m4l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpf35d_m4l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i <= n; i++ {\n        if (n % i == 0) {\n            if (i * i == n) {\n                return true\n            }\n            if ((n / i) % 2 == 0) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp4sn9ntkq_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp4sn9ntkq_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp4sn9ntkq_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpi14n0q0u_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpi14n0q0u_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptso_m_m1_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1qhmd5eg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1qhmd5eg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i < n; i++ {\n        for j := 0; j*j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123952,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpy1djipe__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpy1djipe__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i * i < n; i++ {\n        for j := 1; j * j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123952,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpgp_i5751_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpgp_i5751_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i * i <= n; i++ {\n        if (n - i * i) % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123952,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpga32oeih_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123952,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp2twmwze9_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp2twmwze9_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9u6g9x0b_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9u6g9x0b_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if n % i == 0 {\n            if (n / i) % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp44ro4rhx_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp44ro4rhx_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp44ro4rhx_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if i * i > n {\n            return false\n        }\n        if n % (i * i) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp2tnp1j9w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp2tnp1j9w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpkg169chk_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpkg169chk_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i < n; i++ {\n        for j := i; j*j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp58b2bm4__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp58b2bm4__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if (n % i == 0) && ((n / i) % 2 == 0) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnakxf0is_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpnakxf0is_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnakxf0is_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if (n % i == 0) && (n/i % 2 == 0) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpen768rsr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpen768rsr_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpen768rsr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmn1v38ew_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprttlpwn__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp8630c0nf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp8630c0nf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n        for j := i + 1; j*j <= n; j++ {\n            if i*i + j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpyssrrhdu_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpyssrrhdu_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptvsbu8us_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp7ahknx3i_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1n7w_q5p_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp73jwng5h_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp73jwng5h_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i*i < n; i++ {\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpbi8nvszg_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n % 4 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp6lpl0qqr_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp6lpl0qqr_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123950,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpu09y6s_z_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpu09y6s_z_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i, j int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpz74jrb60_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpz74jrb60_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i <= n; i++ {\n        if i * i > n {\n            break\n        }\n    }\n    i--\n    for j := i; j > 0; j-- {\n        if i * i - j * j == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpo42jmw5g_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpo42jmw5g_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        j := n - i * i\n        if j < 0 {\n            break\n        }\n        if j == 0 {\n            return true\n        }\n        for k := 1; k * k <= j; k++ {\n            if k * k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp2rjl9ef2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp2rjl9ef2_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 0; i*i < n; i++ {\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp480asixw_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if n%i == 0 {\n            if i*i == n {\n                return true\n            }\n            if (n/i)%2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmph16fbs5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if n % i == 0 {\n            if i % 2 == 0 || n / i % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpx6zo0ez5_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpx6zo0ez5_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpx6zo0ez5_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123951,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpi14n0q0u_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpi14n0q0u_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmprvxc7bbp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510613,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp005u9aa0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i*i < n; i++ {\n        if (n - i*i) % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp8vsx5fjm_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i < n; i++ {\n        for j := i; j*j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp58b2bm4__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp58b2bm4__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123953,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpebj1pe5i_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpebj1pe5i_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123947,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}