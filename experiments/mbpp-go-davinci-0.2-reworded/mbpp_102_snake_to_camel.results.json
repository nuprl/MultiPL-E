{
  "name": "mbpp_102_snake_to_camel",
  "language": "go_test.go",
  "prompt": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first = true\n        } else {\n            if is_first {\n                result += string(char)\n                is_first = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyyoq_5iy_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyyoq_5iy_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyyoq_5iy_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, ch := range word {\n        if ch == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(ch - 32)\n                next_upper = false\n            } else {\n                result += string(ch)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(char)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmppx170by3_test.go:39: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmppx170by3_test.go:39: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmppx170by3_test.go:39: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var upper bool\n    for _, v := range word {\n        if v == '_' {\n            upper = true\n            continue\n        }\n        if upper {\n            result += string(v - 32)\n            upper = false\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5sq6s4kk_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5sq6s4kk_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5sq6s4kk_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result = string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpjiowrut7_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpjiowrut7_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpjiowrut7_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b1248en_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, char := range word {\n        if i == 0 {\n            camel += string(char)\n        } else if char == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(char - 32)\n        } else {\n            camel += string(char)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpjqyb30rv_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpjqyb30rv_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpjqyb30rv_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else {\n            if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel = fmt.Sprintf(\"%c\", v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel = fmt.Sprintf(\"%s%c\", camel, v-32)\n        } else {\n            camel = fmt.Sprintf(\"%s%c\", camel, v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpnsh4m4td_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpnsh4m4td_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpnsh4m4td_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            result += string(word[i+1] - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpv7686qry_test.go:36: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpv7686qry_test.go:36: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpv7686qry_test.go:36: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0jjbx6do_test.go:12:9: i declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if string(v) == \"_\" {\n                result += string(word[i+1] - 32)\n                i++\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaacbm13z_test.go:41: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaacbm13z_test.go:41: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaacbm13z_test.go:41: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n            } else {\n                result += string(char - 32)\n            }\n            is_first_char = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92gx__er_test.go:42: expected 'PythonProgram', got 'pYTHONpROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92gx__er_test.go:42: expected 'PythonLanguage', got 'pYTHONlANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92gx__er_test.go:42: expected 'ProgrammingLanguage', got 'pROGRAMMINGlANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var new_word string\n    for i, letter := range word {\n        if letter == '_' {\n            continue\n        }\n        if i == 0 {\n            new_word += string(letter)\n        } else if word[i-1] == '_' {\n            new_word += string(letter - 32)\n        } else {\n            new_word += string(letter)\n        }\n    }\n    return new_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpr_ob59rr_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpr_ob59rr_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpr_ob59rr_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4_fajsv9_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4_fajsv9_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4_fajsv9_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpixnalhd__test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, ch := range word {\n        if ch == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(ch - 32)\n                next_upper = false\n            } else {\n                result += string(ch)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4e41pbj7_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4e41pbj7_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4e41pbj7_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4gwqc3de_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4gwqc3de_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4gwqc3de_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzhd43gpq_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzhd43gpq_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzhd43gpq_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var new_word string\n    var i int\n    for i = 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            new_word += string(word[i] - 32)\n        } else {\n            new_word += string(word[i])\n        }\n    }\n    return new_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp54qcpdw9_test.go:38: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp54qcpdw9_test.go:38: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp54qcpdw9_test.go:38: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool\n\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n            continue\n        }\n\n        if v == '_' {\n            is_upper = true\n            continue\n        }\n\n        if is_upper {\n            result += string(v - 32)\n            is_upper = false\n        } else {\n            result += string(v)\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp66xlnijc_test.go:50: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp66xlnijc_test.go:50: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp66xlnijc_test.go:50: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool\n    for i, c := range word {\n        if c == '_' {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result += string(c - 32)\n            is_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjukkp7ms_test.go:12:9: i declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_is_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_is_upper = true\n            continue\n        }\n        if next_is_upper {\n            result += string(c - 32)\n            next_is_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpb1ab44na_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpb1ab44na_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpb1ab44na_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n            continue\n        }\n        if prev_char_is_underscore {\n            result += string(char - 32)\n            prev_char_is_underscore = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0q967wxb_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0q967wxb_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0q967wxb_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if i == 0 {\n            result += string(char)\n        } else if char == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123210,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9_t9zccu_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9_t9zccu_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9_t9zccu_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, v := range word {\n        if v == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(v - 32)\n                next_upper = false\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123210,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpnm7rqb6p_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpnm7rqb6p_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpnm7rqb6p_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result = fmt.Sprintf(\"%c\", v)\n        } else if v == '_' {\n            result += fmt.Sprintf(\"%c\", word[i+1] - 32)\n            i++\n        } else {\n            result += fmt.Sprintf(\"%c\", v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmphev5a6b4_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmphev5a6b4_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmphev5a6b4_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b1248en_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp8epn8qz4_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp8epn8qz4_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp8epn8qz4_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var i int\n    for i = 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            result += string(word[i] - 32)\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n            next_upper = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpxnfnd8y1_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpxnfnd8y1_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpxnfnd8y1_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, ch := range word {\n        if ch == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(ch - 32)\n                next_upper = false\n            } else {\n                result += string(ch)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsi6ez39s_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var i int\n    for i = 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            result += string(word[i] - 32)\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            camel += string(c)\n        } else if word[i-1] == '_' {\n            camel += string(c - 32)\n        } else {\n            camel += string(c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool = false\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result += string(word[i] - 32)\n            is_upper = false\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            } else {\n                if word[i-1] == '_' {\n                    result += string(v - 32)\n                } else {\n                    result += string(v)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpu_b46hx2_test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpu_b46hx2_test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpu_b46hx2_test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c != '_' {\n            if i > 0 && word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp46r7vnji_test.go:38: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp46r7vnji_test.go:38: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp46r7vnji_test.go:38: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel = fmt.Sprintf(\"%c\", v)\n        } else if v == '_' {\n            continue\n        } else if word[i - 1] == '_' {\n            camel = fmt.Sprintf(\"%s%c\", camel, v - 32)\n        } else {\n            camel = fmt.Sprintf(\"%s%c\", camel, v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpar2h1zbz_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpar2h1zbz_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpar2h1zbz_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n            } else {\n                result += string(char)\n            }\n            is_first_char = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpiq8pmt7g_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpiq8pmt7g_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpiq8pmt7g_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(char)\n                is_first_word = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp2a3_e0u3_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp2a3_e0u3_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp2a3_e0u3_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var i int\n    for i = 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            result += string(word[i] - 32)\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmprtmyvvvb_test.go:38: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n            } else {\n                result += string(char)\n            }\n            prev_char_is_underscore = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpffck4thz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpffck4thz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpffck4thz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, w := range word {\n        if i == 0 {\n            result += string(w)\n        } else if w == '_' {\n            result += string(word[i+1])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpqpo2ndpk_test.go:36: expected 'PythonProgram', got 'pp'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpqpo2ndpk_test.go:36: expected 'PythonLanguage', got 'pl'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpqpo2ndpk_test.go:36: expected 'ProgrammingLanguage', got 'pl'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(char - 32)\n                is_first_word = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            }\n            if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            camel += string(c)\n        } else if word[i-1] == '_' {\n            camel += string(c - 32)\n        } else {\n            camel += string(c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpooxb_6ng_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0govtsrb_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdj0z0vqx_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel_word string\n    for i, c := range word {\n        if c == '_' {\n            i++\n            c = rune(word[i])\n            camel_word += string(c - 32)\n        } else {\n            camel_word += string(c)\n        }\n    }\n    return camel_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpepsp3dzj_test.go:38: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpepsp3dzj_test.go:38: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpepsp3dzj_test.go:38: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var flag bool\n    for _, c := range word {\n        if c == '_' {\n            flag = true\n        } else {\n            if flag {\n                result += string(c - 32)\n                flag = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpkp0nc92z_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpkp0nc92z_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpkp0nc92z_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpixnalhd__test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n            } else {\n                result += string(char)\n            }\n            prev_char_is_underscore = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpffck4thz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpffck4thz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpffck4thz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, r := range word {\n        if r == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(r)\n        } else {\n            result += string(r - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpa_nbhkrr_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpa_nbhkrr_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpa_nbhkrr_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}