{
  "name": "mbpp_265_list_split",
  "language": "go_test.go",
  "prompt": "package list_split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunc list_split(S interface{}, step int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "func TestList_Split(t *testing.T) {\n  candidate := list_split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"}, 3), expected: [][]int{[]string{\"a\", \"d\", \"g\", \"j\", \"m\"}, []string{\"b\", \"e\", \"h\", \"k\", \"n\"}, []string{\"c\", \"f\", \"i\", \"l\"}} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), expected: [][]int{[]int{1, 4, 7, 10, 13}, []int{2, 5, 8, 11, 14}, []int{3, 6, 9, 12}} },\n     { actual: candidate([]string{\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"}, 2), expected: [][]int{[]string{\"python\", \"C\", \"DBMS\"}, []string{\"java\", \"C++\", \"SQL\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = nil\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = nil\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var res []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            res = append(res, S.([]int)[i:i+step])\n        }\n        return res\n    case []string:\n        var res []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            res = append(res, S.([]string)[i:i+step])\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    switch S.(type) {\n    case []int:\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n    case []string:\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    var result []interface{}\n    switch S.(type) {\n    case []int:\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n    case []string:\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n    case []float64:\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result []interface{}\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i + step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i + step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n"
  ]
}