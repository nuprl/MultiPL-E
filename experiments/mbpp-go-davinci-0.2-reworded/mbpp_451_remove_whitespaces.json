{
  "name": "mbpp_451_remove_whitespaces",
  "language": "go_test.go",
  "prompt": "package remove_whitespaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all whitespaces from the given string.\nfunc remove_whitespaces(text1 string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Whitespaces(t *testing.T) {\n  candidate := remove_whitespaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\" Google    Flutter \"), expected: \"GoogleFlutter\" },\n     { actual: candidate(\" Google    Dart \"), expected: \"GoogleDart\" },\n     { actual: candidate(\" iOS    Swift \"), expected: \"iOSSwift\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    text2 := \"\"\n    for _, c := range text1 {\n        if c != ' ' {\n            text2 += string(c)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    text2 := \"\"\n    for _, c := range text1 {\n        if c != ' ' {\n            text2 += string(c)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, c := range text1 {\n        if c != ' ' {\n            text2 += string(c)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n",
    "    var text2 string\n    for _, char := range text1 {\n        if char != ' ' {\n            text2 += string(char)\n        }\n    }\n    return text2\n}\n"
  ]
}