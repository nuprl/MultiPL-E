{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "go_test.go",
  "prompt": "package text_lowercase_underscore_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunc text_lowercase_underscore(text string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "func TestText_Lowercase_Underscore(t *testing.T) {\n  candidate := text_lowercase_underscore\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aab_cbbbc\"), expected: true },\n     { actual: candidate(\"aab_Abbbc\"), expected: false },\n     { actual: candidate(\"Aaab_abbbc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if i == 0 && text[i] == '_' {\n            return false\n        }\n        if i == len(text) - 1 && text[i] == '_' {\n            return false\n        }\n        if text[i] == '_' && text[i + 1] == '_' {\n            return false\n        }\n        if text[i] == '_' && !(text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n            return false\n        }\n        if !(text[i] >= 'a' && text[i] <= 'z') && !(text[i] == '_') {\n            return false\n        }\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] >= 'a' && text[i] <= 'z' {\n            if i == len(text) - 1 {\n                return true\n            }\n            if text[i + 1] == '_' {\n                i++\n                continue\n            }\n            return false\n        }\n        return false\n    }\n    return false\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(text); i++ {\n        if !((text[i] >= 'a' && text[i] <= 'z') || text[i] == '_') {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if i == 0 {\n            if text[i] >= 'A' && text[i] <= 'Z' {\n                return false\n            }\n        } else if i == len(text) - 1 {\n            if text[i] == '_' {\n                return false\n            }\n        } else {\n            if text[i] == '_' {\n                if text[i+1] == '_' {\n                    return false\n                }\n            } else if text[i] >= 'A' && text[i] <= 'Z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if !(text[i-1] >= 'a' && text[i-1] <= 'z') || !(text[i+1] >= 'a' && text[i+1] <= 'z') {\n                return false\n            }\n        } else if !(text[i] >= 'a' && text[i] <= 'z') {\n            return false\n        }\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    // your code here\n    return false\n}\n",
    "    var prev_char byte\n    var prev_char_is_underscore bool\n    var prev_char_is_lowercase bool\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if prev_char_is_underscore || !prev_char_is_lowercase {\n                return false\n            }\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore && !(text[i] >= 'a' && text[i] <= 'z') {\n                return false\n            }\n            prev_char_is_underscore = false\n            if text[i] >= 'a' && text[i] <= 'z' {\n                prev_char_is_lowercase = true\n            } else {\n                prev_char_is_lowercase = false\n            }\n        }\n        prev_char = text[i]\n    }\n    return !prev_char_is_underscore\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i, v := range text {\n        if i == 0 {\n            if v >= 'a' && v <= 'z' {\n                continue\n            } else {\n                return false\n            }\n        }\n        if v == '_' {\n            continue\n        }\n        if v >= 'a' && v <= 'z' {\n            continue\n        }\n        return false\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == len(text) - 1 {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}