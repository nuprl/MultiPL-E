{
  "name": "mbpp_459_remove_uppercase",
  "language": "go_test.go",
  "prompt": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'A' && ch <= 'Z' {\n            continue\n        }\n        str2 += string(ch)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var result string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        result += string(char)\n    }\n    return result\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c < 'A' || c > 'Z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 = str2 + string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 97 && char <= 122 {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'A' && ch <= 'Z' {\n            continue\n        }\n        str2 += string(ch)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'A' && v <= 'Z' {\n            continue\n        }\n        str2 += string(v)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "--- FAIL: TestRemove_Uppercase (0.00s)\n    --- FAIL: TestRemove_Uppercase/test_num__0 (0.00s)\n        tmpdthsx0ox_test.go:34: expected 'cstyoravoitshos', got 'AUFRETVW'\n    --- FAIL: TestRemove_Uppercase/test_num__1 (0.00s)\n        tmpdthsx0ox_test.go:34: expected 'wtchheinerntrdo', got 'ATTEAI'\n    --- FAIL: TestRemove_Uppercase/test_num__2 (0.00s)\n        tmpdthsx0ox_test.go:34: expected 'oiceachndreomendaion', got 'VESRACMTS'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var result string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var result string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'A' && v <= 'Z' {\n            continue\n        }\n        str2 += string(v)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'A' && ch <= 'Z' {\n            continue\n        }\n        str2 += string(ch)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var result string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c < 65 || c > 90 {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            continue\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            continue\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c < 'A' || c > 'Z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            continue\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'A' && ch <= 'Z' {\n            continue\n        }\n        str2 += string(ch)\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c < 'A' || c > 'Z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123012,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, ch := range str1 {\n        if ch >= 'a' && ch <= 'z' {\n            str2 += string(ch)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n    var str2 string\n    for _, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            str2 += string(c)\n        }\n    }\n    return str2\n}\n\nfunc TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}