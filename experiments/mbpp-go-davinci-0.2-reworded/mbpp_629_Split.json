{
  "name": "mbpp_629_Split",
  "language": "go_test.go",
  "prompt": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find even numbers from a list of numbers.\nfunc Split(list []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{2, 4} },\n     { actual: candidate([]int{4, 5, 6, 7, 8, 0, 1}), expected: []int{4, 6, 8, 0} },\n     { actual: candidate([]int{8, 12, 15, 19}), expected: []int{8, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var even []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var evens []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            evens = append(evens, num)\n        }\n    }\n    return evens\n}\n",
    "    var evens []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            evens = append(evens, num)\n        }\n    }\n    return evens\n}\n",
    "    var even []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var evens []int\n    for _, n := range list {\n        if n % 2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    return evens\n}\n",
    "    var evens []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            evens = append(evens, v)\n        }\n    }\n    return evens\n}\n",
    "    var evens []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            evens = append(evens, num)\n        }\n    }\n    return evens\n}\n",
    "    var even []int\n    for _, v := range list {\n        if v%2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            even = append(even, num)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            even = append(even, num)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            even = append(even, num)\n        }\n    }\n    return even\n}\n",
    "    var evens []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            evens = append(evens, num)\n        }\n    }\n    return evens\n}\n",
    "    var evens []int\n    for _, i := range list {\n        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n    return evens\n}\n",
    "    var even []int\n    for _, i := range list {\n        if i % 2 == 0 {\n            even = append(even, i)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, i := range list {\n        if i % 2 == 0 {\n            even = append(even, i)\n        }\n    }\n    return even\n}\n",
    "    var evens []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            evens = append(evens, num)\n        }\n    }\n    return evens\n}\n",
    "    var even []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, num := range list {\n        if num % 2 == 0 {\n            even = append(even, num)\n        }\n    }\n    return even\n}\n",
    "    var even []int\n    for _, i := range list {\n        if i % 2 == 0 {\n            even = append(even, i)\n        }\n    }\n    return even\n}\n"
  ]
}