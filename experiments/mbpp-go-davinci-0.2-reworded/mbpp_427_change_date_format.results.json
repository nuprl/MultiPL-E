{
  "name": "mbpp_427_change_date_format",
  "language": "go_test.go",
  "prompt": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py",
  "prompt_terminology": "reworded",
  "tests": "func TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:]\n        }\n        if v == '-' {\n            day = dt[i+1:]\n            break\n        }\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmp80t_b8g1_test.go:39: expected '02-01-2026', got '01-02-01-02-2026'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmp80t_b8g1_test.go:39: expected '13-11-2020', got '11-13-11-13-2020'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmp80t_b8g1_test.go:39: expected '26-04-2021', got '04-26-04-26-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            yyyy = dt[:i]\n            break\n        }\n    }\n\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            mm = dt[i - 2:i]\n            break\n        }\n    }\n\n    dd = dt[i + 1:]\n\n    return fmt.Sprintf(\"%s-%s-%s\", dd, mm, yyyy)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var d, m, y string\n    var i int\n    for i = 0; i < 4; i++ {\n        y += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        m += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year, month, day = dt[0:4], dt[5:7], dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    fmt.Sscanf(dt, \"%s-%s-%s\", &year, &month, &day)\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '02-01-2026', got '--2026-01-02'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '13-11-2020', got '--2020-11-13'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '26-04-2021', got '--2021-04-26'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, c := range dt {\n        if i == 4 || i == 7 {\n            continue\n        }\n        if i < 4 {\n            year += string(c)\n        } else if i < 7 {\n            month += string(c)\n        } else {\n            day += string(c)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var dd, mm, yyyy string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        yyyy += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        mm += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        dd += string(dt[i])\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, c := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n            break\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcxk39v_l_test.go:11:12: c declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        yyyy += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        mm += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        dd += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", dd, mm, yyyy)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%d-%d-%d\", &y, &m, &d)\n    return fmt.Sprintf(\"%d-%d-%d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpml9xqiom_test.go:30: expected '02-01-2026', got '2-1-2026'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpml9xqiom_test.go:30: expected '26-04-2021', got '26-4-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n        }\n        if string(v) == \"-\" {\n            continue\n        }\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i := 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            year = dt[:i]\n            dt = dt[i+1:]\n            break\n        }\n    }\n    for i := 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            month = dt[:i]\n            dt = dt[i+1:]\n            break\n        }\n    }\n    day = dt\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i := 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            year = dt[:i]\n            dt = dt[i+1:]\n            break\n        }\n    }\n    for i := 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            month = dt[:i]\n            dt = dt[i+1:]\n            break\n        }\n    }\n    day = dt\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < 4; i++ {\n        yyyy += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        mm += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        dd += string(dt[i])\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < 4; i++ {\n        y += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        m += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        d += string(dt[i])\n    }\n    return d + \"-\" + m + \"-\" + y\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            year = dt[:i]\n            break\n        }\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            month = dt[i - 2:i]\n            break\n        }\n    }\n    day = dt[i + 1:]\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < 4; i++ {\n        y += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        m += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        d += string(dt[i])\n    }\n    return d + \"-\" + m + \"-\" + y\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    for i, c := range dt {\n        if i == 4 {\n            yyyy = yyyy + \"-\"\n        }\n        if i == 7 {\n            mm = mm + \"-\"\n        }\n        if i < 4 {\n            yyyy = yyyy + string(c)\n        } else if i > 4 && i < 7 {\n            mm = mm + string(c)\n        } else {\n            dd = dd + string(c)\n        }\n    }\n    return dd + mm + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpctsncydg_test.go:44: expected '02-01-2026', got '--0201-2026-'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmpctsncydg_test.go:44: expected '13-11-2020', got '--1311-2020-'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpctsncydg_test.go:44: expected '26-04-2021', got '--2604-2021-'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    // split the date string into an array of strings\n    dt_arr := strings.Split(dt, \"-\")\n    // return the date in the new format\n    return fmt.Sprintf(\"%s-%s-%s\", dt_arr[2], dt_arr[1], dt_arr[0])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp03rusnsf_test.go:11:15: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var dt_arr []string = strings.Split(dt, \"-\")\n    return fmt.Sprintf(\"%s-%s-%s\", dt_arr[2], dt_arr[1], dt_arr[0])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmperod50as_test.go:10:27: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    y = dt[0:4]\n    m = dt[5:7]\n    d = dt[8:10]\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < 4; i++ {\n        yyyy += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        mm += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        dd += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", dd, mm, yyyy)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var d, m, y string\n    for i, c := range dt {\n        if i == 4 {\n            d = dt[:i]\n            m = dt[i+1:i+3]\n            y = dt[i+4:]\n            break\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", y, m, d)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzs16xjx_test.go:11:12: c declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    // Write your code here\n    return dt\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpd0d3dkau_test.go:29: expected '02-01-2026', got '2026-01-02'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmpd0d3dkau_test.go:29: expected '13-11-2020', got '2020-11-13'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpd0d3dkau_test.go:29: expected '26-04-2021', got '2021-04-26'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, c := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n            break\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcxk39v_l_test.go:11:12: c declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var result string\n    result = dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n    return result\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        yyyy += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        mm += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        dd += string(dt[i])\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if v == '-' {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n            break\n        }\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    // Split the date string into year, month and day.\n    y, m, d := dt[0:4], dt[5:7], dt[8:10]\n\n    // Return the date in dd-mm-yyyy format.\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < 4; i++ {\n        yyyy += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        mm += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        dd += string(dt[i])\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    // Split the string into an array of strings\n    dt_arr := strings.Split(dt, \"-\")\n    // Return the array with the elements in reverse order\n    return fmt.Sprintf(\"%s-%s-%s\", dt_arr[2], dt_arr[1], dt_arr[0])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd83y6_90_test.go:11:15: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n        }\n        fmt.Printf(\"%c\\n\", v)\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        yyyy += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        mm += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        dd += string(dt[i])\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i := 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            year = dt[0:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:i+6]\n        }\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\npanic: runtime error: slice bounds out of range [:13] with length 10 [recovered]\n\tpanic: runtime error: slice bounds out of range [:13] with length 10\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.change_date_format(...)\n\t/tmp/tmp4mzfmhk7_test.go:15\ncommand-line-arguments_test.TestChange_Date_Format(0xc000102600)\n\t/tmp/tmp4mzfmhk7_test.go:28 +0x6a7\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%d-%d-%d\", &y, &m, &d)\n    return fmt.Sprintf(\"%d-%d-%d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpml9xqiom_test.go:30: expected '02-01-2026', got '2-1-2026'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpml9xqiom_test.go:30: expected '26-04-2021', got '26-4-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    fmt.Sscanf(dt, \"%s-%s-%s\", &year, &month, &day)\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '02-01-2026', got '--2026-01-02'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '13-11-2020', got '--2020-11-13'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmp3ycgutnq_test.go:30: expected '26-04-2021', got '--2021-04-26'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%d-%d-%d\", &y, &m, &d)\n    return fmt.Sprintf(\"%d-%d-%d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpml9xqiom_test.go:30: expected '02-01-2026', got '2-1-2026'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpml9xqiom_test.go:30: expected '26-04-2021', got '26-4-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, c := range dt {\n        if i == 4 || i == 7 {\n            continue\n        }\n        if i < 4 {\n            year += string(c)\n        } else if i < 7 {\n            month += string(c)\n        } else {\n            day += string(c)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < 4; i++ {\n        y += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        m += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        d += string(dt[i])\n    }\n    return d + \"-\" + m + \"-\" + y\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    y = dt[:4]\n    m = dt[5:7]\n    d = dt[8:]\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%d-%d-%d\", &y, &m, &d)\n    return fmt.Sprintf(\"%d-%d-%d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpml9xqiom_test.go:30: expected '02-01-2026', got '2-1-2026'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpml9xqiom_test.go:30: expected '26-04-2021', got '26-4-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%4d-%2d-%2d\", &y, &m, &d)\n    return fmt.Sprintf(\"%02d-%02d-%04d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < 4; i++ {\n        y += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        m += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        d += string(dt[i])\n    }\n    return d + \"-\" + m + \"-\" + y\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i < 4 {\n            year += string(v)\n        } else if i > 4 && i < 7 {\n            month += string(v)\n        } else if i > 7 && i < 10 {\n            day += string(v)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var yyyy, mm, dd string\n    var i int\n    for i = 0; i < 4; i++ {\n        yyyy += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        mm += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        dd += string(dt[i])\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", dd, mm, yyyy)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    // Split the string into an array of strings\n    dt_arr := strings.Split(dt, \"-\")\n    // Return the string in the new format\n    return fmt.Sprintf(\"%s-%s-%s\", dt_arr[2], dt_arr[1], dt_arr[0])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_4kzfdh_test.go:11:15: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        year += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        month += string(dt[i])\n    }\n    i++\n    for ; i < len(dt); i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d string\n    var i int\n    for i = 0; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        y += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        if dt[i] == '-' {\n            break\n        }\n        m += string(dt[i])\n    }\n    for i = i + 1; i < len(dt); i++ {\n        d += string(dt[i])\n    }\n    return d + \"-\" + m + \"-\" + y\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, c := range dt {\n        if i == 4 {\n            year = dt[:i]\n            month = dt[i+1:i+3]\n            day = dt[i+4:]\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2hy_fdqp_test.go:11:12: c declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, r := range dt {\n        if i < 4 {\n            year += string(r)\n        } else if i > 4 && i < 7 {\n            month += string(r)\n        } else {\n            day += string(r)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpno0ntv8y_test.go:38: expected '02-01-2026', got '--02-01-2026'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmpno0ntv8y_test.go:38: expected '13-11-2020', got '--13-11-2020'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpno0ntv8y_test.go:38: expected '26-04-2021', got '--26-04-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var y, m, d int\n    fmt.Sscanf(dt, \"%d-%d-%d\", &y, &m, &d)\n    return fmt.Sprintf(\"%d-%d-%d\", d, m, y)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmpml9xqiom_test.go:30: expected '02-01-2026', got '2-1-2026'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmpml9xqiom_test.go:30: expected '26-04-2021', got '26-4-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return fmt.Sprintf(\"%s-%s-%s\", dt[8:10], dt[5:7], dt[0:4])\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    return dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i < 4 {\n            year += string(v)\n        } else if i > 4 && i < 7 {\n            month += string(v)\n        } else {\n            day += string(v)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestChange_Date_Format (0.00s)\n    --- FAIL: TestChange_Date_Format/test_num__0 (0.00s)\n        tmp6sr74acy_test.go:38: expected '02-01-2026', got '--02-01-2026'\n    --- FAIL: TestChange_Date_Format/test_num__1 (0.00s)\n        tmp6sr74acy_test.go:38: expected '13-11-2020', got '--13-11-2020'\n    --- FAIL: TestChange_Date_Format/test_num__2 (0.00s)\n        tmp6sr74acy_test.go:38: expected '26-04-2021', got '--26-04-2021'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    for i, v := range dt {\n        if i < 4 {\n            year += string(v)\n        } else if i > 4 && i < 7 {\n            month += string(v)\n        } else if i > 7 {\n            day += string(v)\n        }\n    }\n    return fmt.Sprintf(\"%s-%s-%s\", day, month, year)\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n    var year, month, day string\n    var i int\n    for i = 0; i < 4; i++ {\n        year += string(dt[i])\n    }\n    for i = 5; i < 7; i++ {\n        month += string(dt[i])\n    }\n    for i = 8; i < 10; i++ {\n        day += string(dt[i])\n    }\n    return day + \"-\" + month + \"-\" + year\n}\n\nfunc TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510431,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}