{
  "name": "mbpp_611_max_of_nth",
  "language": "go_test.go",
  "prompt": "package max_of_nth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunc max_of_nth(test_list [][]int, N int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Of_Nth(t *testing.T) {\n  candidate := max_of_nth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{5, 6, 7}, []int{1, 3, 5}, []int{8, 9, 19}}, 2), expected: 19 },\n     { actual: candidate([][]int{[]int{6, 7, 8}, []int{2, 4, 6}, []int{9, 10, 20}}, 1), expected: 10 },\n     { actual: candidate([][]int{[]int{7, 8, 9}, []int{3, 5, 7}, []int{10, 11, 21}}, 1), expected: 11 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    max := test_list[0][N]\n    for i := 0; i < len(test_list); i++ {\n        if test_list[i][N] > max {\n            max = test_list[i][N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := test_list[0][N]\n    for _, v := range test_list {\n        if v[N] > max {\n            max = v[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := test_list[0][N]\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, sublist := range test_list {\n        if sublist[N] > max {\n            max = sublist[N]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := test_list[0][N]\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := test_list[0][N]\n    for _, sub_list := range test_list {\n        if sub_list[N] > max {\n            max = sub_list[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for i := 0; i < len(test_list); i++ {\n        if test_list[i][N] > max {\n            max = test_list[i][N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, row := range test_list {\n        if row[N] > max {\n            max = row[N]\n        }\n    }\n    return max\n}\n"
  ]
}