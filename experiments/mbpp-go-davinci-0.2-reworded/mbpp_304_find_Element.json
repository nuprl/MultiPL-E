{
  "name": "mbpp_304_find_Element",
  "language": "go_test.go",
  "prompt": "package find_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find element at a given index after number of rotations.\nfunc find_Element(arr []int, ranges [][]int, rotations int, index int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Element(t *testing.T) {\n  candidate := find_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, [][]int{[]int{0, 2}, []int{0, 3}}, 2, 1), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 2), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= index && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for _, r := range ranges {\n            arr = rotate(arr, r[0], r[1])\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= index && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for j := 0; j < len(ranges); j++ {\n            if ranges[j][0] <= i && i <= ranges[j][1] {\n                arr = append(arr[ranges[j][0]:ranges[j][1] + 1], arr[:ranges[j][0]]...)\n                break\n            }\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = index - range_[0]\n            index = (index + rotations) % (range_[1] - range_[0] + 1)\n            index = index + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for _, r := range ranges {\n            arr = append(arr[r[1]:], arr[:r[1]]...)\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= rotations && rotations <= range_[1] {\n            rotations = rotations % len(arr)\n            return arr[(index + rotations) % len(arr)]\n        }\n    }\n    return -1\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= index && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= index && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if range_[0] <= index && index <= range_[1] {\n            index = (index + rotations) % len(arr)\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for _, range_ := range ranges {\n            start := range_[0]\n            end := range_[1]\n            for j := start; j <= end; j++ {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for j := 0; j < len(ranges); j++ {\n            if ranges[j][0] <= i && i <= ranges[j][1] {\n                arr = append(arr[ranges[j][1] - i + 1:], arr[:ranges[j][1] - i + 1]...)\n                break\n            }\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for j := 0; j < len(ranges); j++ {\n            start := ranges[j][0]\n            end := ranges[j][1]\n            if start < end {\n                temp := arr[start]\n                for k := start; k < end; k++ {\n                    arr[k] = arr[k+1]\n                }\n                arr[end] = temp\n            } else {\n                temp := arr[end]\n                for k := end; k < start; k++ {\n                    arr[k] = arr[k+1]\n                }\n                arr[start] = temp\n            }\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    var result int\n    for i := 0; i < rotations; i++ {\n        for j := 0; j < len(ranges); j++ {\n            if i >= ranges[j][0] && i <= ranges[j][1] {\n                result = arr[ranges[j][1] - (i - ranges[j][0])]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = index - range_[0]\n            rotations = rotations % (range_[1] - range_[0] + 1)\n            index = (index + rotations) % (range_[1] - range_[0] + 1)\n            index = index + range_[0]\n            break\n        }\n    }\n    return arr[index]\n}\n"
  ]
}