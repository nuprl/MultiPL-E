{
  "name": "mbpp_623_nth_nums",
  "language": "go_test.go",
  "prompt": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    out := make([]int, len(nums))\n    for i, num := range nums {\n        out[i] = num\n        for j := 0; j < n - 1; j++ {\n            out[i] *= num\n        }\n    }\n    return out\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var res []int\n    for _, num := range nums {\n        res = append(res, num * n)\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpr06jaf4t_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpr06jaf4t_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpr06jaf4t_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    for i, _ := range nums {\n        nums[i] = nums[i] * n\n    }\n    return nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var res []int\n    for _, v := range nums {\n        res = append(res, v * n)\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmphrvcu_pp_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmphrvcu_pp_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmphrvcu_pp_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num*n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    for i, _ := range nums {\n        nums[i] = nums[i] ^ n\n    }\n    return nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num\n        for j := 1; j < n; j++ {\n            res[i] *= num\n        }\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num*n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpb2doqscb_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    for i, _ := range nums {\n        nums[i] = nums[i] * n\n    }\n    return nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    for i, _ := range nums {\n        nums[i] = nums[i] * n\n    }\n    return nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpo_qm92_x_test.go:31: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    nth_nums := make([]int, len(nums))\n    for i, num := range nums {\n        nth_nums[i] = num ^ n\n    }\n    return nth_nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpzdaa6mj9_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpzdaa6mj9_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpzdaa6mj9_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 0; j < n - 1; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num^n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpdk2gx5zu_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpdk2gx5zu_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpdk2gx5zu_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, v := range nums {\n        res[i] = v\n        for j := 1; j < n; j++ {\n            res[i] *= v\n        }\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num ^ n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpmzrin8cv_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ** n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp815bhjbo_test.go:12:26: invalid indirect of n (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    for i, _ := range nums {\n        nums[i] = nums[i] ^ n\n    }\n    return nums\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp1nrdcie2_test.go:31: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num\n        for j := 1; j < n; j++ {\n            result[i] *= num\n        }\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmp6x63mho0_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    res := make([]int, len(nums))\n    for i, num := range nums {\n        res[i] = num * n\n    }\n    return res\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124098,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpqwlttxiw_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num ^ n\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=10) %!s(int=11) %!s(int=8)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=9) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmpc7o0_ep6_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n    var result []int\n    for _, num := range nums {\n        result = append(result, num * n)\n    }\n    return result\n}\n\nfunc TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509921,
      "stdout": "--- FAIL: TestNth_Nums (0.00s)\n    --- FAIL: TestNth_Nums/test_num__0 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25) %!s(int=36) %!s(int=49) %!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestNth_Nums/test_num__1 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=1000) %!s(int=8000) %!s(int=27000)]', got '[%!s(int=30) %!s(int=60) %!s(int=90)]'\n    --- FAIL: TestNth_Nums/test_num__2 (0.00s)\n        tmprajxg0xx_test.go:32: expected '[%!s(int=248832) %!s(int=759375)]', got '[%!s(int=60) %!s(int=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}