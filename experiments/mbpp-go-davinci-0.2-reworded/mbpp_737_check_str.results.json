{
  "name": "mbpp_737_check_str",
  "language": "go_test.go",
  "prompt": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiouAEIOU]\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3w5r55aw_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpllcds6zr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpllcds6zr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex := regexp.MustCompile(\"^[aeiou]\")\n    regex := regexp.MustCompile(\"^[aeiou]\")\n    return regex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpblbks5pw_test.go:11:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex := regexp.MustCompile(`^[aeiou]`)\n    // return regex.MatchString(myString)\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpv90ywwn2_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex := regexp.MustCompile(`^[aeiou]`)\n    // return regex.MatchString(myString)\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmp1ep9lv99_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    fmt.Println(myString)\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "annie\ndawood\nElse\n--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp3qywdaak_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiouAEIOU].*\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccfm3ge5_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return (myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u')\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpqt4zuhe6_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiou]\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd5mxbx48_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex := regexp.MustCompile(\"^[aeiou]\")\n    // return regex.MatchString(myString)\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpz7y9us1c_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex to check if string starts with vowel\n    // regex := \"^[aeiouAEIOU].*\"\n    regex := \"^[aeiouAEIOU]\"\n    match, _ := regexp.MatchString(regex, myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkc0ptrtv_test.go:13:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var check_str_regex = regexp.MustCompile(`^[aeiou]`)\n    return check_str_regex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp4l2dcq1_test.go:10:27: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp9mb6hf1h_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return regexp.MatchString(\"^[aeiou]\", myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ac4ty9s_test.go:10:12: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var myRegex = regexp.MustCompile(`^[aeiouAEIOU]`)\n    return myRegex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzkzoes5b_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0:1] == \"a\" || myString[0:1] == \"e\" || myString[0:1] == \"i\" || myString[0:1] == \"o\" || myString[0:1] == \"u\" {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmp6g85vxe1_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // regex := regexp.MustCompile(\"^[aeiou]\")\n    // return regex.MatchString(myString)\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpz7y9us1c_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiouAEIOU].*\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccfm3ge5_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // check if the string starts with a vowel\n    if matched, _ := regexp.MatchString(\"^[aeiouAEIOU]\", myString); matched {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3lwyyqsw_test.go:11:22: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if (myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u') {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpg2guqjyd_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var regex = regexp.MustCompile(`^[aeiou]`)\n    return regex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplyx31408_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmp2ogwhjb1_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp9mb6hf1h_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // TODO: Write code here\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp_d02cja1_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var myRegex = regexp.MustCompile(`^[aeiou]`)\n    return myRegex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp829n2yjj_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    fmt.Println(myString)\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "annie\ndawood\nElse\n--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp3qywdaak_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiouAEIOU]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwxg9a1cn_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if matched, _ := regexp.MatchString(\"^[aeiouAEIOU]\", myString); matched {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkqrowxbx_test.go:10:22: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiou]\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd5mxbx48_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiouAEIOU].*\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccfm3ge5_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var myRegex = regexp.MustCompile(`^[aeiou]`)\n    return myRegex.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp829n2yjj_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmp9mb6hf1h_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpzqi7q1w__test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        if myString[0:1] == v {\n            result = true\n        }\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpm474ok3s_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiouAEIOU]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwxg9a1cn_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    match, _ := regexp.MatchString(\"^[aeiouAEIOU]\", myString)\n    return match\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3w5r55aw_test.go:10:17: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0:1] == \"a\" || myString[0:1] == \"e\" || myString[0:1] == \"i\" || myString[0:1] == \"o\" || myString[0:1] == \"u\" {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123467,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmp3geea3re_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    return myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u'\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123466,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmprdospvdg_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpjtalqm2e_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwnnn9et_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var re = regexp.MustCompile(\"^[aeiou]\")\n    return re.MatchString(myString)\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123467,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7iabefoa_test.go:10:14: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmppwh_xi_3_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    return true\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmpqhvi8ntb_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    var result bool\n    if len(myString) > 0 {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123467,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__1 (0.00s)\n        tmprh0lm3lf_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517434,
      "stdout": "--- FAIL: TestCheck_Str (0.00s)\n    --- FAIL: TestCheck_Str/test_num__2 (0.00s)\n        tmpk0nbyu2y_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}