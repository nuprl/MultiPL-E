{
  "name": "mbpp_83_get_Char",
  "language": "go_test.go",
  "prompt": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "func TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, i := range strr {\n        sum += int(i)\n    }\n    return string(sum % 26)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'a')\n}\n",
    "    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum = sum % 26\n    return string(sum + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26)\n}\n",
    "    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n",
    "    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n"
  ]
}