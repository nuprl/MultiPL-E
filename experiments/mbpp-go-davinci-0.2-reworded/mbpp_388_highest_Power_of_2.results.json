{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "go_test.go",
  "prompt": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "func TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    var res int = 1\n    for i := 2; i <= n; i *= 2 {\n        res = i\n    }\n    return res\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp8vkh6xzv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int\n    for i := 1; i <= n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i = i * 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpt79gwbxi_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpt79gwbxi_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpt79gwbxi_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i < n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpl06snfj5_test.go:34: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpcv_4cy2o_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2mvd61pt_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 5\n    }\n    if n == 7 {\n        return 6\n    }\n    if n == 8 {\n        return 7\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 9\n    }\n    if n == 11 {\n        return 10\n    }\n    if n == 12 {\n        return 11\n    }\n    if n == 13 {\n        return 12\n    }\n    if n == 14 {\n        return 13\n    }\n    if n == 15 {\n        return 14\n    }\n    if n == 16 {\n        return 15\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 17\n    }\n    if n == 19 {\n        return 18\n    }\n    if n == 20 {\n        return 19\n    }\n    if n == 21 {\n        return 20\n    }\n    if n == 22 {\n        return 21\n    }\n    if n == 23 {\n        return 22\n    }\n    if n == 24 {\n        return 23\n    }\n    if n == 25 {\n        return 24\n    }\n    if n == 26 {\n        return 25\n    }\n    if n == 27 {\n        return 26\n    }\n    if n == 28 {\n        return 27\n    }\n    if n == 29 {\n        return 28\n    }\n    if n == 30 {\n        return 29\n    }\n    if n == 31 {\n        return 30\n    }\n    if n == 32 {\n        return 31\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 33\n    }\n    if n == 35 {\n        return 34\n    }\n    if n == 36 {\n        return 35\n    }\n    if n == 37 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnuzllgmo_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpd3llztzl_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i-1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    for i := n; i > 0; i-- {\n        if i & (i-1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpcjypc6up_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var highest_power_of_2 int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i-1) == 0 {\n            highest_power_of_2 = i\n        }\n    }\n    return highest_power_of_2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4m8j36b9_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var power int = 1\n    for power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp8vkh6xzv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 5\n    }\n    if n == 7 {\n        return 6\n    }\n    if n == 8 {\n        return 7\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 9\n    }\n    if n == 11 {\n        return 10\n    }\n    if n == 12 {\n        return 11\n    }\n    if n == 13 {\n        return 12\n    }\n    if n == 14 {\n        return 13\n    }\n    if n == 15 {\n        return 14\n    }\n    if n == 16 {\n        return 15\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 17\n    }\n    if n == 19 {\n        return 18\n    }\n    if n == 20 {\n        return 19\n    }\n    if n == 21 {\n        return 20\n    }\n    if n == 22 {\n        return 21\n    }\n    if n == 23 {\n        return 22\n    }\n    if n == 24 {\n        return 23\n    }\n    if n == 25 {\n        return 24\n    }\n    if n == 26 {\n        return 25\n    }\n    if n == 27 {\n        return 26\n    }\n    if n == 28 {\n        return 27\n    }\n    if n == 29 {\n        return 28\n    }\n    if n == 30 {\n        return 29\n    }\n    if n == 31 {\n        return 30\n    }\n    if n == 32 {\n        return 31\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 33\n    }\n    if n == 35 {\n        return 34\n    }\n    if n == 36 {\n        return 35\n    }\n    if n == 37 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnuzllgmo_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpv9mulaf3_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpv9mulaf3_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpv9mulaf3_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var p int = 1\n    for p <= n {\n        p *= 2\n    }\n    return p / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123484,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result < n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123484,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbgt1cf0t_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var highest_power_of_2 int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            highest_power_of_2 = i\n        }\n    }\n    return highest_power_of_2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if result < i {\n            result *= 2\n        }\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpszvqvhmg_test.go:34: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n\n    var result = 1\n    for i := 2; i <= n; i = i * 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var highest_power_of_2 int = 1\n    for i := 0; i < n; i++ {\n        if highest_power_of_2 * 2 > n {\n            break\n        }\n        highest_power_of_2 *= 2\n    }\n    return highest_power_of_2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 0\n    for ; i < n; i++ {\n        if n == 1 {\n            return 1\n        } else if n == 2 {\n            return 2\n        } else if n == 3 {\n            return 2\n        } else if n == 4 {\n            return 4\n        } else if n == 5 {\n            return 4\n        } else if n == 6 {\n            return 4\n        } else if n == 7 {\n            return 4\n        } else if n == 8 {\n            return 8\n        } else if n == 9 {\n            return 8\n        } else if n == 10 {\n            return 8\n        } else if n == 11 {\n            return 8\n        } else if n == 12 {\n            return 8\n        } else if n == 13 {\n            return 8\n        } else if n == 14 {\n            return 8\n        } else if n == 15 {\n            return 8\n        } else if n == 16 {\n            return 16\n        } else if n == 17 {\n            return 16\n        } else if n == 18 {\n            return 16\n        } else if n == 19 {\n            return 16\n        } else if n == 20 {\n            return 16\n        } else if n == 21 {\n            return 16\n        } else if n == 22 {\n            return 16\n        } else if n == 23 {\n            return 16\n        } else if n == 24 {\n            return 16\n        } else if n == 25 {\n            return 16\n        } else if n == 26 {\n            return 16\n        } else if n == 27 {\n            return 16\n        } else if n == 28 {\n            return 16\n        } else if n == 29 {\n            return 16\n        } else if n == 30 {\n            return 16\n        } else if n == 31 {\n            return 16\n        } else if n == 32 {\n            return 32\n        } else if n == 33 {\n            return 32\n        } else if n == 34 {\n            return 32\n        } else if n == 35 {\n            return 32\n        } else if n == 36 {\n            return 32\n        } else if n == 37 {\n            return 32\n        } else if n == 38 {\n            return 32\n       \nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123485,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpeq5w_3gl_test.go:89:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    return 1 << uint(n - 1).TrailingZeros()\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpks5c_swz_test.go:13:28: uint(n - 1).TrailingZeros undefined (type uint has no field or method TrailingZeros)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 5\n    }\n    if n == 7 {\n        return 6\n    }\n    if n == 8 {\n        return 7\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 9\n    }\n    if n == 11 {\n        return 10\n    }\n    if n == 12 {\n        return 11\n    }\n    if n == 13 {\n        return 12\n    }\n    if n == 14 {\n        return 13\n    }\n    if n == 15 {\n        return 14\n    }\n    if n == 16 {\n        return 15\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 17\n    }\n    if n == 19 {\n        return 18\n    }\n    if n == 20 {\n        return 19\n    }\n    if n == 21 {\n        return 20\n    }\n    if n == 22 {\n        return 21\n    }\n    if n == 23 {\n        return 22\n    }\n    if n == 24 {\n        return 23\n    }\n    if n == 25 {\n        return 24\n    }\n    if n == 26 {\n        return 25\n    }\n    if n == 27 {\n        return 26\n    }\n    if n == 28 {\n        return 27\n    }\n    if n == 29 {\n        return 28\n    }\n    if n == 30 {\n        return 29\n    }\n    if n == 31 {\n        return 30\n    }\n    if n == 32 {\n        return 31\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 33\n    }\n    if n == 35 {\n        return 34\n    }\n    if n == 36 {\n        return 35\n    }\n    if n == 37 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnuzllgmo_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return highest_Power_of_2(n / 2) * 2\n    } else {\n        return highest_Power_of_2(n / 2)\n    }\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpjz7ilkmu_test.go:35: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpjz7ilkmu_test.go:35: expected '%!s(int=16)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int = 1\n    for result <= n {\n        result = result << 1\n    }\n    return result >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // First, we need to find the highest power of 2 that is less than or equal to n.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    // We can do this by repeatedly dividing n by 2 until we get a number that is less than or equal to 2.\n    //\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123485,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpr4x1jxoo_test.go:30:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result < n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123484,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbgt1cf0t_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    result := 1\n    for result <= n {\n        result *= 2\n    }\n\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i * 2 > n {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpath87or4_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return highest_Power_of_2(n / 2)\n    }\n    return highest_Power_of_2(n - 1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpw2m01a7b_test.go:37: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpw2m01a7b_test.go:37: expected '%!s(int=16)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpw2m01a7b_test.go:37: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbh9mgnfb_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp6vs4d1v4_test.go:34: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp6vs4d1v4_test.go:34: expected '%!s(int=16)', got '%!s(int=19)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp6vs4d1v4_test.go:34: expected '%!s(int=32)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpd3llztzl_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 2\n    }\n\n    if n == 4 {\n        return 4\n    }\n\n    if n == 5 {\n        return 4\n    }\n\n    if n == 6 {\n        return 4\n    }\n\n    if n == 7 {\n        return 4\n    }\n\n    if n == 8 {\n        return 8\n    }\n\n    if n == 9 {\n        return 8\n    }\n\n    if n == 10 {\n        return 8\n    }\n\n    if n == 11 {\n        return 8\n    }\n\n    if n == 12 {\n        return 8\n    }\n\n    if n == 13 {\n        return 8\n    }\n\n    if n == 14 {\n        return 8\n    }\n\n    if n == 15 {\n        return 8\n    }\n\n    if n == 16 {\n        return 16\n    }\n\n    if n == 17 {\n        return 16\n    }\n\n    if n == 18 {\n        return 16\n    }\n\n    if n == 19 {\n        return 16\n    }\n\n    if n == 20 {\n        return 16\n    }\n\n    if n == 21 {\n        return 16\n    }\n\n    if n == 22 {\n        return 16\n    }\n\n    if n == 23 {\n        return 16\n    }\n\n    if n == 24 {\n        return 16\n    }\n\n    if n == 25 {\n        return 16\n    }\n\n    if n == 26 {\n        return 16\n    }\n\n    if n == 27 {\n        return 16\n    }\n\n    if n == 28 {\n        return 16\n    }\n\n    if n == 29 {\n        return 16\n    }\n\n    if n == 30 {\n        return 16\n    }\n\n    if n == 31 {\n        return 16\n    }\n\n    if n == 32 {\n        return 32\n    }\n\n    if n == 33 {\n        return 32\n    }\n\n    if n == 34 {\n        return 32\n    }\n\n    if n == 35 {\n        return 32\n    }\n\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123485,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps1s7dx2g_test.go:156:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var power int = 1\n    for power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    var result int = 0\n    for i <= n {\n        result = i\n        i = i * 2\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var power int = 1\n    for power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if n % 2 == 0 {\n        return highest_Power_of_2(n / 2) * 2\n    } else {\n        return highest_Power_of_2(n / 2)\n    }\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr91a4hxi_test.go:44: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr91a4hxi_test.go:44: expected '%!s(int=16)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2mvd61pt_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw0sszc6m_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps300e872_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    // n > 1\n    var i int = 1\n    for i * 2 <= n {\n        i *= 2\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp7ja7owd0_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510374,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpmkkryfiv_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4wewbdzy_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd7qyduoy_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2mvd61pt_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    return n & (n - 1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123486,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpiyqmk0j6_test.go:28: expected '%!s(int=16)', got '%!s(int=18)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpiyqmk0j6_test.go:28: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123482,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2mvd61pt_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123483,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr7u9cfv8_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}