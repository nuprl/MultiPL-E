{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "go_test.go",
  "prompt": "package text_match_wordz_middle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "func TestText_Match_Wordz_Middle(t *testing.T) {\n  candidate := text_match_wordz_middle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonzabc.\"), expected: true },\n     { actual: candidate(\"zxyabc.\"), expected: false },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(text) < 3 {\n        return false\n    }\n    for i := 1; i < len(text) - 1; i++ {\n        if text[i] == 'z' {\n            return true\n        }\n    }\n    return false\n}\n",
    "    if len(text) < 3 {\n        return false\n    }\n    for i := 1; i < len(text) - 1; i++ {\n        if text[i] == 'z' {\n            return true\n        }\n    }\n    return false\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    // your code here\n    return false\n}\n",
    "    return false\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    var result bool\n    var text_len int = len(text)\n    var text_slice []string = strings.Split(text, \"\")\n    var text_slice_len int = len(text_slice)\n    var text_slice_first string = text_slice[0]\n    var text_slice_last string = text_slice[text_slice_len - 1]\n    var text_slice_middle string = text_slice[1:text_slice_len - 1]\n    var text_slice_middle_len int = len(text_slice_middle)\n\n    if text_slice_first == \"z\" || text_slice_last == \"z\" {\n        result = false\n    } else {\n        for i := 0; i < text_slice_middle_len; i++ {\n            if text_slice_middle[i] == \"z\" {\n                result = true\n            }\n        }\n    }\n\n    return result\n}\n"
  ]
}