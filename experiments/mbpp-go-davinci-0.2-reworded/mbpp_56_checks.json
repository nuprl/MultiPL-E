{
  "name": "mbpp_56_checks",
  "language": "go_test.go",
  "prompt": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "func TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Write your code here\n    return false\n}\n",
    "    // TODO: Implement this function.\n    return false\n}\n",
    "    return n == 2 * reverse(n) - 1\n}\n",
    "    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n",
    "    var rev int\n    var temp int\n    var num int\n    num = n\n    for n > 0 {\n        temp = n % 10\n        rev = rev * 10 + temp\n        n = n / 10\n    }\n    if num == rev * 2 - 1 {\n        return true\n    }\n    return false\n}\n",
    "    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return r == n * 2 - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n\n    return n == r - 1\n}\n",
    "    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    if n < 10 {\n        return false\n    }\n\n    var reversed int\n    for n > 0 {\n        reversed = reversed * 10 + n % 10\n        n /= 10\n    }\n\n    return n == reversed - 1\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    return n == (2 * reverse(n) - 1)\n}\n",
    "    var rev int\n    var temp int\n    temp = n\n    for temp != 0 {\n        rev = rev * 10 + temp % 10\n        temp = temp / 10\n    }\n    return n == rev * 2 - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n    return n == (n % 10) * 2 + 1\n}\n",
    "    return n == 2 * reverse(n) - 1\n}\n",
    "    return n == 2*reverse(n) - 1\n}\n",
    "    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n"
  ]
}