{
  "name": "mbpp_788_new_tuple",
  "language": "go_test.go",
  "prompt": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, str := range test_list {\n        new_list = append(new_list, str)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, i := range test_list {\n        new_list = append(new_list, i)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp2l3uyc8b_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp2l3uyc8b_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp2l3uyc8b_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{test_str}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmpxhhblbjq_test.go:32: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmpxhhblbjq_test.go:32: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmpxhhblbjq_test.go:32: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list) + 1)\n    for i := 0; i < len(test_list); i++ {\n        new_list[i] = test_list[i]\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, 0)\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpojxmixn8_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, i := range test_list {\n        new_list = append(new_list, i)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmploj2tmn6_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmploj2tmn6_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmploj2tmn6_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmpwfx3de3g_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmpwfx3de3g_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmpwfx3de3g_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    // Create a new list.\n    new_list := make([]interface{}, len(test_list) + 1)\n    // Add the string to the new list.\n    new_list[0] = test_str\n    // Add the list to the new list.\n    for i, v := range test_list {\n        new_list[i + 1] = v\n    }\n    // Return the new list.\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp_ufpycty_test.go:37: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp_ufpycty_test.go:37: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp_ufpycty_test.go:37: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    // Create a new list with the given string and list.\n    new_list := []interface{}{test_str}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmpt55f5cpa_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmpt55f5cpa_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmpt55f5cpa_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    return append(test_list, test_str)\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5aujp5zc_test.go:10:18: cannot use append(test_list, test_str) (type []string) as type []interface {} in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list) + 1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list)+1)\n    new_list[0] = test_str\n    for i := 0; i < len(test_list); i++ {\n        new_list[i+1] = test_list[i]\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list) + 1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list)+1)\n    new_list[0] = test_str\n    for i := 0; i < len(test_list); i++ {\n        new_list[i+1] = test_list[i]\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmpcyv1ixnx_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list) + 1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list)+1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list) + 1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    return append(test_list, test_str)\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5aujp5zc_test.go:10:18: cannot use append(test_list, test_str) (type []string) as type []interface {} in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    // Create a new list.\n    new_list := make([]interface{}, 0)\n    // Append the string to the list.\n    new_list = append(new_list, test_str)\n    // Append the list to the list.\n    new_list = append(new_list, test_list)\n    // Return the list.\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp1rl6oui1_test.go:35: expected '[WEB is best]', got '[best [WEB is]]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp1rl6oui1_test.go:35: expected '[We are Developers]', got '[Developers [We are]]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp1rl6oui1_test.go:35: expected '[Part is Wrong]', got '[Wrong [Part is]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list)+1)\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list[len(test_list)] = test_str\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_str)\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[WEB is best]', got '[best WEB is]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[We are Developers]', got '[Developers We are]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp4bvgq985_test.go:33: expected '[Part is Wrong]', got '[Wrong Part is]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list...)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3n44zwb_test.go:11:22: cannot use test_list (type []string) as type []interface {} in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := []interface{}{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    for _, v := range test_list {\n        new_list = append(new_list, v)\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    var new_list []interface{}\n    new_list = append(new_list, test_list)\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "--- FAIL: TestNew_Tuple (0.00s)\n    --- FAIL: TestNew_Tuple/test_num__0 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[WEB is best]', got '[[WEB is] best]'\n    --- FAIL: TestNew_Tuple/test_num__1 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[We are Developers]', got '[[We are] Developers]'\n    --- FAIL: TestNew_Tuple/test_num__2 (0.00s)\n        tmp7vvp1px7_test.go:31: expected '[Part is Wrong]', got '[[Part is] Wrong]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    new_list := make([]interface{}, len(test_list))\n    for i, v := range test_list {\n        new_list[i] = v\n    }\n    new_list = append(new_list, test_str)\n    return new_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517137,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    return append(test_list, test_str)\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5aujp5zc_test.go:10:18: cannot use append(test_list, test_str) (type []string) as type []interface {} in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n    test_list = append(test_list, test_str)\n    return test_list\n}\n\nfunc TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn4c0biqf_test.go:11:5: cannot use test_list (type []string) as type []interface {} in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}