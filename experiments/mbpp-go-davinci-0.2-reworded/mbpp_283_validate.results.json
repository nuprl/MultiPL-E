{
  "name": "mbpp_283_validate",
  "language": "go_test.go",
  "prompt": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "func TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    m := map[int]int{}\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var count [10]int\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i, c := range count {\n        if c > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    // 1. convert the integer to a string\n    // 2. loop through the string and count the frequency of each digit\n    // 3. check whether the frequency of each digit is less than or equal to the digit itself\n    // 4. return true or false\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s); i++ {\n        count := 0\n        for j := 0; j < len(s); j++ {\n            if s[i] == s[j] {\n                count++\n            }\n        }\n        if count > int(s[i] - '0') {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digitMap := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitMap[digit]++\n        n /= 10\n    }\n    for digit, freq := range digitMap {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // convert the integer to a string\n    str := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    freq := make(map[string]int)\n    // loop through the string\n    for _, v := range str {\n        // convert the string to a string\n        s := fmt.Sprintf(\"%c\", v)\n        // if the digit is not in the map, add it to the map\n        if _, ok := freq[s]; !ok {\n            freq[s] = 1\n        } else {\n            // if the digit is in the map, increment the frequency\n            freq[s]++\n        }\n    }\n    // loop through the string\n    for _, v := range str {\n        // convert the string to a string\n        s := fmt.Sprintf(\"%c\", v)\n        // convert the string to an integer\n        i, _ := strconv.Atoi(s)\n        // check whether the frequency of each digit in the integer is less than or equal to the digit itself\n        if freq[s] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2q_spd7i_test.go:31:17: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var count [10]int\n    for n > 0 {\n        count[n%10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        if freq[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n = n / 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n /= 10\n        m[d]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digit_count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit]++\n        n /= 10\n    }\n    for digit, count := range digit_count {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digitFreq := make([]int, 10)\n    for n > 0 {\n        digitFreq[n % 10]++\n        n /= 10\n    }\n    for i, freq := range digitFreq {\n        if freq > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    freq := make([]int, 10)\n    for n > 0 {\n        freq[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // convert int to string\n    s := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    m := make(map[string]int)\n    // iterate through the string\n    for _, v := range s {\n        // if the digit is not in the map, add it to the map\n        if _, ok := m[string(v)]; !ok {\n            m[string(v)] = 1\n        } else {\n            // if the digit is in the map, increase the frequency by 1\n            m[string(v)]++\n        }\n    }\n    // iterate through the map\n    for k, v := range m {\n        // if the frequency is greater than the digit, return false\n        if v > int(k[0] - '0') {\n            return false\n        }\n    }\n    // return true if all the frequencies are less than or equal to the digit\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n = n / 10\n        m[d]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var digits = make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    var digits [10]int\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digit_counts := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_counts[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digit_counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if m[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        if freq[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var digits [10]int\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var count [10]int\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var digits [10]int\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, c := range digits {\n        if c > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if _, ok := digits[digit]; ok {\n            digits[digit]++\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n = n / 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        freq[d]++\n        n /= 10\n    }\n    for d, f := range freq {\n        if f > d {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n        m[digit]++\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return true\n    }\n    count := make([]int, 10)\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n = n / 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        if m[d] > d {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for d, c := range m {\n        if c > d {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var count [10]int\n    for n > 0 {\n        count[n%10]++\n        n /= 10\n    }\n    for i, c := range count {\n        if c > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        m[digit]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // convert the integer to a string\n    s := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    m := make(map[rune]int)\n    // loop through the string and count the frequency of each digit\n    for _, c := range s {\n        m[c]++\n    }\n    // loop through the map and check whether the frequency of each digit is less than or equal to the digit itself\n    for k, v := range m {\n        if v > int(k - '0') {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        m[digit]++\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        digits[digit]++\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n /= 10\n        m[d]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n /= 10\n        m[d]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    digit_count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digit_count {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if _, ok := m[digit]; ok {\n            m[digit]++\n        } else {\n            m[digit] = 1\n        }\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n = n / 10\n        m[d]++\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var digits = make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var count [10]int\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    digit := make(map[int]int)\n    for n > 0 {\n        digit[n % 10]++\n        n /= 10\n    }\n    for k, v := range digit {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for d, c := range m {\n        if c > d {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        count[digit]++\n        n /= 10\n    }\n    for digit, freq := range count {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for k, v := range freq {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        freq[n % 10]++\n        n /= 10\n    }\n    for k, v := range freq {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        digits[d]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    var digits [10]int\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        if d == 0 {\n            return false\n        }\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__0 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValidate/test_num__2 (0.00s)\n        tmp1tmb527b_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, count := range m {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "--- FAIL: TestValidate (0.00s)\n    --- FAIL: TestValidate/test_num__1 (0.00s)\n        tmp0hb3gs2t_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        digits[d]++\n        n /= 10\n    }\n    for d, f := range digits {\n        if f > d {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}