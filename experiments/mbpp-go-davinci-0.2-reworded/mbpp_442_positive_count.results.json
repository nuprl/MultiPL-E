{
  "name": "mbpp_442_positive_count",
  "language": "go_test.go",
  "prompt": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "func TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpzfvax2i9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpzfvax2i9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpzfvax2i9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var total, positives int\n    for _, num := range nums {\n        total++\n        if num > 0 {\n            positives++\n        }\n    }\n    return float64(positives) / float64(total)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpwjqxmaq8_test.go:35: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpwjqxmaq8_test.go:35: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpwjqxmaq8_test.go:35: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    var total_count int = 0\n    for _, num := range nums {\n        total_count += 1\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return float64(positive_count) / float64(total_count)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpua3yny4t_test.go:36: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpua3yny4t_test.go:36: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpua3yny4t_test.go:36: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    pos_count := 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count += 1\n        }\n    }\n    return float64(pos_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpdwgutsqd_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpdwgutsqd_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpdwgutsqd_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, v := range nums {\n        if v > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpujgaqwbo_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpujgaqwbo_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpujgaqwbo_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    var total_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n        total_count++\n    }\n    return positive_count / total_count\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpapqcwkjy_test.go:36: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpapqcwkjy_test.go:36: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpapqcwkjy_test.go:36: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpzn9mj60t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpzn9mj60t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpzn9mj60t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var total int\n    var positives int\n    for _, num := range nums {\n        if num > 0 {\n            positives++\n        }\n        total++\n    }\n    return float64(positives) / float64(total)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg0d932d2_test.go:36: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg0d932d2_test.go:36: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg0d932d2_test.go:36: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, n := range nums {\n        if n > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmphlxpuj2j_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmphlxpuj2j_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmphlxpuj2j_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positives float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positives++\n        }\n    }\n    return positives / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmptxv1bf2i_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmptxv1bf2i_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmptxv1bf2i_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpbh4xq8_o_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt6yizmhf_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpc6twp9xj_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpc6twp9xj_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpc6twp9xj_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpg262o6mc_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8xoi3sw8_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positives float64\n    for _, num := range nums {\n        if num > 0 {\n            positives += 1\n        }\n    }\n    return positives / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcz68ps13_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcz68ps13_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcz68ps13_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcevis_fz_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpe6h88slw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmplhey7v5r_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmplhey7v5r_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmplhey7v5r_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var pos_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count += 1\n        }\n    }\n    return float64(pos_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp0qqyyjmi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp0qqyyjmi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp0qqyyjmi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8n12xwd4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4maqt2cm_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcdpnn_t9_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var pos_count int = 0\n    var neg_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count++\n        } else {\n            neg_count++\n        }\n    }\n    return float64(pos_count) / float64(pos_count + neg_count)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123862,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpi08xucti_test.go:37: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpi08xucti_test.go:37: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpi08xucti_test.go:37: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa2dvq1___test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}