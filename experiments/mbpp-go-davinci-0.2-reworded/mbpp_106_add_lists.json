{
  "name": "mbpp_106_add_lists",
  "language": "go_test.go",
  "prompt": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_list)\n    return result\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n",
    "    for _, val := range test_list {\n        test_tup = append(test_tup, val)\n    }\n    return test_tup\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n",
    "    return append(test_tup, test_list)\n}\n",
    "    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_list {\n        new_list = append(new_list, item)\n    }\n    for _, item := range test_tup {\n        new_list = append(new_list, item)\n    }\n    return new_list\n}\n",
    "    var new_list []interface{}\n    for i := 0; i < len(test_tup); i++ {\n        new_list = append(new_list, test_tup[i])\n    }\n    for i := 0; i < len(test_list); i++ {\n        new_list = append(new_list, test_list[i])\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    result = append(result, test_tup...)\n    result = append(result, test_list...)\n    return result\n}\n",
    "    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n    // Append the first list to the result.\n    result = append(result, test_list)\n    // Append the second list to the result.\n    result = append(result, test_tup)\n    // Return the result.\n    return result\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n",
    "    var new_list []interface{}\n    for _, val := range test_list {\n        new_list = append(new_list, val)\n    }\n    for _, val := range test_tup {\n        new_list = append(new_list, val)\n    }\n    return new_list\n}\n",
    "    for _, elem := range test_list {\n        test_tup = append(test_tup, elem)\n    }\n    return test_tup\n}\n",
    "    // Create a new slice with the length of the test_tup slice.\n    new_list := make([]interface{}, len(test_tup))\n    // Copy the test_tup slice into the new_list slice.\n    copy(new_list, test_tup)\n    // Append the test_list slice to the new_list slice.\n    new_list = append(new_list, test_list)\n    // Return the new_list slice.\n    return new_list\n}\n",
    "    for _, v := range test_list {\n        test_tup = append(test_tup, v)\n    }\n    return test_tup\n}\n"
  ]
}