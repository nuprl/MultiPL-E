{
  "name": "mbpp_227_min_of_three",
  "language": "go_test.go",
  "prompt": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    var min int\n    if a < b {\n        min = a\n    } else {\n        min = b\n    }\n    if c < min {\n        min = c\n    }\n    return min\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a <= b && a <= c {\n        return a\n    } else if b <= a && b <= c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122597,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        }\n    } else {\n        if b < c {\n            return b\n        }\n    }\n    return c\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b {\n        if a < c {\n            return a\n        } else {\n            return c\n        }\n    } else {\n        if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\nfunc TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509802,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}