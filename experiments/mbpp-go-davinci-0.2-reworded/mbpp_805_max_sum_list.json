{
  "name": "mbpp_805_max_sum_list",
  "language": "go_test.go",
  "prompt": "package max_sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists [][]int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Sum_List(t *testing.T) {\n  candidate := max_sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{10, 11, 12}, []int{7, 8, 9}}), expected: []int{10, 11, 12} },\n     { actual: candidate([][]int{[]int{3, 2, 1}, []int{6, 5, 4}, []int{12, 11, 10}}), expected: []int{12, 11, 10} },\n     { actual: candidate([][]int{[]int{2, 3, 1}}), expected: []int{2, 3, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int = 0\n    var max_list []int\n    for _, list := range lists {\n        var sum int = 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int = 0\n    var max_list []int\n    for _, list := range lists {\n        var sum int = 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, n := range list {\n            sum += n\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, item := range list {\n            sum += item\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        var sum int\n        for _, n := range list {\n            sum += n\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, item := range list {\n            sum += item\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    var max_sum int\n    var max_list []int\n    for _, list := range lists {\n        sum := 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, num := range list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, elem := range list {\n            sum += elem\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, element := range list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, i := range list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, value := range list {\n            sum += value\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_sum := 0\n    max_list := []int{}\n    for _, list := range lists {\n        sum := 0\n        for _, i := range list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n"
  ]
}