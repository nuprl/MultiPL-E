{
  "name": "mbpp_279_is_num_decagonal",
  "language": "go_test.go",
  "prompt": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n*(3*n-2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123863,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n*(3*n-2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123863,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpve5mz8by_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3*n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123863,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp_opdgw2g_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp_opdgw2g_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp_opdgw2g_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return (n * (3 * n - 2))\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmp2zgr9jxf_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n    return n * (3 * n - 2)\n}\n\nfunc TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517670,
      "stdout": "--- FAIL: TestIs_Num_Decagonal (0.00s)\n    --- FAIL: TestIs_Num_Decagonal/test_num__0 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=27)', got '%!s(int=21)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__1 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=175)', got '%!s(int=133)'\n    --- FAIL: TestIs_Num_Decagonal/test_num__2 (0.00s)\n        tmpw9l0r9g1_test.go:28: expected '%!s(int=370)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}