{
  "name": "mbpp_292_find",
  "language": "go_test.go",
  "prompt": "package find_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n int, m int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind(t *testing.T) {\n  candidate := find\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 3), expected: 3 },\n     { actual: candidate(4, 2), expected: 2 },\n     { actual: candidate(20, 5), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    var result int\n    result = n / m\n    return result\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    if n < m {\n        return 0\n    }\n    return 1 + find(n - m, m)\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    if n < m {\n        return 0\n    }\n    return 1 + find(n - m, m)\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    var i int\n    for i = 0; i < n; i++ {\n        if i * m > n {\n            break\n        }\n    }\n    return i - 1\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    var result int\n    result = n / m\n    return result\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    var result int\n    result = n / m\n    return result\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    if n < m {\n        return 0\n    } else {\n        return 1 + find(n-m, m)\n    }\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n/m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    var q int\n    for i := 1; i <= n; i++ {\n        if n - i * m < 0 {\n            q = i - 1\n            break\n        }\n    }\n    return q\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    if n < m {\n        return 0\n    } else {\n        return 1 + find(n - m, m)\n    }\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n",
    "    return n / m\n}\n"
  ]
}